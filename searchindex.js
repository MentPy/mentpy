Search.setIndex({"titles": ["MentPy", "mentpy.BaseSimulator", "mentpy.BaseSimulator.__call__", "mentpy.BaseSimulator.__init__", "mentpy.BaseSimulator.__repr__", "mentpy.BaseSimulator.input_state", "mentpy.BaseSimulator.mbqcircuit", "mentpy.BaseSimulator.measure", "mentpy.BaseSimulator.reset", "mentpy.BaseSimulator.run", "mentpy.CirqSimulator", "mentpy.CirqSimulator.__init__", "mentpy.CirqSimulator.measure", "mentpy.CirqSimulator.reset", "mentpy.CirqSimulator.run", "mentpy.GraphState", "mentpy.GraphState.__contains__", "mentpy.GraphState.__eq__", "mentpy.GraphState.__getitem__", "mentpy.GraphState.__init__", "mentpy.GraphState.__iter__", "mentpy.GraphState.__len__", "mentpy.GraphState.__repr__", "mentpy.GraphState.__str__", "mentpy.GraphState.add_edge", "mentpy.GraphState.add_edges_from", "mentpy.GraphState.add_node", "mentpy.GraphState.add_nodes_from", "mentpy.GraphState.add_weighted_edges_from", "mentpy.GraphState.adj", "mentpy.GraphState.adjacency", "mentpy.GraphState.adjlist_inner_dict_factory", "mentpy.GraphState.adjlist_inner_dict_factory.__class_getitem__", "mentpy.GraphState.adjlist_inner_dict_factory.__contains__", "mentpy.GraphState.adjlist_inner_dict_factory.__delitem__", "mentpy.GraphState.adjlist_inner_dict_factory.__eq__", "mentpy.GraphState.adjlist_inner_dict_factory.__ge__", "mentpy.GraphState.adjlist_inner_dict_factory.__getattribute__", "mentpy.GraphState.adjlist_inner_dict_factory.__getitem__", "mentpy.GraphState.adjlist_inner_dict_factory.__gt__", "mentpy.GraphState.adjlist_inner_dict_factory.__ior__", "mentpy.GraphState.adjlist_inner_dict_factory.__iter__", "mentpy.GraphState.adjlist_inner_dict_factory.__le__", "mentpy.GraphState.adjlist_inner_dict_factory.__len__", "mentpy.GraphState.adjlist_inner_dict_factory.__lt__", "mentpy.GraphState.adjlist_inner_dict_factory.__ne__", "mentpy.GraphState.adjlist_inner_dict_factory.__new__", "mentpy.GraphState.adjlist_inner_dict_factory.__or__", "mentpy.GraphState.adjlist_inner_dict_factory.__repr__", "mentpy.GraphState.adjlist_inner_dict_factory.__reversed__", "mentpy.GraphState.adjlist_inner_dict_factory.__ror__", "mentpy.GraphState.adjlist_inner_dict_factory.__setitem__", "mentpy.GraphState.adjlist_inner_dict_factory.clear", "mentpy.GraphState.adjlist_inner_dict_factory.copy", "mentpy.GraphState.adjlist_inner_dict_factory.fromkeys", "mentpy.GraphState.adjlist_inner_dict_factory.get", "mentpy.GraphState.adjlist_inner_dict_factory.items", "mentpy.GraphState.adjlist_inner_dict_factory.keys", "mentpy.GraphState.adjlist_inner_dict_factory.pop", "mentpy.GraphState.adjlist_inner_dict_factory.popitem", "mentpy.GraphState.adjlist_inner_dict_factory.setdefault", "mentpy.GraphState.adjlist_inner_dict_factory.update", "mentpy.GraphState.adjlist_inner_dict_factory.values", "mentpy.GraphState.clear", "mentpy.GraphState.clear_edges", "mentpy.GraphState.copy", "mentpy.GraphState.degree", "mentpy.GraphState.edge_subgraph", "mentpy.GraphState.edges", "mentpy.GraphState.get_edge_data", "mentpy.GraphState.has_edge", "mentpy.GraphState.has_node", "mentpy.GraphState.index_mapping", "mentpy.GraphState.is_directed", "mentpy.GraphState.is_multigraph", "mentpy.GraphState.name", "mentpy.GraphState.nbunch_iter", "mentpy.GraphState.neighbors", "mentpy.GraphState.nodes", "mentpy.GraphState.number_of_edges", "mentpy.GraphState.number_of_nodes", "mentpy.GraphState.order", "mentpy.GraphState.remove_edge", "mentpy.GraphState.remove_edges_from", "mentpy.GraphState.remove_node", "mentpy.GraphState.remove_nodes_from", "mentpy.GraphState.size", "mentpy.GraphState.stabilizers", "mentpy.GraphState.subgraph", "mentpy.GraphState.to_directed", "mentpy.GraphState.to_directed_class", "mentpy.GraphState.to_undirected", "mentpy.GraphState.to_undirected_class", "mentpy.GraphState.update", "mentpy.MBQCircuit", "mentpy.MBQCircuit.__delitem__", "mentpy.MBQCircuit.__getitem__", "mentpy.MBQCircuit.__init__", "mentpy.MBQCircuit.__len__", "mentpy.MBQCircuit.__repr__", "mentpy.MBQCircuit.__setitem__", "mentpy.MBQCircuit.add_edge", "mentpy.MBQCircuit.add_edges_from", "mentpy.MBQCircuit.calculate_order", "mentpy.MBQCircuit.depth", "mentpy.MBQCircuit.flow", "mentpy.MBQCircuit.graph", "mentpy.MBQCircuit.input_nodes", "mentpy.MBQCircuit.inputc", "mentpy.MBQCircuit.measurement_order", "mentpy.MBQCircuit.measurements", "mentpy.MBQCircuit.output_nodes", "mentpy.MBQCircuit.outputc", "mentpy.MBQCircuit.partial_order", "mentpy.MBQCircuit.planes", "mentpy.MBQCircuit.trainable_nodes", "mentpy.Measurement", "mentpy.Measurement.__init__", "mentpy.Measurement.__repr__", "mentpy.Measurement.angle", "mentpy.Measurement.is_trainable", "mentpy.Measurement.matrix", "mentpy.Measurement.plane", "mentpy.Measurement.set_angle", "mentpy.NumpySimulatorDM", "mentpy.NumpySimulatorDM.__init__", "mentpy.NumpySimulatorDM.arbitrary_qubit_gate", "mentpy.NumpySimulatorDM.cnot_ij", "mentpy.NumpySimulatorDM.controlled_z", "mentpy.NumpySimulatorDM.current_number_simulated_nodes", "mentpy.NumpySimulatorDM.current_simulated_nodes", "mentpy.NumpySimulatorDM.get_proyectors", "mentpy.NumpySimulatorDM.measure", "mentpy.NumpySimulatorDM.measure_angle", "mentpy.NumpySimulatorDM.measure_ment", "mentpy.NumpySimulatorDM.partial_trace", "mentpy.NumpySimulatorDM.pure2density", "mentpy.NumpySimulatorDM.reset", "mentpy.NumpySimulatorDM.run", "mentpy.NumpySimulatorDM.swap_ij", "mentpy.PatternSimulator", "mentpy.PatternSimulator.__call__", "mentpy.PatternSimulator.__init__", "mentpy.PatternSimulator.__repr__", "mentpy.PatternSimulator.measure", "mentpy.PatternSimulator.reset", "mentpy.PatternSimulator.run", "mentpy.PauliOp", "mentpy.PauliOp.__getitem__", "mentpy.PauliOp.__init__", "mentpy.PauliOp.__repr__", "mentpy.PauliOp.append", "mentpy.PauliOp.commutator", "mentpy.PauliOp.get_subset", "mentpy.PauliOp.symplectic_prod", "mentpy.PennylaneSimulator", "mentpy.PennylaneSimulator.__init__", "mentpy.PennylaneSimulator.measure", "mentpy.PennylaneSimulator.reset", "mentpy.PennylaneSimulator.run", "mentpy.QiskitSimulator", "mentpy.QiskitSimulator.__init__", "mentpy.QiskitSimulator.measure", "mentpy.QiskitSimulator.reset", "mentpy.QiskitSimulator.run", "mentpy.draw", "mentpy.hstack", "mentpy.merge", "mentpy.vstack", "Installation", "Welcome to MentPy\u2019s documentation", "An introduction to Graph States", "An introduction to MBQC", "An introduction to MB-QML"], "terms": {"librari": [0, 65, 89, 91, 169, 170], "compos": 0, "follwo": 0, "modul": [0, 65, 89, 91, 172], "class": [0, 1, 10, 90, 92, 94, 124, 140, 147, 155, 160, 171, 172], "pauliop": [0, 147, 148, 149, 150, 151, 152, 153, 154], "repres": [0, 147, 171], "pauli": [0, 147, 151, 152, 153, 154], "matric": [0, 147], "string": [0, 23, 24, 26, 28, 66, 68, 70, 75, 78, 86], "thi": [0, 1, 10, 26, 29, 31, 61, 63, 65, 66, 67, 68, 69, 70, 75, 76, 77, 79, 89, 90, 91, 92, 93, 160, 166, 167, 168, 170, 172, 173], "contain": [0, 15, 24, 25, 27, 28, 65, 66, 67, 68, 71, 76, 83, 85, 88, 93, 170, 172], "mbqc": [0, 1, 6, 9, 10, 14, 15, 94, 99, 104, 105, 107, 109, 110, 111, 113, 114, 115, 124, 140, 155, 159, 160, 164, 165, 166, 167, 168, 170, 171], "circuit": [0, 1, 6, 9, 10, 14, 94, 99, 104, 105, 107, 109, 110, 111, 113, 114, 115, 124, 140, 155, 159, 160, 164, 165, 166, 167, 168, 170, 172], "measur": [0, 1, 7, 9, 10, 12, 14, 94, 95, 96, 97, 100, 103, 109, 110, 116, 117, 118, 119, 120, 121, 122, 123, 124, 131, 132, 133, 134, 138, 140, 144, 155, 157, 159, 160, 162, 164, 170, 172], "alia": [0, 15, 31, 116, 172], "ment": [0, 94, 97, 110, 116, 124, 134, 172], "angl": [0, 1, 2, 7, 10, 12, 14, 116, 117, 119, 121, 123, 124, 131, 132, 133, 138, 140, 141, 144, 146, 155, 157, 159, 160, 162, 164, 170, 172], "int": [0, 1, 9, 10, 14, 21, 66, 79, 80, 81, 86, 94, 97, 98, 104, 107, 109, 110, 111, 115, 116, 117, 124, 129, 130, 138, 140, 146, 153, 155, 159, 160, 164], "float": [0, 1, 2, 7, 9, 10, 12, 14, 86, 116, 117, 121, 124, 132, 138, 140, 141, 144, 146, 155, 157, 159, 160, 162, 164], "str": [0, 1, 4, 10, 23, 27, 94, 99, 116, 117, 124, 140, 143, 147, 149, 155, 157, 159, 160, 162, 164], "none": [0, 1, 3, 8, 10, 11, 13, 15, 24, 26, 31, 52, 54, 55, 60, 61, 66, 68, 69, 70, 76, 78, 79, 86, 93, 97, 116, 117, 121, 124, 125, 131, 137, 140, 142, 145, 155, 158, 160, 161, 163, 165, 172], "plane": [0, 94, 114, 116, 117, 122, 155, 157, 159, 160, 162, 164, 172], "xy": [0, 97, 117, 155, 157, 159, 160, 162, 164, 172], "paramet": [0, 1, 7, 9, 10, 12, 14, 18, 24, 25, 26, 27, 28, 65, 66, 67, 68, 69, 70, 71, 76, 77, 78, 79, 82, 83, 84, 85, 86, 88, 91, 93, 94, 132, 140, 147, 153, 155, 157, 159, 160, 162, 164, 172], "The": [0, 1, 5, 6, 7, 9, 10, 12, 14, 18, 21, 24, 25, 28, 29, 65, 66, 67, 68, 69, 70, 76, 78, 79, 80, 81, 83, 86, 88, 93, 94, 124, 132, 140, 147, 153, 155, 157, 159, 160, 162, 164, 169, 170, 171, 172], "onli": [0, 29, 30, 65, 66, 67, 68, 76, 78, 79, 93, 140], "us": [0, 1, 6, 10, 15, 16, 18, 20, 21, 24, 25, 26, 27, 29, 65, 66, 67, 68, 70, 71, 76, 78, 86, 88, 89, 90, 91, 92, 93, 124, 140, 155, 160, 170, 171, 172], "xz": [0, 153, 172], "yz": [0, 172], "can": [0, 24, 25, 26, 65, 68, 70, 76, 78, 79, 83, 88, 93, 147, 169, 171, 172], "x": [0, 31, 38, 172], "y": [0, 31, 38, 172], "z": [0, 124, 128, 171, 172], "properti": [0, 5, 6, 29, 66, 68, 75, 78, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 119, 122], "is_train": [0, 116, 120], "return": [0, 1, 4, 10, 15, 16, 17, 18, 20, 21, 22, 23, 30, 31, 35, 36, 37, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 58, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 86, 88, 89, 90, 91, 92, 94, 96, 98, 99, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 120, 121, 124, 129, 130, 131, 140, 143, 147, 150, 152, 153, 154, 155, 160], "true": [0, 15, 16, 27, 31, 33, 65, 68, 70, 71, 73, 74, 78, 91, 97, 116, 120], "trainabl": [0, 94, 115, 116, 120, 172], "matrix": [0, 116, 121, 124, 136, 147, 172], "represent": [0, 89, 99, 121], "set_angl": [0, 116, 123], "op": [0, 147, 149, 153], "ndarrai": [0, 1, 3, 5, 9, 10, 11, 13, 14, 124, 125, 137, 138, 140, 142, 145, 146, 147, 149, 155, 156, 159, 160, 161, 163, 164], "list": [0, 1, 2, 9, 10, 14, 20, 25, 27, 28, 63, 64, 66, 67, 78, 83, 84, 85, 88, 89, 91, 93, 94, 97, 102, 107, 109, 111, 115, 124, 130, 138, 140, 141, 146, 147, 149, 153, 155, 159, 160, 164, 166, 168], "union": [0, 147], "np": [0, 1, 10, 147, 155, 160], "exampl": [0, 15, 16, 18, 20, 21, 23, 24, 25, 26, 27, 28, 30, 63, 64, 65, 66, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 147, 151, 153, 172], "creat": [0, 15, 31, 46, 54, 65, 67, 78, 88, 89, 91, 94, 147, 170, 171, 172], "from": [0, 15, 24, 31, 52, 54, 61, 63, 64, 68, 76, 78, 79, 82, 83, 93, 94, 102, 147, 170], "In": [0, 15, 31, 61, 78, 87, 88, 94, 147, 151, 153, 169, 171, 172], "1": [0, 15, 16, 18, 20, 24, 25, 26, 27, 28, 29, 30, 64, 66, 67, 68, 69, 70, 77, 78, 79, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 147, 151, 153, 169, 171, 172], "mp": [0, 1, 10, 15, 87, 94, 140, 147, 151, 153, 155, 160, 169, 171, 172], "arrai": [0, 147], "0": [0, 15, 18, 20, 23, 24, 25, 26, 27, 28, 30, 64, 66, 67, 68, 69, 70, 71, 77, 78, 79, 82, 84, 85, 86, 87, 88, 89, 91, 93, 94, 147, 153, 169, 171, 172], "2": [0, 15, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 59, 64, 66, 68, 70, 78, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 147, 151, 153, 169, 171, 172], "print": [0, 15, 87, 147, 151, 153, 171, 172], "xi": [0, 147], "ix": [0, 147], "iz": [0, 147, 153], "zi": [0, 147, 153], "3": [0, 15, 20, 23, 24, 25, 26, 27, 28, 29, 30, 64, 65, 67, 68, 70, 71, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 93, 94, 147, 151, 169, 171, 172], "xiz": [0, 147, 151, 153], "zii": [0, 147, 153], "iiz": [0, 147, 153], "izi": [0, 147, 151, 153], "4": [0, 15, 16, 18, 20, 21, 25, 26, 27, 30, 63, 64, 65, 66, 67, 69, 70, 77, 79, 82, 83, 86, 87, 88, 93, 94, 147, 151, 171, 172], "5": [0, 15, 24, 28, 65, 67, 68, 93, 147, 171, 172], "6": [0, 86, 147, 172], "group": 0, "append": [0, 147, 151], "other": [0, 15, 17, 65, 147, 151, 152, 154, 172], "end": [0, 147, 151], "anoth": [0, 147, 151], "op1": [0, 151], "op2": [0, 151], "xzz": [0, 151, 171], "commut": [0, 147, 152], "two": [0, 15, 24, 70, 78, 79, 89, 93, 147, 152, 154, 167, 172], "get_subset": [0, 147, 153], "indic": [0, 15, 72, 124, 135, 147, 153], "subset": [0, 147, 153], "ii": [0, 153], "symplectic_prod": [0, 147, 154], "symplect": [0, 147, 154], "product": [0, 147, 154], "graphstat": [0, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 106, 165, 172], "networkx": [0, 15, 19, 24, 26, 65], "graph": [0, 15, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 97, 106, 165, 166, 168, 170], "A": [0, 15, 18, 26, 27, 65, 66, 68, 77, 78, 84, 85, 88, 89, 91, 124, 170], "state": [0, 1, 5, 7, 8, 9, 10, 12, 13, 14, 15, 19, 87, 94, 97, 99, 106, 124, 132, 133, 135, 136, 137, 138, 155, 157, 158, 159, 160, 162, 163, 164, 165, 166, 168, 170, 172], "inherit": [0, 15], "deal": [0, 94, 170], "manipul": [0, 94, 170], "draw": [0, 165, 172], "fix_wir": [0, 165], "flow": [0, 94, 97, 105, 165, 170, 172], "hstack": [0, 166, 172], "horizont": [0, 166], "stack": [0, 166, 168], "larger": [0, 166, 167, 168], "input": [0, 1, 5, 10, 15, 93, 94, 107, 108, 124, 136, 155, 160, 166, 167, 168, 172], "new": [0, 31, 46, 54, 65, 166, 167, 168], "first": [0, 59, 82, 93, 166, 168], "output": [0, 94, 111, 112, 124, 136, 166, 167, 168, 172], "last": [0, 59, 166, 168], "vstack": [0, 168, 172], "vertic": [0, 168], "provid": [0, 23, 29, 31, 56, 57, 62, 65, 66, 68, 78, 86, 93, 172], "function": [0, 1, 2, 10, 94, 105, 113, 124, 140, 141, 155, 160, 170, 172], "defin": [0, 171, 172], "arg": [0, 15, 19, 142, 156], "kwarg": [0, 1, 2, 7, 9, 10, 12, 14, 15, 19, 31, 46, 94, 102, 124, 125, 140, 141, 142, 144, 146, 155, 156, 159, 160, 162, 164, 165], "1d": [0, 15, 87, 94], "cluster": [0, 15, 87, 94, 172], "g": [0, 15, 16, 18, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 63, 64, 65, 66, 67, 68, 69, 70, 71, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 171], "five": [0, 15, 87, 94], "qubit": [0, 15, 87, 94, 124, 126, 127, 128, 131, 133, 139, 140, 171, 172], "add_edges_from": [0, 15, 24, 25, 28, 65, 87, 88, 91, 93, 94, 102, 171, 172], "node": [0, 15, 16, 18, 20, 21, 23, 24, 26, 27, 29, 30, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 77, 78, 79, 80, 81, 82, 84, 85, 88, 89, 91, 93, 94, 95, 96, 98, 100, 101, 107, 108, 111, 112, 115, 124, 129, 130, 171, 172], "edg": [0, 15, 23, 24, 25, 28, 29, 63, 64, 65, 66, 67, 68, 69, 70, 76, 79, 82, 83, 84, 86, 88, 89, 91, 93, 94, 101, 102, 171], "index_map": [0, 15, 72], "map": [0, 15, 66, 72], "stabil": [0, 15, 87], "gener": [0, 15, 86, 87, 170], "calcul": [0, 87, 170], "xziii": [0, 87], "zxzii": [0, 87], "izxzi": [0, 87], "iizxz": [0, 87], "iiizx": [0, 87], "input_nod": [0, 94, 97, 107, 172], "output_nod": [0, 94, 97, 111, 172], "dict": [0, 15, 18, 27, 29, 30, 31, 49, 59, 61, 65, 68, 75, 78, 85, 89, 91, 93, 94, 97, 110, 114], "default_measur": [0, 97, 172], "\u03b8": [0, 97, 172], "callabl": [0, 94, 97, 105, 113], "partial_ord": [0, 94, 97, 113], "measurement_ord": [0, 94, 97, 109], "gflow": [0, 97, 165], "relabel_indic": [0, 97], "bool": [0, 65, 68, 70, 78, 91, 97], "kei": [0, 24, 26, 27, 29, 31, 33, 34, 49, 51, 54, 55, 57, 58, 59, 60, 61, 75, 88, 94, 95, 96, 100, 147, 148], "ar": [0, 15, 24, 27, 28, 30, 59, 65, 66, 67, 68, 70, 76, 77, 78, 79, 86, 88, 93, 94, 124, 129, 130, 170, 171, 172], "valu": [0, 15, 17, 24, 26, 29, 31, 35, 36, 39, 40, 42, 44, 45, 47, 50, 51, 54, 55, 58, 59, 60, 62, 66, 68, 69, 76, 78, 86, 94, 96, 100, 172], "add_edg": [0, 15, 24, 25, 28, 68, 77, 79, 86, 89, 91, 94, 101], "u": [0, 15, 24, 25, 28, 68, 69, 70, 79, 82, 83, 89, 93, 94, 101, 124, 126], "v": [0, 15, 24, 25, 28, 31, 58, 61, 68, 69, 70, 79, 82, 83, 89, 93, 94, 101], "add": [0, 15, 24, 25, 26, 27, 28, 93, 94, 101, 102, 165, 170], "an": [0, 15, 18, 20, 24, 25, 30, 31, 62, 65, 66, 67, 68, 69, 75, 76, 77, 78, 82, 83, 84, 86, 88, 91, 93, 94, 101, 124, 133, 170], "between": [0, 15, 24, 65, 79, 82, 83, 88, 94, 101, 124, 128], "tupl": [0, 1, 9, 10, 14, 15, 24, 25, 26, 27, 28, 30, 31, 59, 68, 69, 70, 78, 82, 83, 93, 94, 102, 124, 132, 138, 140, 146, 155, 159, 160, 164], "calculate_ord": [0, 94, 103], "order": [0, 15, 21, 59, 80, 81, 94, 103, 109, 113], "depth": [0, 94, 104], "resourc": [0, 94, 106, 171, 172], "inputc": [0, 94, 108], "i": [0, 94, 108, 124, 126, 127, 128, 131, 133, 134, 139, 170, 171, 172], "c": [0, 68, 86, 94, 108, 112], "complement": [0, 94, 108, 112], "outputc": [0, 94, 112], "o": [0, 27, 94, 112], "partial": [0, 94, 113, 124, 135], "trainable_nod": [0, 94, 115], "todo": [0, 165], "support": [0, 140, 165, 170], "without": [0, 15, 64, 65, 70, 165], "merg": [0, 167, 172], "state1": [0, 167], "state2": [0, 167], "along": [0, 78, 167, 172], "depend": [0, 167, 172], "concat_indic": [0, 167], "basesimul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 124, 155, 160], "abc": [0, 1], "base": [0, 1, 88, 90, 92, 172], "cirqsimul": [0, 1, 10, 11, 12, 13, 14, 140, 155], "pattern": [0, 10, 124, 138, 140, 155, 160], "placehold": [0, 10, 160], "cirq": [0, 10], "It": [0, 10, 71, 78, 93, 160, 169, 172], "yet": [0, 10, 160], "implement": [0, 10, 31, 41, 160, 172], "patternsimul": [0, 1, 10, 140, 141, 142, 143, 144, 145, 146, 155, 160], "pennylanesimul": [0, 1, 10, 140, 155, 156, 157, 158, 159, 160], "qiskitsimul": [0, 160, 161, 162, 163, 164], "qiskit": [0, 160], "differ": [0, 65, 93, 172], "input_st": [0, 1, 3, 5, 8, 10, 11, 13, 124, 125, 137, 140, 142, 145, 155, 156, 158, 160, 161, 163], "should": [0, 1, 26, 93], "directli": [0, 1, 24, 76], "instead": [0, 1, 65, 69], "one": [0, 1, 26, 65, 67, 76], "subclass": [0, 1, 89, 90, 91, 92], "abstract": [0, 1, 7, 8, 9], "system": [0, 1, 7, 9, 10, 12, 14, 124, 132, 155, 157, 159, 160, 162, 164, 172], "reset": [0, 1, 8, 10, 13, 124, 137, 140, 145, 155, 158, 160, 163], "initi": [0, 1, 3, 8, 10, 11, 13, 15, 19, 94, 97, 124, 125, 137, 140, 142, 147, 149, 155, 156, 158, 160, 161, 163], "run": [0, 1, 9, 10, 14, 124, 138, 140, 146, 155, 159, 160, 164], "ani": [0, 9, 14, 25, 26, 65, 67, 69, 76, 159, 164, 172], "numpysimulatordm": [0, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139], "densiti": [0, 124, 136], "numpi": [0, 124], "quantum": [0, 124, 136, 138, 171, 172], "arbitrary_qubit_g": [0, 124, 126], "n": [0, 15, 16, 18, 20, 29, 30, 71, 77, 78, 84, 88, 124, 126, 127, 128, 139], "singl": [0, 15, 24, 25, 26, 28, 66, 68, 76, 83, 124, 126, 172], "gate": [0, 124, 126, 127, 128, 171, 172], "act": [0, 65, 124, 126], "number": [0, 15, 21, 24, 26, 28, 66, 70, 79, 80, 81, 86, 94, 98, 124, 126, 127, 128, 129], "cnot_ij": [0, 124, 127], "j": [0, 124, 127, 128, 139, 171], "cnot": [0, 124, 127], "target": [0, 124, 127], "controlled_z": [0, 124, 128], "control": [0, 68, 75, 124, 128, 171], "total": [0, 15, 79, 86, 124, 128], "current_number_simulated_nod": [0, 124, 129], "current": [0, 94, 99, 124, 129, 130, 140, 170], "current_simulated_nod": [0, 124, 130], "get_proyector": [0, 124, 131], "n_qubit": [0, 124, 131], "force0": [0, 124, 131, 133, 134], "fals": [0, 15, 16, 31, 33, 65, 68, 70, 73, 74, 78, 89, 91, 124, 131, 133, 134], "proyector": [0, 124, 131], "measure_angl": [0, 124, 133], "rho": [0, 124, 133, 135], "measure_": [0, 124, 134], "partial_trac": [0, 124, 135], "trace": [0, 124, 135], "over": [0, 15, 18, 20, 25, 27, 29, 30, 31, 49, 68, 76, 77, 78, 124, 135], "some": [0, 78, 93, 124, 135, 172], "pure2dens": [0, 124, 136], "psi": [0, 124, 136, 171], "correspond": [0, 31, 58, 67, 124, 136], "given": [0, 25, 28, 31, 58, 83, 124, 138], "swap_ij": [0, 124, 139], "swap": [0, 124, 139], "pennylan": [0, 140, 142], "default": [0, 15, 24, 27, 28, 29, 31, 55, 58, 60, 65, 66, 68, 69, 76, 78, 79, 86, 91, 140, 172], "adamoptim": 0, "step_siz": 0, "b1": 0, "9": [0, 169, 172], "b2": 0, "999": 0, "ep": 0, "1e": 0, "08": 0, "adam": 0, "option": [0, 24, 25, 26, 27, 28, 65, 66, 68, 78, 79, 86, 91], "step": 0, "size": [0, 15, 26, 27, 79, 86], "moment": 0, "decai": 0, "rate": 0, "second": [0, 93], "small": 0, "avoid": 0, "divis": 0, "zero": 0, "10": [0, 26, 27, 93, 172], "8": [0, 172], "opt": 0, "object": [0, 15, 24, 25, 26, 29, 31, 46, 56, 57, 62, 65, 66, 68, 69, 70, 76, 89, 91, 93, 147, 149, 172], "0x7fad07365510": 0, "sgdoptim": 0, "f": [0, 31, 61], "x0": 0, "num_it": 0, "100": 0, "callback": 0, "verbos": 0, "optimize_and_gradient_norm": 0, "update_step_s": 0, "factor": 0, "99": 0, "updat": [0, 15, 24, 25, 26, 27, 28, 31, 61, 88, 93], "momentum": 0, "nesterov": 0, "sgd": 0, "whether": [0, 76], "0x7fad071aecb0": 0, "common_ansatz": 0, "ha": [0, 25, 31, 33, 61, 65, 66, 78, 86, 93], "sever": 0, "common": [0, 93, 172], "ansatz": [0, 170], "algorithm": [0, 24], "7": [0, 24, 28, 69, 70, 77, 82, 93, 172], "11": [0, 27, 172], "grid_clust": [0, 172], "m": [0, 169], "grid": [0, 172], "row": 0, "column": 0, "type": [0, 1, 3, 10, 11, 18, 20, 21, 23, 30, 31, 46, 65, 66, 67, 68, 69, 70, 76, 77, 78, 79, 80, 81, 86, 88, 89, 91, 124, 125, 140, 142, 155, 156, 160, 161, 171], "2d": 0, "linear_clust": [0, 172], "linear": 0, "many_wir": 0, "n_wire": 0, "mani": [0, 24, 26, 170], "wire": 0, "each": [0, 15, 25, 28, 29, 66, 67, 78, 83, 86, 89], "three": 0, "respect": 0, "muta": 0, "n_layer": 0, "multipl": [0, 15, 27, 28, 66, 85, 93], "triangl": 0, "layer": 0, "figsiz": 0, "16": [0, 172], "spturb": 0, "period": 0, "symmetri": 0, "protect": 0, "topolog": 0, "perturb": 0, "spt": 0, "boundari": 0, "condit": 0, "flowspac": 0, "graph_stat": 0, "allow_any_size_graph": 0, "space": 0, "mbqcgraph": 0, "possibl": [0, 76, 88], "len": [0, 15, 21, 31, 43], "go": 0, "via": [0, 25, 27], "ad": [0, 24, 25, 28, 93], "remov": [0, 15, 31, 52, 58, 59, 63, 64, 82, 83, 84, 85, 88], "flow_spac": 0, "work": [0, 29, 170], "less": 0, "than": [0, 88], "all_graphs_graph": 0, "all": [0, 15, 20, 24, 25, 27, 28, 30, 31, 52, 63, 64, 65, 66, 68, 76, 77, 78, 79, 83, 84, 86, 89, 91], "subgraph": [0, 15, 67, 88], "third": 0, "generator_all_graph": 0, "gf": 0, "gf2": 0, "12": [0, 172], "13": [0, 26, 172], "14": [0, 172], "15": [0, 24, 172], "17": [0, 172], "are_lc_equival": 0, "graph1": 0, "graph2": 0, "clifford_form": 0, "tensor": 0, "check": [0, 76], "egraph": 0, "lc": 0, "equival": [0, 70, 78, 172], "clifford": 0, "so": [0, 29, 65], "arxiv": 0, "quant": 0, "ph": 0, "0405023": 0, "param": 0, "against": 0, "describ": 0, "form": [0, 24, 69], "local": 0, "exist": [0, 24, 68, 69, 84], "If": [0, 31, 58, 61, 65, 66, 68, 76, 77, 78, 79, 82, 84, 85, 86, 89, 90, 91, 92, 93, 170, 172], "produc": 0, "length": [0, 24], "2x2": 0, "global": 0, "2nx2n": 0, "thei": [0, 24, 65, 93], "accord": 0, "specif": [0, 27, 78], "brownian_circuit": 0, "dim": 0, "dt": 0, "random": 0, "unitari": 0, "close": 0, "ident": [0, 21, 69, 71, 77, 80, 81], "calculate_lie_algebra": 0, "lie": [0, 170], "algebra": [0, 170], "clifford_vec_to_glob": 0, "vec": 0, "convert": 0, "take": [0, 25, 27, 93], "vector": 0, "a_1": 0, "a_2": 0, "a_n": 0, "b_1": 0, "b_2": 0, "b_n": 0, "c_1": 0, "c_2": 0, "c_n": 0, "d_1": 0, "d_2": 0, "d_n": 0, "2n": 0, "block": 0, "b": [0, 69, 77, 86], "d": [0, 25, 31, 52, 53, 56, 57, 58, 61, 62, 68, 88, 89, 91, 93], "where": [0, 25, 28, 78, 83, 88, 171], "diagon": 0, "diag": 0, "4n": 0, "specifi": [0, 15, 24, 25, 27, 28, 31, 33, 58, 67, 78, 79, 83, 93, 172], "clifford_vec_to_tensor": 0, "index": [0, 94, 95, 96, 100], "k": [0, 31, 58, 61, 83], "a_k": 0, "b_k": 0, "c_k": 0, "d_k": 0, "combin": [0, 93], "iter": [0, 15, 18, 20, 24, 27, 29, 30, 31, 41, 49, 54, 61, 66, 67, 68, 76, 77, 78, 85, 88, 93], "r": [0, 169], "success": 0, "element": 0, "rang": [0, 25, 93, 172], "digraph_expressivity_of_flow_spac": 0, "method": [0, 21, 61, 65, 79, 80, 81, 89, 91, 93, 171], "kl": 0, "digraph": [0, 16, 18, 20, 21, 24, 25, 26, 27, 28, 30, 63, 64, 65, 66, 69, 70, 71, 77, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 93], "express": [0, 78], "draw_digraph_flow_spac": 0, "digraph_expr": 0, "hostedtoolcach": 0, "python": [0, 24, 26, 65, 69, 70, 89, 91, 169, 170], "x64": 0, "lib": 0, "python3": [0, 169], "site": 0, "packag": [0, 169, 170], "py": [0, 169], "expressivity_with_histogram": 0, "graph_state_circuit": 0, "n_sampl": 0, "10000": 0, "n_bin": 0, "1000": [0, 93], "kullback": 0, "leiber": 0, "entropi": 0, "which": [0, 18, 68, 78, 88, 89, 91, 172], "we": [0, 171, 172], "sampl": 0, "estim": 0, "bin": 0, "histogram": 0, "leibler": 0, "diverg": 0, "re": 0, "rel": 0, "generate_haar_random_st": 0, "make": [0, 88], "haar": 0, "haar_probability_density_of_fidel": 0, "probabl": 0, "fidel": 0, "p_": 0, "dimens": 0, "hilbert": 0, "lc_cluster_flowspac": 0, "deg_graph": 0, "sanity_check": 0, "lc_equival": 0, "lc_constraint_system": 0, "h": [0, 27, 65, 67, 88, 89, 91], "build": [0, 172], "constraint": 0, "adjac": [0, 15, 18, 29, 30, 66, 84, 93], "construct": [0, 173], "binari": 0, "equat": 0, "must": [0, 24, 25, 28, 70, 93], "satisfi": 0, "through": [0, 68, 88, 172], "shape": 0, "unknown": 0, "lie_algebra_complet": 0, "max_it": 0, "complet": [0, 89, 91], "set": [0, 26, 27, 29, 31, 51, 54, 56, 57, 68, 78, 85, 88, 93, 94, 100, 171, 172], "basi": [0, 172], "nullspace_basi": 0, "nullspac": 0, "whose": 0, "right": [0, 172], "randomunitary_closetoid": 0, "t": [0, 26, 68, 69, 78], "random_special_unitari": 0, "special": 0, "distribut": 0, "random_train_test_states_unitari": 0, "test_siz": 0, "train": [0, 170], "test": [0, 76, 170], "data": [0, 24, 25, 27, 28, 29, 65, 68, 69, 78, 82, 89, 91, 170], "random_train_test_states_unitary_nois": 0, "noise_level": 0, "noise_typ": 0, "brownian": 0, "nois": 0, "parametr": 0, "level": [0, 65], "either": [0, 31, 61, 93], "bitflip": 0, "percentag": 0, "reduce_rreform_mod2": 0, "max_col": 0, "put": 0, "reduc": 0, "echelon": 0, "modulo": 0, "up": 0, "maximum": 0, "pivot": 0, "remove_repeated_op": 0, "repeat": 0, "sample_probability_density_of_fidel": 0, "backend": 0, "search_nullspac": 0, "determin": [0, 170, 172], "search": 0, "sum": [0, 66, 86], "pair": [0, 31, 59, 78], "solut": 0, "found": [0, 31, 58, 69], "nonetyp": 0, "train_test_split": 0, "split": 0, "mentpi": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172], "simul": [1, 5, 6, 8, 10, 13, 124, 129, 130, 137, 140, 142, 155, 158, 160, 163, 170, 172], "mbqcircuit": [1, 3, 6, 10, 11, 15, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 124, 125, 140, 142, 155, 156, 160, 161, 165, 167, 172], "self": [1, 2, 3, 4, 10, 11, 15, 17, 22, 31, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 50, 51, 68, 76, 116, 118, 124, 125, 140, 141, 142, 143, 147, 150, 155, 156, 160, 161], "help": [1, 3, 10, 11, 31, 46, 124, 125, 140, 142, 155, 156, 160, 161], "accur": [1, 3, 10, 11, 31, 46, 124, 125, 140, 142, 155, 156, 160, 161], "signatur": [1, 3, 10, 11, 31, 46, 124, 125, 140, 142, 155, 156, 160, 161], "__repr__": [1, 4, 10, 15, 22, 31, 48, 94, 99, 116, 118, 124, 140, 143, 147, 150, 155, 160], "repr": [1, 4, 10, 15, 22, 31, 48, 116, 118, 124, 140, 143, 147, 150, 155, 160], "__call__": [1, 2, 10, 124, 140, 141, 155, 160], "call": [1, 2, 10, 68, 78, 124, 140, 141, 155, 160], "see": [3, 11, 19, 31, 32, 46, 89, 124, 125, 142, 156, 161, 171, 172], "note": [10, 18, 24, 25, 26, 28, 65, 67, 68, 76, 77, 78, 83, 88, 89, 91, 93, 160], "adjlist_inner_dict_factori": [15, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], "adjlist_outer_dict_factori": 15, "edge_attr_dict_factori": 15, "graph_attr_dict_factori": 15, "node_attr_dict_factori": 15, "node_dict_factori": 15, "more": [15, 19, 65, 71, 86, 88, 89, 91, 170], "inform": [15, 19, 23, 29, 65, 89, 91, 172], "__str__": [15, 23], "short": [15, 23], "summari": [15, 23], "__contains__": [15, 16, 31, 33], "otherwis": [15, 16, 31, 58, 70, 73, 74, 78, 79, 86], "__eq__": [15, 17, 31, 35], "__getitem__": [15, 18, 31, 38, 94, 96, 147, 148], "neighbor": [15, 18, 29, 30, 77], "__iter__": [15, 20, 31, 41, 76], "__len__": [15, 21, 31, 43, 80, 81, 94, 98], "u_of_edg": [15, 24], "v_of_edg": [15, 24], "attr": [15, 24, 25, 26, 27, 28], "ebunch_to_add": [15, 25, 28], "add_nod": [15, 26, 27, 78], "node_for_ad": [15, 26], "attribut": [15, 24, 25, 26, 27, 28, 63, 65, 66, 67, 68, 69, 75, 78, 82, 86, 88, 89, 91, 93, 172], "add_nodes_from": [15, 26, 27, 65, 88, 93], "nodes_for_ad": [15, 27], "add_weighted_edges_from": [15, 25, 28], "weight": [15, 24, 25, 26, 27, 28, 66, 68, 69, 70, 77, 78, 82, 86, 93], "clear": [15, 31, 52, 63], "clear_edg": [15, 64], "alter": [15, 64], "copi": [15, 31, 53, 65, 67, 88, 89, 90, 91, 92], "as_view": [15, 65, 89, 91], "edge_subgraph": [15, 67], "induc": [15, 67, 88], "get_edge_data": [15, 69], "dictionari": [15, 18, 24, 25, 26, 30, 31, 33, 54, 55, 60, 69, 78], "associ": [15, 24, 25, 69], "has_edg": [15, 70], "has_nod": [15, 71], "is_direct": [15, 73], "direct": [15, 29, 30, 65, 68, 73, 79, 89, 90, 92], "is_multigraph": [15, 74, 88], "multigraph": [15, 16, 18, 20, 21, 24, 25, 26, 27, 28, 30, 63, 64, 65, 66, 68, 69, 70, 71, 74, 77, 80, 81, 83, 84, 85, 86, 88, 89, 91, 93], "nbunch_it": [15, 76], "nbunch": [15, 66, 68, 76], "number_of_edg": [15, 79, 86], "number_of_nod": [15, 21, 26, 80, 81], "remove_edg": [15, 82, 83], "remove_edges_from": [15, 82, 83], "ebunch": [15, 25, 83], "remove_nod": [15, 84, 85], "remove_nodes_from": [15, 84, 85, 88], "view": [15, 31, 56, 57, 62, 65, 66, 67, 68, 76, 78, 88, 91], "to_direct": [15, 65, 89, 90, 91, 92], "to_directed_class": [15, 90], "empti": [15, 59, 65, 68, 76, 90, 92], "to_undirect": [15, 91], "undirect": [15, 79, 91, 92], "to_undirected_class": [15, 92], "adj": [15, 18, 29, 77, 88, 93], "hold": [15, 24, 29, 66, 86], "degre": [15, 66], "degreeview": [15, 66], "edgeview": [15, 68], "name": [15, 23, 28, 31, 37, 63, 66, 75, 89], "identifi": [15, 75], "nodeview": [15, 78], "nx": [16, 18, 20, 21, 23, 24, 25, 26, 27, 28, 30, 63, 64, 65, 66, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 93], "path_graph": [16, 18, 20, 21, 23, 30, 63, 64, 65, 66, 67, 68, 69, 70, 71, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93], "multidigraph": [16, 18, 20, 21, 24, 25, 26, 27, 28, 30, 63, 64, 65, 66, 69, 70, 71, 77, 80, 81, 83, 84, 85, 86, 88, 89, 93], "etc": [16, 18, 20, 21, 24, 25, 26, 27, 28, 30, 63, 64, 65, 66, 68, 69, 70, 71, 77, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91], "adj_dict": 18, "connect": 18, "same": [18, 25, 28, 67, 70, 89, 172], "similar": [18, 89, 91], "atlasview": [18, 77], "niter": [20, 76], "nnode": [21, 80, 81], "info": [23, 29], "foo": [23, 29, 68, 69, 78], "automat": [24, 170], "alreadi": [24, 89], "keyword": [24, 25, 26, 27, 28, 78, 86, 93], "access": [24, 68, 77], "s": [24, 31, 56, 57, 62, 65, 93, 172], "below": 24, "hashabl": [24, 26, 70, 76], "argument": [24, 25, 26, 27, 28, 78, 93], "label": [24, 25, 172], "assign": [24, 25, 69], "collect": [24, 82, 93], "design": [24, 90, 92, 172], "numer": [24, 66, 86], "follow": [24, 31, 61, 70, 93], "e": [24, 25, 27, 31, 61, 68, 69, 70, 82, 85, 93, 171], "explicit": 24, "capac": 24, "342": 24, "For": [24, 28, 29, 30, 65, 68, 79, 88, 172], "non": [24, 84], "subscript": [24, 29], "notat": 24, "conveni": 25, "wai": [25, 65, 77, 78], "twice": [25, 28], "effect": 25, "when": [25, 68, 76, 78, 93, 172], "duplic": [25, 28], "preced": [25, 27], "zip": 25, "path": 25, "wn2898": 25, "except": [26, 69, 70, 84, 93], "chang": [26, 65, 88, 89, 91, 172], "hello": [26, 27], "k3": [26, 27], "utm": 26, "382871": 26, "3972649": 26, "includ": [26, 29, 30, 78], "On": 26, "platform": 26, "item": [26, 29, 31, 52, 56, 78, 88, 93], "mutabl": 26, "though": [26, 70], "care": 26, "hash": 26, "doesn": [26, 69], "OR": 27, "sort": 27, "l": [27, 170], "everi": [27, 172], "attrdict": 27, "color": [27, 29, 68, 78, 93], "blue": [27, 29], "w": 28, "simpli": [28, 88], "store": 28, "read": [29, 65, 67], "like": [29, 31, 56, 57, 65, 68, 78, 88, 89, 91, 93, 170], "structur": [29, 65, 88, 89, 91, 93], "behav": 29, "idiom": 29, "nbr": [29, 88, 93], "datadict": [29, 93], "also": [29, 63, 68, 78, 172], "foovalu": 29, "outgo": [29, 30], "successor": 29, "adj_it": 30, "nbrdict": 30, "pep": [31, 32], "585": [31, 32], "els": [31, 33, 55, 60, 88], "__delitem__": [31, 34, 94, 95], "delet": [31, 34, 94, 95], "__ge__": [31, 36], "__getattribute__": [31, 37], "getattr": [31, 37], "__gt__": [31, 39], "__ior__": [31, 40], "__le__": [31, 42], "__lt__": [31, 44], "__ne__": [31, 45], "__or__": [31, 47], "__reversed__": [31, 49], "revers": [31, 49], "__ror__": [31, 50], "__setitem__": [31, 51, 94, 100], "shallow": [31, 53, 65, 89, 91], "fromkei": [31, 54], "get": [31, 55, 78, 171], "pop": [31, 58], "rais": [31, 58, 59, 76, 77, 82, 84, 93], "keyerror": [31, 58, 59, 70], "popitem": [31, 59], "setdefault": [31, 60], "insert": [31, 60], "present": [31, 61, 78], "doe": [31, 61, 65, 68, 93], "lack": [31, 61], "case": [31, 61, 88, 93], "lifo": 59, "out": [59, 68, 88, 169], "independ": 65, "That": 65, "share": [65, 88], "origin": [65, 67, 88, 91], "deepcopi": [65, 89, 91], "reproduc": 65, "mai": [65, 93, 170], "handl": 65, "There": [65, 78], "four": 65, "peopl": 65, "might": 65, "want": [65, 88, 93], "well": [65, 66, 68, 75, 78], "entir": [65, 75, 78], "do": [65, 78, 88, 89, 91], "affect": 65, "refer": [65, 67, 89, 91], "those": [65, 67, 79, 88, 89, 91, 93], "save": 65, "time": [65, 78], "memori": 65, "could": 65, "caus": 65, "confus": 65, "you": [65, 78, 79, 88, 89, 90, 91, 92, 93, 169, 170], "exactli": 65, "what": [65, 88, 90, 92], "obtain": [65, 93], "style": 65, "__class__": [65, 88], "fresh": 65, "while": [65, 68], "result": 65, "enabl": 65, "inspir": 65, "version": [65, 67], "requir": [65, 93, 169], "deep": [65, 89, 91], "http": [65, 89, 91, 169, 170], "doc": [65, 89, 91], "org": [65, 89, 91], "html": [65, 89, 91], "actual": 65, "incid": [66, 67, 76], "lookup": [66, 68, 78], "report": [66, 68, 76, 78], "request": [66, 68, 78, 170], "integ": 66, "To": [67, 76, 78, 88, 93, 169, 171, 172], "full": 67, "its": [67, 88, 172], "own": [67, 88], "oper": [68, 78, 94, 97, 116, 117, 147, 151, 152, 153, 154, 170, 171, 172], "edgedataview": 68, "allow": [68, 78], "henc": 68, "red": 68, "yield": [68, 76, 93], "ddict": [68, 78], "don": [68, 78], "have": [68, 78, 89, 91, 93], "relev": [68, 78], "usual": 68, "quietli": 68, "ignor": [68, 76, 83, 85, 93], "edge_dict": 69, "warn": [69, 89, 91], "permit": 69, "But": 69, "safe": 69, "edge_ind": 70, "data_dictionari": 70, "syntax": 70, "give": 70, "readabl": 71, "simpler": [71, 78], "appear": 75, "technic": 75, "user": [75, 169], "membership": 76, "silent": [76, 83, 85], "networkxerror": [76, 77, 82, 84], "sequenc": [76, 172], "becom": [76, 78], "exhaust": 76, "even": 76, "after": 76, "process": 76, "routin": 76, "altern": 77, "nodedataview": 78, "interfac": 78, "nodedata": 78, "addit": 78, "just": [78, 88], "your": [78, 93, 170], "need": 78, "simpl": 78, "5pm": 78, "bar": 78, "Not": [78, 172], "avail": 78, "rest": 78, "assum": 78, "guarante": 78, "never": 78, "nedg": 79, "count": 79, "join": 79, "unpack": 82, "select": 82, "part": [82, 170], "Will": 83, "fail": 83, "attempt": [84, 89, 91], "onc": 88, "cannot": 88, "rule": 88, "reflect": 88, "inplac": 88, "reduct": 88, "sometim": 88, "NOT": 88, "most": 88, "look": 88, "sens": 88, "code": 88, "sg": 88, "largest_wcc": 88, "keydict": [88, 93], "replac": 89, "contrast": [89, 91], "transfer": [89, 91], "g2": 91, "final": 93, "treat": [93, 172], "similarli": [93, 172], "taken": 93, "unless": 93, "complete_graph": 93, "itertool": 93, "import": [93, 169], "power": 93, "20": [93, 172], "225": 93, "singleton": 93, "straightforward": 93, "slightli": 93, "tweak": 93, "dg": 93, "predecessor": 93, "pred": 93, "mdg": 93, "ekei": 93, "guid": 169, "intend": 169, "assist": 169, "abov": 169, "pypi": 169, "insal": 169, "git": 169, "clone": 169, "repositori": 169, "github": [169, 170], "com": [169, 170], "bestquark": [169, 170], "cd": 169, "txt": 169, "setup": 169, "verifi": 169, "wa": 169, "correctli": 169, "__version__": 169, "alpha": 170, "still": 170, "develop": 170, "expect": 170, "causal": 170, "correct": 170, "byproduct": [170, 172], "optim": 170, "qml": 170, "noisi": 170, "model": [170, 172], "improv": 170, "fix": 170, "bug": 170, "tensornetwork": 170, "would": 170, "project": 170, "pleas": 170, "feel": 170, "free": 170, "open": 170, "issu": 170, "pull": 170, "being": 170, "my": 170, "master": 170, "thesi": 170, "univers": [170, 172], "british": 170, "columbia": 170, "thank": 170, "supervisor": 170, "dr": 170, "dmytro": 170, "bondarenko": 170, "polina": 170, "feldmann": 170, "robert": 170, "raussendorf": 170, "find": 170, "research": 170, "consid": 170, "cite": 170, "bibtex": 170, "softwar": 170, "mantilla_mentpy_2023": 170, "titl": 170, "author": 170, "mantilla": 170, "lui": 170, "year": 170, "2023": 170, "url": 170, "aip": 170, "apa": 170, "retriev": 170, "mla": 170, "web": 170, "rangl": 171, "prod_": 171, "cz_": 171, "ij": 171, "rangle_i": 171, "rangle_j": 171, "gr": 171, "particular": 171, "stab": 171, "zxz": 171, "zzx": 171, "learn": 171, "how": 171, "comput": [171, 172], "tutori": [171, 173], "paradigm": 172, "perform": 172, "standard": 172, "main": 172, "explicitli": 172, "appli": 172, "rather": 172, "big": 172, "entangl": 172, "prepar": 172, "logic": 172, "gs": 172, "mbcirc": 172, "left": 172, "teleport": 172, "howev": 172, "earlier": 172, "outcom": 172, "character": 172, "accept": 172, "arrow": 172, "unspecifi": 172, "By": 172, "let": 172, "constructor": 172, "concaten": 172, "new_circ": 172, "18": 172, "19": 172, "21": 172, "pre": 172, "templat": 172, "22": 172, "23": 172, "24": 172, "grid_and_linear": 172, "25": 172, "under": 173}, "objects": {"": [[0, 0, 0, 1, "mentpy", ""]], "mentpy": [[1, 1, 1, "", "BaseSimulator", "Base class for simulators."], [10, 1, 1, "", "CirqSimulator", "Simulator for measuring patterns of MBQC circuits. .. note:: This is a placeholder for the Cirq simulator. It is not yet implemented."], [15, 1, 1, "", "GraphState", "A graph state class that inherits from networkx.Graph."], [94, 1, 1, "", "MBQCircuit", "The MBQCircuit class that deals with operations and manipulations of graph states"], [116, 5, 1, "", "Measurement", "alias of Ment"], [124, 1, 1, "", "NumpySimulatorDM", "A density matrix simulator that uses numpy to simulate the quantum circuit."], [140, 1, 1, "", "PatternSimulator", "Simulator for measuring patterns of MBQC circuits."], [147, 1, 1, "", "PauliOp", "Class for representing Pauli operators as matrices and strings."], [155, 1, 1, "", "PennylaneSimulator", "Simulator for measuring patterns of MBQC circuits."], [160, 1, 1, "", "QiskitSimulator", "Simulator for measuring patterns of MBQC circuits. .. note:: This is a placeholder for the Qiskit simulator. It is not yet implemented."], [165, 6, 1, "", "draw", "Draws mbqc circuit with flow."], [166, 6, 1, "", "hstack", "Horizontally stack a list of graph states into a larger graph state. This is, the input of the new MBQC circuit is the input of the first state, and the output is the output of the last state."], [0, 0, 0, 1, "mbqc", ""], [167, 6, 1, "", "merge", "Merge two MBQC circuits into a larger MBQC circuit. This is, the input and output of the new MBQC circuit will depend on the concat_indices."], [0, 0, 0, 1, "operators", ""], [0, 0, 0, 1, "optimizers", ""], [0, 0, 0, 1, "simulators", ""], [0, 0, 0, 1, "templates", ""], [0, 0, 0, 1, "utils", ""], [168, 6, 1, "", "vstack", "Vertically stack a list of graph states into a larger graph state. This is, the input of the new MBQC circuit is the input of the first state, and the output is the output of the last state."]], "mentpy.BaseSimulator": [[2, 2, 1, "", "__call__", "Call self as a function."], [3, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [4, 2, 1, "", "__repr__", "Return repr(self)."], [5, 3, 1, "", "input_state", "The input state of the simulator."], [6, 3, 1, "", "mbqcircuit", "The MBQC circuit used for the simulation."], [7, 2, 1, "", "measure", "Measures the state of the system."], [8, 2, 1, "", "reset", "Resets the simulator to the initial state."], [9, 2, 1, "", "run", "Measures the state of the system."]], "mentpy.BaseSimulator.measure": [[7, 4, 2, "p-angle", "angle", "The angle of measurement."]], "mentpy.BaseSimulator.run": [[9, 4, 2, "p-parameters", "parameters", "The parameters of the MBQC circuit (if any)."]], "mentpy.CirqSimulator": [[11, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [12, 2, 1, "", "measure", "Measures the state of the system."], [13, 2, 1, "", "reset", "Resets the simulator to the initial state."], [14, 2, 1, "", "run", "Measures the state of the system."]], "mentpy.CirqSimulator.measure": [[12, 4, 2, "p-angle", "angle", "The angle of measurement."]], "mentpy.GraphState": [[16, 2, 1, "", "__contains__", "Returns True if n is a node, False otherwise. Use: 'n in G'."], [17, 2, 1, "", "__eq__", "Return self==value."], [18, 2, 1, "", "__getitem__", "Returns a dict of neighbors of node n.  Use: 'G[n]'."], [19, 2, 1, "", "__init__", "Initialize a graph state. See networkx.Graph for more information."], [20, 2, 1, "", "__iter__", "Iterate over the nodes. Use: 'for n in G'."], [21, 2, 1, "", "__len__", "Returns the number of nodes in the graph. Use: 'len(G)'."], [22, 2, 1, "", "__repr__", "Return repr(self)."], [23, 2, 1, "", "__str__", "Returns a short summary of the graph."], [24, 2, 1, "", "add_edge", "Add an edge between u and v."], [25, 2, 1, "", "add_edges_from", "Add all the edges in ebunch_to_add."], [26, 2, 1, "", "add_node", "Add a single node node_for_adding and update node attributes."], [27, 2, 1, "", "add_nodes_from", "Add multiple nodes."], [28, 2, 1, "", "add_weighted_edges_from", "Add weighted edges in ebunch_to_add with specified weight attr"], [29, 3, 1, "", "adj", "Graph adjacency object holding the neighbors of each node."], [30, 2, 1, "", "adjacency", "Returns an iterator over (node, adjacency dict) tuples for all nodes."], [31, 5, 1, "", "adjlist_inner_dict_factory", "alias of dict"], [63, 2, 1, "", "clear", "Remove all nodes and edges from the graph."], [64, 2, 1, "", "clear_edges", "Remove all edges from the graph without altering nodes."], [65, 2, 1, "", "copy", "Returns a copy of the graph."], [66, 3, 1, "", "degree", "A DegreeView for the Graph as G.degree or G.degree()."], [67, 2, 1, "", "edge_subgraph", "Returns the subgraph induced by the specified edges."], [68, 3, 1, "", "edges", "An EdgeView of the Graph as G.edges or G.edges()."], [69, 2, 1, "", "get_edge_data", "Returns the attribute dictionary associated with edge (u, v)."], [70, 2, 1, "", "has_edge", "Returns True if the edge (u, v) is in the graph."], [71, 2, 1, "", "has_node", "Returns True if the graph contains the node n."], [72, 2, 1, "", "index_mapping", "Return a mapping of the nodes to their indices."], [73, 2, 1, "", "is_directed", "Returns True if graph is directed, False otherwise."], [74, 2, 1, "", "is_multigraph", "Returns True if graph is a multigraph, False otherwise."], [75, 3, 1, "", "name", "String identifier of the graph."], [76, 2, 1, "", "nbunch_iter", "Returns an iterator over nodes contained in nbunch that are also in the graph."], [77, 2, 1, "", "neighbors", "Returns an iterator over all neighbors of node n."], [78, 3, 1, "", "nodes", "A NodeView of the Graph as G.nodes or G.nodes()."], [79, 2, 1, "", "number_of_edges", "Returns the number of edges between two nodes."], [80, 2, 1, "", "number_of_nodes", "Returns the number of nodes in the graph."], [81, 2, 1, "", "order", "Returns the number of nodes in the graph."], [82, 2, 1, "", "remove_edge", "Remove the edge between u and v."], [83, 2, 1, "", "remove_edges_from", "Remove all edges specified in ebunch."], [84, 2, 1, "", "remove_node", "Remove node n."], [85, 2, 1, "", "remove_nodes_from", "Remove multiple nodes."], [86, 2, 1, "", "size", "Returns the number of edges or total of all edge weights."], [87, 2, 1, "", "stabilizers", "Generate the stabilizers of a graph state."], [88, 2, 1, "", "subgraph", "Returns a SubGraph view of the subgraph induced on nodes."], [89, 2, 1, "", "to_directed", "Returns a directed representation of the graph."], [90, 2, 1, "", "to_directed_class", "Returns the class to use for empty directed copies."], [91, 2, 1, "", "to_undirected", "Returns an undirected copy of the graph."], [92, 2, 1, "", "to_undirected_class", "Returns the class to use for empty undirected copies."], [93, 2, 1, "", "update", "Update the graph using nodes/edges/graphs as input."]], "mentpy.GraphState.__getitem__": [[18, 4, 2, "p-n", "n", "A node in the graph."]], "mentpy.GraphState.add_edge": [[24, 4, 2, "p-attr", "attr", "Edge data (or labels or objects) can be assigned using keyword arguments."], [24, 4, 2, "p-u_of_edge", "u_of_edge", "Nodes can be, for example, strings or numbers. Nodes must be hashable (and not None) Python objects."], [24, 4, 2, "p-v_of_edge", "v_of_edge", "Nodes can be, for example, strings or numbers. Nodes must be hashable (and not None) Python objects."]], "mentpy.GraphState.add_edges_from": [[25, 4, 2, "p-attr", "attr", "Edge data (or labels or objects) can be assigned using keyword arguments."], [25, 4, 2, "p-ebunch_to_add", "ebunch_to_add", "Each edge given in the container will be added to the graph. The edges must be given as 2-tuples (u, v) or 3-tuples (u, v, d) where d is a dictionary containing edge data."]], "mentpy.GraphState.add_node": [[26, 4, 2, "p-attr", "attr", "Set or change node attributes using key=value."], [26, 4, 2, "p-node_for_adding", "node_for_adding", "A node can be any hashable Python object except None."]], "mentpy.GraphState.add_nodes_from": [[27, 4, 2, "p-attr", "attr", "Update attributes for all nodes in nodes. Node attributes specified in nodes as a tuple take precedence over attributes specified via keyword arguments."], [27, 4, 2, "p-nodes_for_adding", "nodes_for_adding", "A container of nodes (list, dict, set, etc.). OR A container of (node, attribute dict) tuples. Node attributes are updated using the attribute dict."]], "mentpy.GraphState.add_weighted_edges_from": [[28, 4, 2, "p-attr", "attr", "Edge attributes to add/update for all edges."], [28, 4, 2, "p-ebunch_to_add", "ebunch_to_add", "Each edge given in the list or container will be added to the graph. The edges must be given as 3-tuples (u, v, w) where w is a number."], [28, 4, 2, "p-weight", "weight", "The attribute name for the edge weights to be added."]], "mentpy.GraphState.adjlist_inner_dict_factory": [[32, 2, 1, "", "__class_getitem__", "See PEP 585"], [33, 2, 1, "", "__contains__", "True if the dictionary has the specified key, else False."], [34, 2, 1, "", "__delitem__", "Delete self[key]."], [35, 2, 1, "", "__eq__", "Return self==value."], [36, 2, 1, "", "__ge__", "Return self>=value."], [37, 2, 1, "", "__getattribute__", "Return getattr(self, name)."], [38, 2, 1, "", "__getitem__", "x.__getitem__(y) <==> x[y]"], [39, 2, 1, "", "__gt__", "Return self>value."], [40, 2, 1, "", "__ior__", "Return self|=value."], [41, 2, 1, "", "__iter__", "Implement iter(self)."], [42, 2, 1, "", "__le__", "Return self<=value."], [43, 2, 1, "", "__len__", "Return len(self)."], [44, 2, 1, "", "__lt__", "Return self<value."], [45, 2, 1, "", "__ne__", "Return self!=value."], [46, 2, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [47, 2, 1, "", "__or__", "Return self|value."], [48, 2, 1, "", "__repr__", "Return repr(self)."], [49, 2, 1, "", "__reversed__", "Return a reverse iterator over the dict keys."], [50, 2, 1, "", "__ror__", "Return value|self."], [51, 2, 1, "", "__setitem__", "Set self[key] to value."], [52, 2, 1, "", "clear", ""], [53, 2, 1, "", "copy", ""], [54, 2, 1, "", "fromkeys", "Create a new dictionary with keys from iterable and values set to value."], [55, 2, 1, "", "get", "Return the value for key if key is in the dictionary, else default."], [56, 2, 1, "", "items", ""], [57, 2, 1, "", "keys", ""], [58, 2, 1, "", "pop", "If the key is not found, return the default if given; otherwise, raise a KeyError."], [59, 2, 1, "", "popitem", "Remove and return a (key, value) pair as a 2-tuple."], [60, 2, 1, "", "setdefault", "Insert key with a value of default if key is not in the dictionary."], [61, 2, 1, "", "update", "If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k] If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v In either case, this is followed by: for k in F:  D[k] = F[k]"], [62, 2, 1, "", "values", ""]], "mentpy.GraphState.copy": [[65, 4, 2, "p-as_view", "as_view", "If True, the returned graph-view provides a read-only view of the original graph without actually copying any data."]], "mentpy.GraphState.edge_subgraph": [[67, 4, 2, "p-edges", "edges", "An iterable of edges in this graph."]], "mentpy.GraphState.get_edge_data": [[69, 4, 2, "p-default", "default", "Value to return if the edge (u, v) is not found."], [69, 4, 2, "p-u", "u", ""], [69, 4, 2, "p-v", "v", ""]], "mentpy.GraphState.has_edge": [[70, 4, 2, "p-u", "u", "Nodes can be, for example, strings or numbers. Nodes must be hashable (and not None) Python objects."], [70, 4, 2, "p-v", "v", "Nodes can be, for example, strings or numbers. Nodes must be hashable (and not None) Python objects."]], "mentpy.GraphState.has_node": [[71, 4, 2, "p-n", "n", ""]], "mentpy.GraphState.nbunch_iter": [[76, 4, 2, "p-nbunch", "nbunch", "The view will only report edges incident to these nodes."]], "mentpy.GraphState.neighbors": [[77, 4, 2, "p-n", "n", "A node in the graph"]], "mentpy.GraphState.number_of_edges": [[79, 4, 2, "p-u", "u", "If u and v are specified, return the number of edges between u and v. Otherwise return the total number of all edges."], [79, 4, 2, "p-v", "v", "If u and v are specified, return the number of edges between u and v. Otherwise return the total number of all edges."]], "mentpy.GraphState.remove_edge": [[82, 4, 2, "p-u", "u", "Remove the edge between nodes u and v."], [82, 4, 2, "p-v", "v", "Remove the edge between nodes u and v."]], "mentpy.GraphState.remove_edges_from": [[83, 4, 2, "p-ebunch", "ebunch", "Each edge given in the list or container will be removed from the graph. The edges can be:"]], "mentpy.GraphState.remove_node": [[84, 4, 2, "p-n", "n", "A node in the graph"]], "mentpy.GraphState.remove_nodes_from": [[85, 4, 2, "p-nodes", "nodes", "A container of nodes (list, dict, set, etc.).  If a node in the container is not in the graph it is silently ignored."]], "mentpy.GraphState.size": [[86, 4, 2, "p-weight", "weight", "The edge attribute that holds the numerical value used as a weight. If None, then each edge has weight 1."]], "mentpy.GraphState.subgraph": [[88, 4, 2, "p-nodes", "nodes", "A container of nodes which will be iterated through once."]], "mentpy.GraphState.to_undirected": [[91, 4, 2, "p-as_view", "as_view", "If True return a view of the original undirected graph."]], "mentpy.GraphState.update": [[93, 4, 2, "p-edges", "edges", "The first parameter can be a graph or some edges. If it has attributes nodes and edges, then it is taken to be a Graph-like object and those attributes are used as collections of nodes and edges to be added to the graph. If the first parameter does not have those attributes, it is treated as a collection of edges and added to the graph. If the first argument is None, no edges are added."], [93, 4, 2, "p-nodes", "nodes", "The second parameter is treated as a collection of nodes to be added to the graph unless it is None. If edges is None and nodes is None an exception is raised. If the first parameter is a Graph, then nodes is ignored."]], "mentpy.MBQCircuit": [[95, 2, 1, "", "__delitem__", "Delete the measurement of the node with index key."], [96, 2, 1, "", "__getitem__", "Return the value of the measurement of the node with index key."], [97, 2, 1, "", "__init__", "Initializes a graph state"], [98, 2, 1, "", "__len__", "Return the number of nodes in the MBQCircuit"], [99, 2, 1, "", "__repr__", "Return the representation of the current MBQC circuit state"], [100, 2, 1, "", "__setitem__", "Set the value of the measurement of the node with index key."], [101, 2, 1, "", "add_edge", "Adds an edge between nodes u and v"], [102, 2, 1, "", "add_edges_from", "Adds edges from a list of tuples"], [103, 2, 1, "", "calculate_order", "Returns the order of the measurements"], [104, 3, 1, "", "depth", "Return the depth of the MBQC circuit."], [105, 3, 1, "", "flow", "Return the flow function of the MBQC circuit."], [106, 3, 1, "", "graph", "Return the graph of the resource state."], [107, 3, 1, "", "input_nodes", "Return the input nodes of the MBQC circuit."], [108, 3, 1, "", "inputc", "Returns I^c, the complement of input nodes."], [109, 3, 1, "", "measurement_order", "Return the measurement order of the MBQC circuit."], [110, 3, 1, "", "measurements", "Return the measurements of the MBQC circuit."], [111, 3, 1, "", "output_nodes", "Return the output nodes of the MBQC circuit."], [112, 3, 1, "", "outputc", "Returns O^c, the complement of output nodes."], [113, 3, 1, "", "partial_order", "Return the partial order function of the MBQC circuit."], [114, 3, 1, "", "planes", "Return the planes of the MBQC circuit."], [115, 3, 1, "", "trainable_nodes", "Return the trainable nodes of the MBQC circuit."]], "mentpy.Measurement": [[117, 2, 1, "", "__init__", "Measurement operator."], [118, 2, 1, "", "__repr__", "Return repr(self)."], [119, 3, 1, "", "angle", ""], [120, 2, 1, "", "is_trainable", "Returns True if the measurement is trainable."], [121, 2, 1, "", "matrix", "Returns the matrix representation of the measurement."], [122, 3, 1, "", "plane", ""], [123, 2, 1, "", "set_angle", ""]], "mentpy.NumpySimulatorDM": [[125, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [126, 2, 1, "", "arbitrary_qubit_gate", "Single qubit gate u acting on qubit i n is the number of qubits"], [127, 2, 1, "", "cnot_ij", "CNOT gate with j: target qubit n: number of qubits"], [128, 2, 1, "", "controlled_z", "Controlled z gate between qubits i and j. n is the total number of qubits"], [129, 2, 1, "", "current_number_simulated_nodes", "Returns the number of nodes that are currently simulated."], [130, 2, 1, "", "current_simulated_nodes", "Returns the nodes that are currently simulated."], [131, 2, 1, "", "get_proyectors", "Returns the proyectors for the measurement of qubit i with angle"], [132, 2, 1, "", "measure", "Measures the state of the system."], [133, 2, 1, "", "measure_angle", "Measures qubit i of state rho with an angle"], [134, 2, 1, "", "measure_ment", "Measures a ment"], [135, 2, 1, "", "partial_trace", "Partial trace of state rho over some indices"], [136, 2, 1, "", "pure2density", "Input: quantum state Output: corresponding density matrix"], [137, 2, 1, "", "reset", "Resets the simulator to the initial state."], [138, 2, 1, "", "run", "Measures the quantum state in the given pattern."], [139, 2, 1, "", "swap_ij", "Swaps qubit i with qubit j"]], "mentpy.NumpySimulatorDM.measure": [[132, 4, 2, "p-angle", "angle", "The angle of measurement."]], "mentpy.PatternSimulator": [[141, 2, 1, "", "__call__", "Call self as a function."], [142, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [143, 2, 1, "", "__repr__", "Return repr(self)."], [144, 2, 1, "", "measure", ""], [145, 2, 1, "", "reset", ""], [146, 2, 1, "", "run", ""]], "mentpy.PauliOp": [[148, 2, 1, "", "__getitem__", ""], [149, 2, 1, "", "__init__", "Initialize a PauliOp object."], [150, 2, 1, "", "__repr__", "Return repr(self)."], [151, 2, 1, "", "append", "Appends a Pauli operator to the end of another Pauli operator."], [152, 2, 1, "", "commutator", "Returns the commutator of two Pauli operators."], [153, 2, 1, "", "get_subset", "Returns a subset of the Pauli operator."], [154, 2, 1, "", "symplectic_prod", "Returns the symplectic product of two Pauli operators."]], "mentpy.PauliOp.get_subset": [[153, 4, 2, "p-indices", "indices", "The indices of the Pauli operators to be returned."]], "mentpy.PennylaneSimulator": [[156, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [157, 2, 1, "", "measure", "Measures the state of the system."], [158, 2, 1, "", "reset", "Resets the simulator to the initial state."], [159, 2, 1, "", "run", "Measures the state of the system."]], "mentpy.PennylaneSimulator.measure": [[157, 4, 2, "p-angle", "angle", "The angle of measurement."]], "mentpy.QiskitSimulator": [[161, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [162, 2, 1, "", "measure", "Measures the state of the system."], [163, 2, 1, "", "reset", "Resets the simulator to the initial state."], [164, 2, 1, "", "run", "Measures the state of the system."]], "mentpy.QiskitSimulator.measure": [[162, 4, 2, "p-angle", "angle", "The angle of measurement."]], "mentpy.mbqc": [[0, 1, 1, 0, "GraphState", "A graph state class that inherits from networkx.Graph."], [0, 1, 1, 0, "MBQCircuit", "The MBQCircuit class that deals with operations and manipulations of graph states"], [0, 6, 1, 0, "draw", "Draws mbqc circuit with flow."], [0, 6, 1, 0, "hstack", "Horizontally stack a list of graph states into a larger graph state. This is, the input of the new MBQC circuit is the input of the first state, and the output is the output of the last state."], [0, 6, 1, 0, "merge", "Merge two MBQC circuits into a larger MBQC circuit. This is, the input and output of the new MBQC circuit will depend on the concat_indices."], [0, 6, 1, 0, "vstack", "Vertically stack a list of graph states into a larger graph state. This is, the input of the new MBQC circuit is the input of the first state, and the output is the output of the last state."]], "mentpy.mbqc.GraphState": [[0, 2, 1, 0, "index_mapping", "Return a mapping of the nodes to their indices."], [0, 2, 1, 0, "stabilizers", "Generate the stabilizers of a graph state."]], "mentpy.mbqc.MBQCircuit.__init__": [[0, 4, 2, 0, "graph", "The graph state of the MBQC circuit."], [0, 4, 2, 0, "input_nodes", "The input nodes of the MBQC circuit."], [0, 4, 2, 0, "measurements", "The measurements of the MBQC circuit. The keys are the nodes and the values are the measurements."], [0, 4, 2, 0, "output_nodes", "The output nodes of the MBQC circuit."]], "mentpy.mbqc.MBQCircuit": [[0, 2, 1, 0, "add_edge", "Adds an edge between nodes u and v"], [0, 2, 1, 0, "add_edges_from", "Adds edges from a list of tuples"], [0, 2, 1, 0, "calculate_order", "Returns the order of the measurements"], [0, 3, 1, 0, "depth", "Return the depth of the MBQC circuit."], [0, 3, 1, 0, "flow", "Return the flow function of the MBQC circuit."], [0, 3, 1, 0, "graph", "Return the graph of the resource state."], [0, 3, 1, 0, "input_nodes", "Return the input nodes of the MBQC circuit."], [0, 3, 1, 0, "inputc", "Returns I^c, the complement of input nodes."], [0, 3, 1, 0, "measurement_order", "Return the measurement order of the MBQC circuit."], [0, 3, 1, 0, "measurements", "Return the measurements of the MBQC circuit."], [0, 3, 1, 0, "output_nodes", "Return the output nodes of the MBQC circuit."], [0, 3, 1, 0, "outputc", "Returns O^c, the complement of output nodes."], [0, 3, 1, 0, "partial_order", "Return the partial order function of the MBQC circuit."], [0, 3, 1, 0, "planes", "Return the planes of the MBQC circuit."], [0, 3, 1, 0, "trainable_nodes", "Return the trainable nodes of the MBQC circuit."]], "mentpy.operators": [[0, 5, 1, 0, "Measurement", "alias of Ment"], [0, 1, 1, 0, "Ment", "Measurement operator."], [0, 1, 1, 0, "PauliOp", "Class for representing Pauli operators as matrices and strings."]], "mentpy.operators.Ment.__init__": [[0, 4, 2, 0, "angle", "The angle of the measurement. Only used if plane is \"XY\", \"XZ\", or \"YZ\"."], [0, 4, 2, 0, "plane", "The plane of the measurement. Can be \"XY\", \"XZ\", \"YZ\", \"X\", \"Y\", \"Z\"."]], "mentpy.operators.Ment": [[0, 3, 1, 0, "angle", ""], [0, 2, 1, 0, "is_trainable", "Returns True if the measurement is trainable."], [0, 2, 1, 0, "matrix", "Returns the matrix representation of the measurement."], [0, 3, 1, 0, "plane", ""], [0, 2, 1, 0, "set_angle", ""]], "mentpy.operators.PauliOp.__init__": [[0, 4, 2, 0, "op", "The Pauli operator to be represented. Can be a matrix, a string, or a list of strings."]], "mentpy.operators.PauliOp": [[0, 2, 1, 0, "append", "Appends a Pauli operator to the end of another Pauli operator."], [0, 2, 1, 0, "commutator", "Returns the commutator of two Pauli operators."], [0, 2, 1, 0, "get_subset", "Returns a subset of the Pauli operator."], [0, 2, 1, 0, "symplectic_prod", "Returns the symplectic product of two Pauli operators."]], "mentpy.operators.PauliOp.get_subset": [[0, 4, 2, 0, "indices", "The indices of the Pauli operators to be returned."]], "mentpy.optimizers": [[0, 1, 1, 0, "AdamOptimizer", "Class for the Adam optimizer."], [0, 1, 1, 0, "SGDOptimizer", "Class for the SGD optimizer."]], "mentpy.optimizers.AdamOptimizer.__init__": [[0, 4, 2, 0, "b1", "The first moment decay rate, by default 0.9"], [0, 4, 2, 0, "b2", "The second moment decay rate, by default 0.999"], [0, 4, 2, 0, "eps", "A small number to avoid division by zero, by default 10**-8"], [0, 4, 2, 0, "step_size", "The step size of the optimizer, by default 0.1"]], "mentpy.optimizers.AdamOptimizer": [[0, 2, 1, 0, "optimize", "Optimize a function f using the Adam optimizer."], [0, 2, 1, 0, "optimize_and_gradient_norm", "Optimize a function f using the Adam optimizer."], [0, 2, 1, 0, "reset", "Reset the optimizer."], [0, 2, 1, 0, "update_step_size", "Update the step size of the optimizer."]], "mentpy.optimizers.SGDOptimizer.__init__": [[0, 4, 2, 0, "momentum", "The momentum of the optimizer, by default 0.9"], [0, 4, 2, 0, "nesterov", "Whether to use Nesterov momentum, by default False"], [0, 4, 2, 0, "step_size", "The step size of the optimizer, by default 0.1"]], "mentpy.optimizers.SGDOptimizer": [[0, 2, 1, 0, "optimize", "Optimize a function f using the SGD optimizer."], [0, 2, 1, 0, "optimize_and_gradient_norm", "Optimize a function f using the SGD optimizer."], [0, 2, 1, 0, "reset", ""], [0, 2, 1, 0, "update_step_size", "Update the step size of the optimizer."]], "mentpy.simulators": [[0, 1, 1, 0, "BaseSimulator", "Base class for simulators."], [0, 1, 1, 0, "CirqSimulator", "Simulator for measuring patterns of MBQC circuits. .. note:: This is a placeholder for the Cirq simulator. It is not yet implemented."], [0, 1, 1, 0, "MBQCircuit", "The MBQCircuit class that deals with operations and manipulations of graph states"], [0, 1, 1, 0, "Ment", "Measurement operator."], [0, 1, 1, 0, "NumpySimulatorDM", "A density matrix simulator that uses numpy to simulate the quantum circuit."], [0, 1, 1, 0, "PatternSimulator", "Simulator for measuring patterns of MBQC circuits."], [0, 1, 1, 0, "PennylaneSimulator", "Simulator for measuring patterns of MBQC circuits."], [0, 1, 1, 0, "QiskitSimulator", "Simulator for measuring patterns of MBQC circuits. .. note:: This is a placeholder for the Qiskit simulator. It is not yet implemented."]], "mentpy.simulators.BaseSimulator.__init__": [[0, 4, 2, 0, "input_state", "The input state of the simulator."], [0, 4, 2, 0, "mbqcircuit", "The MBQC circuit used for the simulation."]], "mentpy.simulators.BaseSimulator": [[0, 3, 1, 0, "input_state", "The input state of the simulator."], [0, 3, 1, 0, "mbqcircuit", "The MBQC circuit used for the simulation."], [0, 2, 1, 0, "measure", "Measures the state of the system."], [0, 2, 1, 0, "reset", "Resets the simulator to the initial state."], [0, 2, 1, 0, "run", "Measures the state of the system."]], "mentpy.simulators.BaseSimulator.measure": [[0, 4, 2, 0, "angle", "The angle of measurement."]], "mentpy.simulators.BaseSimulator.run": [[0, 4, 2, 0, "parameters", "The parameters of the MBQC circuit (if any)."]], "mentpy.simulators.CirqSimulator.__init__": [[0, 4, 2, 0, "input_state", "The input state of the simulator."], [0, 4, 2, 0, "mbqcircuit", "The MBQC circuit used for the simulation."]], "mentpy.simulators.CirqSimulator": [[0, 2, 1, 0, "measure", "Measures the state of the system."], [0, 2, 1, 0, "reset", "Resets the simulator to the initial state."], [0, 2, 1, 0, "run", "Measures the state of the system."]], "mentpy.simulators.CirqSimulator.measure": [[0, 4, 2, 0, "angle", "The angle of measurement."]], "mentpy.simulators.MBQCircuit.__init__": [[0, 4, 2, 0, "graph", "The graph state of the MBQC circuit."], [0, 4, 2, 0, "input_nodes", "The input nodes of the MBQC circuit."], [0, 4, 2, 0, "measurements", "The measurements of the MBQC circuit. The keys are the nodes and the values are the measurements."], [0, 4, 2, 0, "output_nodes", "The output nodes of the MBQC circuit."]], "mentpy.simulators.MBQCircuit": [[0, 2, 1, 0, "add_edge", "Adds an edge between nodes u and v"], [0, 2, 1, 0, "add_edges_from", "Adds edges from a list of tuples"], [0, 2, 1, 0, "calculate_order", "Returns the order of the measurements"], [0, 3, 1, 0, "depth", "Return the depth of the MBQC circuit."], [0, 3, 1, 0, "flow", "Return the flow function of the MBQC circuit."], [0, 3, 1, 0, "graph", "Return the graph of the resource state."], [0, 3, 1, 0, "input_nodes", "Return the input nodes of the MBQC circuit."], [0, 3, 1, 0, "inputc", "Returns I^c, the complement of input nodes."], [0, 3, 1, 0, "measurement_order", "Return the measurement order of the MBQC circuit."], [0, 3, 1, 0, "measurements", "Return the measurements of the MBQC circuit."], [0, 3, 1, 0, "output_nodes", "Return the output nodes of the MBQC circuit."], [0, 3, 1, 0, "outputc", "Returns O^c, the complement of output nodes."], [0, 3, 1, 0, "partial_order", "Return the partial order function of the MBQC circuit."], [0, 3, 1, 0, "planes", "Return the planes of the MBQC circuit."], [0, 3, 1, 0, "trainable_nodes", "Return the trainable nodes of the MBQC circuit."]], "mentpy.simulators.Ment.__init__": [[0, 4, 2, 0, "angle", "The angle of the measurement. Only used if plane is \"XY\", \"XZ\", or \"YZ\"."], [0, 4, 2, 0, "plane", "The plane of the measurement. Can be \"XY\", \"XZ\", \"YZ\", \"X\", \"Y\", \"Z\"."]], "mentpy.simulators.Ment": [[0, 3, 1, 0, "angle", ""], [0, 2, 1, 0, "is_trainable", "Returns True if the measurement is trainable."], [0, 2, 1, 0, "matrix", "Returns the matrix representation of the measurement."], [0, 3, 1, 0, "plane", ""], [0, 2, 1, 0, "set_angle", ""]], "mentpy.simulators.NumpySimulatorDM": [[0, 2, 1, 0, "arbitrary_qubit_gate", "Single qubit gate u acting on qubit i n is the number of qubits"], [0, 2, 1, 0, "cnot_ij", "CNOT gate with j: target qubit n: number of qubits"], [0, 2, 1, 0, "controlled_z", "Controlled z gate between qubits i and j. n is the total number of qubits"], [0, 2, 1, 0, "current_number_simulated_nodes", "Returns the number of nodes that are currently simulated."], [0, 2, 1, 0, "current_simulated_nodes", "Returns the nodes that are currently simulated."], [0, 2, 1, 0, "get_proyectors", "Returns the proyectors for the measurement of qubit i with angle"], [0, 2, 1, 0, "measure", "Measures the state of the system."], [0, 2, 1, 0, "measure_angle", "Measures qubit i of state rho with an angle"], [0, 2, 1, 0, "measure_ment", "Measures a ment"], [0, 2, 1, 0, "partial_trace", "Partial trace of state rho over some indices"], [0, 2, 1, 0, "pure2density", "Input: quantum state Output: corresponding density matrix"], [0, 2, 1, 0, "reset", "Resets the simulator to the initial state."], [0, 2, 1, 0, "run", "Measures the quantum state in the given pattern."], [0, 2, 1, 0, "swap_ij", "Swaps qubit i with qubit j"]], "mentpy.simulators.NumpySimulatorDM.measure": [[0, 4, 2, 0, "angle", "The angle of measurement."]], "mentpy.simulators.PatternSimulator.__init__": [[0, 4, 2, 0, "mbqcircuit", "The MBQC circuit used for the simulation."], [0, 4, 2, 0, "simulator", "The simulator to use. Currently only 'pennylane-default.qubit' is supported."]], "mentpy.simulators.PatternSimulator": [[0, 2, 1, 0, "measure", ""], [0, 2, 1, 0, "reset", ""], [0, 2, 1, 0, "run", ""]], "mentpy.simulators.PennylaneSimulator.__init__": [[0, 4, 2, 0, "input_state", "The input state of the simulator."], [0, 4, 2, 0, "mbqcircuit", "The MBQC circuit used for the simulation."]], "mentpy.simulators.PennylaneSimulator": [[0, 2, 1, 0, "measure", "Measures the state of the system."], [0, 2, 1, 0, "reset", "Resets the simulator to the initial state."], [0, 2, 1, 0, "run", "Measures the state of the system."]], "mentpy.simulators.PennylaneSimulator.measure": [[0, 4, 2, 0, "angle", "The angle of measurement."]], "mentpy.simulators.QiskitSimulator.__init__": [[0, 4, 2, 0, "input_state", "The input state of the simulator."], [0, 4, 2, 0, "mbqcircuit", "The MBQC circuit used for the simulation."]], "mentpy.simulators.QiskitSimulator": [[0, 2, 1, 0, "measure", "Measures the state of the system."], [0, 2, 1, 0, "reset", "Resets the simulator to the initial state."], [0, 2, 1, 0, "run", "Measures the state of the system."]], "mentpy.simulators.QiskitSimulator.measure": [[0, 4, 2, 0, "angle", "The angle of measurement."]], "mentpy.templates": [[0, 1, 1, 0, "GraphState", "A graph state class that inherits from networkx.Graph."], [0, 1, 1, 0, "MBQCircuit", "The MBQCircuit class that deals with operations and manipulations of graph states"], [0, 1, 1, 0, "Ment", "Measurement operator."], [0, 6, 1, 0, "grid_cluster", "Returns a grid cluster state of n x m qubits."], [0, 6, 1, 0, "hstack", "Horizontally stack a list of graph states into a larger graph state. This is, the input of the new MBQC circuit is the input of the first state, and the output is the output of the last state."], [0, 6, 1, 0, "linear_cluster", "Returns a linear cluster state of n qubits."], [0, 6, 1, 0, "many_wires", "Returns a graph state with many wires."], [0, 6, 1, 0, "merge", "Merge two MBQC circuits into a larger MBQC circuit. This is, the input and output of the new MBQC circuit will depend on the concat_indices."], [0, 6, 1, 0, "muta", "This is the Multiple Triangle Ansatz (MuTA) template."], [0, 6, 1, 0, "spturb", "This is the Symmetry Protected Topological Perturbator Ansatz (SPTurb) template."]], "mentpy.templates.GraphState": [[0, 2, 1, 0, "index_mapping", "Return a mapping of the nodes to their indices."], [0, 2, 1, 0, "stabilizers", "Generate the stabilizers of a graph state."]], "mentpy.templates.MBQCircuit.__init__": [[0, 4, 2, 0, "graph", "The graph state of the MBQC circuit."], [0, 4, 2, 0, "input_nodes", "The input nodes of the MBQC circuit."], [0, 4, 2, 0, "measurements", "The measurements of the MBQC circuit. The keys are the nodes and the values are the measurements."], [0, 4, 2, 0, "output_nodes", "The output nodes of the MBQC circuit."]], "mentpy.templates.MBQCircuit": [[0, 2, 1, 0, "add_edge", "Adds an edge between nodes u and v"], [0, 2, 1, 0, "add_edges_from", "Adds edges from a list of tuples"], [0, 2, 1, 0, "calculate_order", "Returns the order of the measurements"], [0, 3, 1, 0, "depth", "Return the depth of the MBQC circuit."], [0, 3, 1, 0, "flow", "Return the flow function of the MBQC circuit."], [0, 3, 1, 0, "graph", "Return the graph of the resource state."], [0, 3, 1, 0, "input_nodes", "Return the input nodes of the MBQC circuit."], [0, 3, 1, 0, "inputc", "Returns I^c, the complement of input nodes."], [0, 3, 1, 0, "measurement_order", "Return the measurement order of the MBQC circuit."], [0, 3, 1, 0, "measurements", "Return the measurements of the MBQC circuit."], [0, 3, 1, 0, "output_nodes", "Return the output nodes of the MBQC circuit."], [0, 3, 1, 0, "outputc", "Returns O^c, the complement of output nodes."], [0, 3, 1, 0, "partial_order", "Return the partial order function of the MBQC circuit."], [0, 3, 1, 0, "planes", "Return the planes of the MBQC circuit."], [0, 3, 1, 0, "trainable_nodes", "Return the trainable nodes of the MBQC circuit."]], "mentpy.templates.Ment.__init__": [[0, 4, 2, 0, "angle", "The angle of the measurement. Only used if plane is \"XY\", \"XZ\", or \"YZ\"."], [0, 4, 2, 0, "plane", "The plane of the measurement. Can be \"XY\", \"XZ\", \"YZ\", \"X\", \"Y\", \"Z\"."]], "mentpy.templates.Ment": [[0, 3, 1, 0, "angle", ""], [0, 2, 1, 0, "is_trainable", "Returns True if the measurement is trainable."], [0, 2, 1, 0, "matrix", "Returns the matrix representation of the measurement."], [0, 3, 1, 0, "plane", ""], [0, 2, 1, 0, "set_angle", ""]], "mentpy.templates.grid_cluster": [[0, 4, 2, 0, "m", "The number of columns in the cluster state."], [0, 4, 2, 0, "n", "The number of rows in the cluster state."]], "mentpy.templates.linear_cluster": [[0, 4, 2, 0, "n", "The number of qubits in the cluster state."]], "mentpy.templates.many_wires": [[0, 4, 2, 0, "n_wires", "A list of the number of qubits in each wire."]], "mentpy.templates.muta": [[0, 4, 2, 0, "n_layers", "The number of layers in the graph state."], [0, 4, 2, 0, "n_wires", "The number of wires in the graph state."]], "mentpy.templates.spturb": [[0, 4, 2, 0, "n_layers", "The number of layers in the graph state."], [0, 4, 2, 0, "n_qubits", "The number of qubits in the SPT state."], [0, 4, 2, 0, "periodic", "Whether to use periodic boundary conditions."]], "mentpy.utils": [[0, 1, 1, 0, "FlowSpace", "The flow space graph of a MBQCGraph."], [0, 5, 1, 0, "GF", "alias of GF2"], [0, 1, 1, 0, "MBQCircuit", "The MBQCircuit class that deals with operations and manipulations of graph states"], [0, 1, 1, 0, "PatternSimulator", "Simulator for measuring patterns of MBQC circuits."], [0, 1, 1, 0, "PauliOp", "Class for representing Pauli operators as matrices and strings."], [0, 6, 1, 0, "are_lc_equivalent", "Check if two EGraphs are LC equivalent, and return the Clifford operation if so. Implemented as in arXiv:quant-ph/0405023. :param graph1: the initial graph to check Clifford equivalence with. :param graph2: the graph to check Clifford equivalence against. :param clifford_form: a string describing the output form of local Clifford operation, if"], [0, 6, 1, 0, "brownian_circuit", "Returns a random unitary matrix close to the identity matrix"], [0, 6, 1, 0, "calculate_lie_algebra", "Calculates the Lie algebra of a given state"], [0, 6, 1, 0, "clifford_vec_to_global", "Convert a local Clifford gate on n qubits to a local Clifford gate on all n qubits. Take a vector corresponding to a local Clifford gate on n qubits, (a_1, a_2, ..., a_n, b_1, b_2, ..., b_n, c_1, c_2, ..., c_n, d_1, d_2, ..., d_n), and return a single 2n x 2n array representing a local Clifford acting on all n qubits, given as the block matrix:"], [0, 6, 1, 0, "clifford_vec_to_tensors", "Convert a local Clifford gate on n qubits to a list of n single-qubit Cliffords. Take a local Clifford operation on n qubits in the form (a_1, a_2, ..., a_n, b_1, b_2, ..., b_n, c_1, c_2, ..., c_n, d_1, d_2, ..., d_n), and return a list of single-qubit Clifford gates as a list of 2x2 arrays, where the array at index k corresponds to the Clifford acting on qubit k given as:"], [0, 1, 1, 0, "combinations", "Return successive r-length combinations of elements in the iterable."], [0, 6, 1, 0, "digraph_expressivity_of_flow_space", "Returns digraph given the expressivity of a FlowSpace object."], [0, 6, 1, 0, "draw_digraph_flow_space", "Draws the expressivity digraph of flow space"], [0, 6, 1, 0, "expressivity_with_histogram", "Returns the expressivity calculated using the Kullback-Leiber entropy"], [0, 6, 1, 0, "generate_haar_random_states", "Makes one Haar random state over n_qubits"], [0, 6, 1, 0, "haar_probability_density_of_fidelities", "Returns the probability density function of fidelities P_{Haar}(F) = (N-1)(1-F)^{N-2} where N = 2^{n} is the dimension of the Hilbert space."], [0, 6, 1, 0, "lc_cluster_flowspace", "Cluster flow graph in lc_equivalent graphs."], [0, 6, 1, 0, "lc_constraint_system", "Build the constraint for LC-equivalence of two adjacency matrices. Construct a binary system of equations that two adjacency matrices G and H must satisfy for equivalence through local complementations. :param G: n x n adjacency matrices. :type G: numpy.array :param H: n x n adjacency matrices. :type H: numpy.array"], [0, 6, 1, 0, "lie_algebra_completion", "Completes a given set of Pauli operators to a basis of the Lie algebra"], [0, 6, 1, 0, "nullspace_basis", "Return the nullspace basis of matrix M. Construct an array whose rows are binary basis vectors of the right nullspace of input matrix array. :param M: a binary matrix. :type M: numpy.array"], [0, 6, 1, 0, "randomUnitary_closetoid", "Returns a random unitary matrix close to the identity matrix"], [0, 6, 1, 0, "random_special_unitary", "Returns a random special unitary in n_qubits sampled from the Haar distribution."], [0, 6, 1, 0, "random_train_test_states_unitary", "Return random training and test data (input, target) for a given unitary gate unitary."], [0, 6, 1, 0, "random_train_test_states_unitary_noise", "Return random training data (input, target) for a given unitary gate unitary with brownian noise parametrized by noise_level."], [0, 6, 1, 0, "reduce_RREform_mod2", "Put a binary matrix into row reduced echelon form modulo 2, up to a maximum number of columns given by max_cols. :param M: the matrix to reduce. :type M: numpy.array :param max_cols: the maximum number of columns of the input array to reduce. :type max_cols: int"], [0, 6, 1, 0, "remove_repeated_ops", "Removes repeated Pauli operators from a set"], [0, 6, 1, 0, "sample_probability_density_of_fidelities", "Calculates samples of the probability of fidelities of the given graph state circuit"], [0, 6, 1, 0, "search_nullspace", "Search through sums of pairs of basis vectors of the nullspace and see if any satisfy the determinant constraints. If no solution is found, output None. If a solution is found, return a vector specifying the local Clifford in the form:"], [0, 6, 1, 0, "train_test_split", "Split the data into training and test sets."]], "mentpy.utils.FlowSpace": [[0, 2, 1, 0, "all_graphs_graph", "Returns a tuple with three graphs."], [0, 2, 1, 0, "generator_all_graphs", "Returns a generator that generates all possible graphs for n ordered nodes."]], "mentpy.utils.MBQCircuit.__init__": [[0, 4, 2, 0, "graph", "The graph state of the MBQC circuit."], [0, 4, 2, 0, "input_nodes", "The input nodes of the MBQC circuit."], [0, 4, 2, 0, "measurements", "The measurements of the MBQC circuit. The keys are the nodes and the values are the measurements."], [0, 4, 2, 0, "output_nodes", "The output nodes of the MBQC circuit."]], "mentpy.utils.MBQCircuit": [[0, 2, 1, 0, "add_edge", "Adds an edge between nodes u and v"], [0, 2, 1, 0, "add_edges_from", "Adds edges from a list of tuples"], [0, 2, 1, 0, "calculate_order", "Returns the order of the measurements"], [0, 3, 1, 0, "depth", "Return the depth of the MBQC circuit."], [0, 3, 1, 0, "flow", "Return the flow function of the MBQC circuit."], [0, 3, 1, 0, "graph", "Return the graph of the resource state."], [0, 3, 1, 0, "input_nodes", "Return the input nodes of the MBQC circuit."], [0, 3, 1, 0, "inputc", "Returns I^c, the complement of input nodes."], [0, 3, 1, 0, "measurement_order", "Return the measurement order of the MBQC circuit."], [0, 3, 1, 0, "measurements", "Return the measurements of the MBQC circuit."], [0, 3, 1, 0, "output_nodes", "Return the output nodes of the MBQC circuit."], [0, 3, 1, 0, "outputc", "Returns O^c, the complement of output nodes."], [0, 3, 1, 0, "partial_order", "Return the partial order function of the MBQC circuit."], [0, 3, 1, 0, "planes", "Return the planes of the MBQC circuit."], [0, 3, 1, 0, "trainable_nodes", "Return the trainable nodes of the MBQC circuit."]], "mentpy.utils.PatternSimulator.__init__": [[0, 4, 2, 0, "mbqcircuit", "The MBQC circuit used for the simulation."], [0, 4, 2, 0, "simulator", "The simulator to use. Currently only 'pennylane-default.qubit' is supported."]], "mentpy.utils.PatternSimulator": [[0, 2, 1, 0, "measure", ""], [0, 2, 1, 0, "reset", ""], [0, 2, 1, 0, "run", ""]], "mentpy.utils.PauliOp.__init__": [[0, 4, 2, 0, "op", "The Pauli operator to be represented. Can be a matrix, a string, or a list of strings."]], "mentpy.utils.PauliOp": [[0, 2, 1, 0, "append", "Appends a Pauli operator to the end of another Pauli operator."], [0, 2, 1, 0, "commutator", "Returns the commutator of two Pauli operators."], [0, 2, 1, 0, "get_subset", "Returns a subset of the Pauli operator."], [0, 2, 1, 0, "symplectic_prod", "Returns the symplectic product of two Pauli operators."]], "mentpy.utils.PauliOp.get_subset": [[0, 4, 2, 0, "indices", "The indices of the Pauli operators to be returned."]], "mentpy.utils.clifford_vec_to_global": [[0, 4, 2, 0, "vec", "a vector of size 4n specifying a local Clifford on n qubits."]], "mentpy.utils.clifford_vec_to_tensors": [[0, 4, 2, 0, "vec", "a vector of size 4n specifying a local Clifford gate on n qubits."]], "mentpy.utils.expressivity_with_histogram": [[0, 4, 2, 0, "graph_state_circuit", ""], [0, 4, 2, 0, "method", ""], [0, 4, 2, 0, "n_bins", ""], [0, 4, 2, 0, "n_samples", ""]], "mentpy.utils.random_train_test_states_unitary_noise": [[0, 4, 2, 0, "n_samples", "number of samples"], [0, 4, 2, 0, "noise_level", "noise level"], [0, 4, 2, 0, "noise_type", "type of noise. Either 'brownian' or 'bitflip'"], [0, 4, 2, 0, "test_size", "percentage of test data"], [0, 4, 2, 0, "unitary", "unitary gate"]], "mentpy.utils.search_nullspace": [[0, 4, 2, 0, "basis", "an array whose rows are basis vectors of the nullspace"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:parameter", "5": "py:attribute", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "function", "Python function"]}, "titleterms": {"mentpi": [0, 170], "oper": 0, "mbqcircuit": 0, "see": [0, 1, 10, 15, 21, 24, 25, 26, 27, 28, 65, 76, 79, 80, 81, 82, 83, 84, 85, 86, 91, 93, 94, 140, 155, 160], "also": [0, 1, 10, 15, 21, 24, 25, 26, 27, 28, 65, 76, 79, 80, 81, 82, 83, 84, 85, 86, 91, 93, 94, 140, 155, 160], "simul": 0, "note": [0, 1, 170, 173], "optim": 0, "templat": 0, "util": 0, "constructor": [1, 10, 15, 31, 94, 116, 124, 140, 147, 155, 160], "string": [1, 10, 15, 31, 94, 116, 124, 140, 147, 155, 160], "represent": [1, 10, 15, 31, 94, 116, 124, 140, 147, 155, 160], "special": [1, 10, 15, 31, 94, 124, 140, 147, 155, 160], "method": [1, 10, 15, 31, 94, 116, 124, 140, 147, 155, 160], "properti": [1, 10, 15, 94, 116, 124, 155, 160], "class": 15, "instal": 169, "us": 169, "pip": 169, "from": 169, "sourc": 169, "welcom": 170, "s": 170, "document": 170, "featur": 170, "roadmap": 170, "contribut": 170, "acknowledg": 170, "citat": 170, "an": [171, 172, 173], "introduct": [171, 172, 173], "graph": 171, "state": 171, "graphstat": 171, "stabil": 171, "mbqc": 172, "mb": 173, "qml": 173}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx": 56}, "docurls": ["api.html", "api/mentpy.BaseSimulator.html", "api/mentpy.BaseSimulator.__call__.html", "api/mentpy.BaseSimulator.__init__.html", "api/mentpy.BaseSimulator.__repr__.html", "api/mentpy.BaseSimulator.input_state.html", "api/mentpy.BaseSimulator.mbqcircuit.html", "api/mentpy.BaseSimulator.measure.html", "api/mentpy.BaseSimulator.reset.html", "api/mentpy.BaseSimulator.run.html", "api/mentpy.CirqSimulator.html", "api/mentpy.CirqSimulator.__init__.html", "api/mentpy.CirqSimulator.measure.html", "api/mentpy.CirqSimulator.reset.html", "api/mentpy.CirqSimulator.run.html", "api/mentpy.GraphState.html", "api/mentpy.GraphState.__contains__.html", "api/mentpy.GraphState.__eq__.html", "api/mentpy.GraphState.__getitem__.html", "api/mentpy.GraphState.__init__.html", "api/mentpy.GraphState.__iter__.html", "api/mentpy.GraphState.__len__.html", "api/mentpy.GraphState.__repr__.html", "api/mentpy.GraphState.__str__.html", "api/mentpy.GraphState.add_edge.html", "api/mentpy.GraphState.add_edges_from.html", "api/mentpy.GraphState.add_node.html", "api/mentpy.GraphState.add_nodes_from.html", "api/mentpy.GraphState.add_weighted_edges_from.html", "api/mentpy.GraphState.adj.html", "api/mentpy.GraphState.adjacency.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__class_getitem__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__contains__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__delitem__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__eq__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__ge__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__getattribute__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__getitem__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__gt__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__ior__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__iter__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__le__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__len__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__lt__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__ne__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__new__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__or__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__repr__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__reversed__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__ror__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__setitem__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.clear.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.copy.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.fromkeys.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.get.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.items.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.keys.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.pop.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.popitem.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.setdefault.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.update.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.values.html", "api/mentpy.GraphState.clear.html", "api/mentpy.GraphState.clear_edges.html", "api/mentpy.GraphState.copy.html", "api/mentpy.GraphState.degree.html", "api/mentpy.GraphState.edge_subgraph.html", "api/mentpy.GraphState.edges.html", "api/mentpy.GraphState.get_edge_data.html", "api/mentpy.GraphState.has_edge.html", "api/mentpy.GraphState.has_node.html", "api/mentpy.GraphState.index_mapping.html", "api/mentpy.GraphState.is_directed.html", "api/mentpy.GraphState.is_multigraph.html", "api/mentpy.GraphState.name.html", "api/mentpy.GraphState.nbunch_iter.html", "api/mentpy.GraphState.neighbors.html", "api/mentpy.GraphState.nodes.html", "api/mentpy.GraphState.number_of_edges.html", "api/mentpy.GraphState.number_of_nodes.html", "api/mentpy.GraphState.order.html", "api/mentpy.GraphState.remove_edge.html", "api/mentpy.GraphState.remove_edges_from.html", "api/mentpy.GraphState.remove_node.html", "api/mentpy.GraphState.remove_nodes_from.html", "api/mentpy.GraphState.size.html", "api/mentpy.GraphState.stabilizers.html", "api/mentpy.GraphState.subgraph.html", "api/mentpy.GraphState.to_directed.html", "api/mentpy.GraphState.to_directed_class.html", "api/mentpy.GraphState.to_undirected.html", "api/mentpy.GraphState.to_undirected_class.html", "api/mentpy.GraphState.update.html", "api/mentpy.MBQCircuit.html", "api/mentpy.MBQCircuit.__delitem__.html", "api/mentpy.MBQCircuit.__getitem__.html", "api/mentpy.MBQCircuit.__init__.html", "api/mentpy.MBQCircuit.__len__.html", "api/mentpy.MBQCircuit.__repr__.html", "api/mentpy.MBQCircuit.__setitem__.html", "api/mentpy.MBQCircuit.add_edge.html", "api/mentpy.MBQCircuit.add_edges_from.html", "api/mentpy.MBQCircuit.calculate_order.html", "api/mentpy.MBQCircuit.depth.html", "api/mentpy.MBQCircuit.flow.html", "api/mentpy.MBQCircuit.graph.html", "api/mentpy.MBQCircuit.input_nodes.html", "api/mentpy.MBQCircuit.inputc.html", "api/mentpy.MBQCircuit.measurement_order.html", "api/mentpy.MBQCircuit.measurements.html", "api/mentpy.MBQCircuit.output_nodes.html", "api/mentpy.MBQCircuit.outputc.html", "api/mentpy.MBQCircuit.partial_order.html", "api/mentpy.MBQCircuit.planes.html", "api/mentpy.MBQCircuit.trainable_nodes.html", "api/mentpy.Measurement.html", "api/mentpy.Measurement.__init__.html", "api/mentpy.Measurement.__repr__.html", "api/mentpy.Measurement.angle.html", "api/mentpy.Measurement.is_trainable.html", "api/mentpy.Measurement.matrix.html", "api/mentpy.Measurement.plane.html", "api/mentpy.Measurement.set_angle.html", "api/mentpy.NumpySimulatorDM.html", "api/mentpy.NumpySimulatorDM.__init__.html", "api/mentpy.NumpySimulatorDM.arbitrary_qubit_gate.html", "api/mentpy.NumpySimulatorDM.cnot_ij.html", "api/mentpy.NumpySimulatorDM.controlled_z.html", "api/mentpy.NumpySimulatorDM.current_number_simulated_nodes.html", "api/mentpy.NumpySimulatorDM.current_simulated_nodes.html", "api/mentpy.NumpySimulatorDM.get_proyectors.html", "api/mentpy.NumpySimulatorDM.measure.html", "api/mentpy.NumpySimulatorDM.measure_angle.html", "api/mentpy.NumpySimulatorDM.measure_ment.html", "api/mentpy.NumpySimulatorDM.partial_trace.html", "api/mentpy.NumpySimulatorDM.pure2density.html", "api/mentpy.NumpySimulatorDM.reset.html", "api/mentpy.NumpySimulatorDM.run.html", "api/mentpy.NumpySimulatorDM.swap_ij.html", "api/mentpy.PatternSimulator.html", "api/mentpy.PatternSimulator.__call__.html", "api/mentpy.PatternSimulator.__init__.html", "api/mentpy.PatternSimulator.__repr__.html", "api/mentpy.PatternSimulator.measure.html", "api/mentpy.PatternSimulator.reset.html", "api/mentpy.PatternSimulator.run.html", "api/mentpy.PauliOp.html", "api/mentpy.PauliOp.__getitem__.html", "api/mentpy.PauliOp.__init__.html", "api/mentpy.PauliOp.__repr__.html", "api/mentpy.PauliOp.append.html", "api/mentpy.PauliOp.commutator.html", "api/mentpy.PauliOp.get_subset.html", "api/mentpy.PauliOp.symplectic_prod.html", "api/mentpy.PennylaneSimulator.html", "api/mentpy.PennylaneSimulator.__init__.html", "api/mentpy.PennylaneSimulator.measure.html", "api/mentpy.PennylaneSimulator.reset.html", "api/mentpy.PennylaneSimulator.run.html", "api/mentpy.QiskitSimulator.html", "api/mentpy.QiskitSimulator.__init__.html", "api/mentpy.QiskitSimulator.measure.html", "api/mentpy.QiskitSimulator.reset.html", "api/mentpy.QiskitSimulator.run.html", "api/mentpy.draw.html", "api/mentpy.hstack.html", "api/mentpy.merge.html", "api/mentpy.vstack.html", "getting-started.html", "index.html", "tutorials/intro-to-graphstates.html", "tutorials/intro-to-mbqc.html", "tutorials/intro-to-mbqml.html"]})