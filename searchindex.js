Search.setIndex({"titles": ["Operators", "mentpy.BaseSimulator", "mentpy.BaseSimulator.__call__", "mentpy.BaseSimulator.__init__", "mentpy.BaseSimulator.__repr__", "mentpy.BaseSimulator.input_state", "mentpy.BaseSimulator.mbqcircuit", "mentpy.BaseSimulator.measure", "mentpy.BaseSimulator.outcomes", "mentpy.BaseSimulator.reset", "mentpy.BaseSimulator.run", "mentpy.ControlMent", "mentpy.ControlMent.__init__", "mentpy.ControlMent.__repr__", "mentpy.ControlMent.angle", "mentpy.ControlMent.condition", "mentpy.ControlMent.copy", "mentpy.ControlMent.get_povm", "mentpy.ControlMent.is_trainable", "mentpy.ControlMent.matrix", "mentpy.ControlMent.plane", "mentpy.GraphState", "mentpy.GraphState.__contains__", "mentpy.GraphState.__eq__", "mentpy.GraphState.__getitem__", "mentpy.GraphState.__init__", "mentpy.GraphState.__iter__", "mentpy.GraphState.__len__", "mentpy.GraphState.__repr__", "mentpy.GraphState.__str__", "mentpy.GraphState.add_edge", "mentpy.GraphState.add_edges_from", "mentpy.GraphState.add_node", "mentpy.GraphState.add_nodes_from", "mentpy.GraphState.add_weighted_edges_from", "mentpy.GraphState.adj", "mentpy.GraphState.adjacency", "mentpy.GraphState.adjlist_inner_dict_factory", "mentpy.GraphState.adjlist_inner_dict_factory.__class_getitem__", "mentpy.GraphState.adjlist_inner_dict_factory.__contains__", "mentpy.GraphState.adjlist_inner_dict_factory.__delitem__", "mentpy.GraphState.adjlist_inner_dict_factory.__eq__", "mentpy.GraphState.adjlist_inner_dict_factory.__ge__", "mentpy.GraphState.adjlist_inner_dict_factory.__getattribute__", "mentpy.GraphState.adjlist_inner_dict_factory.__getitem__", "mentpy.GraphState.adjlist_inner_dict_factory.__gt__", "mentpy.GraphState.adjlist_inner_dict_factory.__ior__", "mentpy.GraphState.adjlist_inner_dict_factory.__iter__", "mentpy.GraphState.adjlist_inner_dict_factory.__le__", "mentpy.GraphState.adjlist_inner_dict_factory.__len__", "mentpy.GraphState.adjlist_inner_dict_factory.__lt__", "mentpy.GraphState.adjlist_inner_dict_factory.__ne__", "mentpy.GraphState.adjlist_inner_dict_factory.__new__", "mentpy.GraphState.adjlist_inner_dict_factory.__or__", "mentpy.GraphState.adjlist_inner_dict_factory.__repr__", "mentpy.GraphState.adjlist_inner_dict_factory.__reversed__", "mentpy.GraphState.adjlist_inner_dict_factory.__ror__", "mentpy.GraphState.adjlist_inner_dict_factory.__setitem__", "mentpy.GraphState.adjlist_inner_dict_factory.clear", "mentpy.GraphState.adjlist_inner_dict_factory.copy", "mentpy.GraphState.adjlist_inner_dict_factory.fromkeys", "mentpy.GraphState.adjlist_inner_dict_factory.get", "mentpy.GraphState.adjlist_inner_dict_factory.items", "mentpy.GraphState.adjlist_inner_dict_factory.keys", "mentpy.GraphState.adjlist_inner_dict_factory.pop", "mentpy.GraphState.adjlist_inner_dict_factory.popitem", "mentpy.GraphState.adjlist_inner_dict_factory.setdefault", "mentpy.GraphState.adjlist_inner_dict_factory.update", "mentpy.GraphState.adjlist_inner_dict_factory.values", "mentpy.GraphState.clear", "mentpy.GraphState.clear_edges", "mentpy.GraphState.copy", "mentpy.GraphState.degree", "mentpy.GraphState.edge_subgraph", "mentpy.GraphState.edges", "mentpy.GraphState.get_edge_data", "mentpy.GraphState.has_edge", "mentpy.GraphState.has_node", "mentpy.GraphState.index_mapping", "mentpy.GraphState.is_directed", "mentpy.GraphState.is_multigraph", "mentpy.GraphState.name", "mentpy.GraphState.nbunch_iter", "mentpy.GraphState.neighbors", "mentpy.GraphState.nodes", "mentpy.GraphState.number_of_edges", "mentpy.GraphState.number_of_nodes", "mentpy.GraphState.order", "mentpy.GraphState.remove_edge", "mentpy.GraphState.remove_edges_from", "mentpy.GraphState.remove_node", "mentpy.GraphState.remove_nodes_from", "mentpy.GraphState.size", "mentpy.GraphState.stabilizers", "mentpy.GraphState.subgraph", "mentpy.GraphState.to_directed", "mentpy.GraphState.to_directed_class", "mentpy.GraphState.to_undirected", "mentpy.GraphState.to_undirected_class", "mentpy.GraphState.update", "mentpy.MBQCircuit", "mentpy.MBQCircuit.__delitem__", "mentpy.MBQCircuit.__getitem__", "mentpy.MBQCircuit.__init__", "mentpy.MBQCircuit.__len__", "mentpy.MBQCircuit.__repr__", "mentpy.MBQCircuit.__setitem__", "mentpy.MBQCircuit.add_edge", "mentpy.MBQCircuit.add_edges_from", "mentpy.MBQCircuit.calculate_order", "mentpy.MBQCircuit.classical_output_nodes", "mentpy.MBQCircuit.controlled_nodes", "mentpy.MBQCircuit.depth", "mentpy.MBQCircuit.flow", "mentpy.MBQCircuit.graph", "mentpy.MBQCircuit.input_nodes", "mentpy.MBQCircuit.inputc", "mentpy.MBQCircuit.measurement_order", "mentpy.MBQCircuit.measurements", "mentpy.MBQCircuit.ordered_layers", "mentpy.MBQCircuit.output_nodes", "mentpy.MBQCircuit.outputc", "mentpy.MBQCircuit.partial_order", "mentpy.MBQCircuit.quantum_output_nodes", "mentpy.MBQCircuit.trainable_nodes", "mentpy.Measurement", "mentpy.Measurement.__init__", "mentpy.Measurement.__repr__", "mentpy.Measurement.angle", "mentpy.Measurement.copy", "mentpy.Measurement.get_povm", "mentpy.Measurement.is_trainable", "mentpy.Measurement.matrix", "mentpy.Measurement.node_id", "mentpy.Measurement.outcome", "mentpy.Measurement.plane", "mentpy.Measurement.set_angle", "mentpy.MentOutcome", "mentpy.MentOutcome.__call__", "mentpy.MentOutcome.__eq__", "mentpy.MentOutcome.__ge__", "mentpy.MentOutcome.__gt__", "mentpy.MentOutcome.__init__", "mentpy.MentOutcome.__le__", "mentpy.MentOutcome.__lt__", "mentpy.MentOutcome.__ne__", "mentpy.MentOutcome.__or__", "mentpy.MentOutcome.__repr__", "mentpy.MentOutcome.cond_nodes", "mentpy.MentOutcome.node_id", "mentpy.NumpySimulatorDM", "mentpy.NumpySimulatorDM.__init__", "mentpy.NumpySimulatorDM.current_number_simulated_nodes", "mentpy.NumpySimulatorDM.current_simulated_nodes", "mentpy.NumpySimulatorDM.find_swaps", "mentpy.NumpySimulatorDM.future_neighbors_in_wire", "mentpy.NumpySimulatorDM.measure", "mentpy.NumpySimulatorDM.measure_ment", "mentpy.NumpySimulatorDM.neighbors_in_wire", "mentpy.NumpySimulatorDM.node_in_which_wire", "mentpy.NumpySimulatorDM.reorder_qubits", "mentpy.NumpySimulatorDM.reset", "mentpy.NumpySimulatorDM.run", "mentpy.NumpySimulatorSV", "mentpy.NumpySimulatorSV.__init__", "mentpy.NumpySimulatorSV.current_number_simulated_nodes", "mentpy.NumpySimulatorSV.current_simulated_nodes", "mentpy.NumpySimulatorSV.find_swaps", "mentpy.NumpySimulatorSV.future_neighbors_in_wire", "mentpy.NumpySimulatorSV.measure", "mentpy.NumpySimulatorSV.measure_ment", "mentpy.NumpySimulatorSV.neighbors_in_wire", "mentpy.NumpySimulatorSV.node_in_which_wire", "mentpy.NumpySimulatorSV.reorder_qubits", "mentpy.NumpySimulatorSV.reset", "mentpy.NumpySimulatorSV.run", "mentpy.PatternSimulator", "mentpy.PatternSimulator.__call__", "mentpy.PatternSimulator.__init__", "mentpy.PatternSimulator.__repr__", "mentpy.PatternSimulator.measure", "mentpy.PatternSimulator.reset", "mentpy.PatternSimulator.run", "mentpy.PauliOp", "mentpy.PauliOp.__eq__", "mentpy.PauliOp.__getitem__", "mentpy.PauliOp.__hash__", "mentpy.PauliOp.__init__", "mentpy.PauliOp.__mul__", "mentpy.PauliOp.__repr__", "mentpy.PauliOp.append", "mentpy.PauliOp.commutator", "mentpy.PauliOp.get_subset", "mentpy.PauliOp.number_of_qubits", "mentpy.PauliOp.symplectic_prod", "mentpy.PennylaneSimulator", "mentpy.PennylaneSimulator.__init__", "mentpy.PennylaneSimulator.measure", "mentpy.PennylaneSimulator.reset", "mentpy.PennylaneSimulator.run", "mentpy.draw", "mentpy.draw_with_wires", "mentpy.hstack", "mentpy.mbqc.templates.from_pauli", "mentpy.mbqc.templates.grid_cluster", "mentpy.mbqc.templates.linear_cluster", "mentpy.mbqc.templates.many_wires", "mentpy.mbqc.templates.muta", "mentpy.merge", "mentpy.utils.FlowSpace", "mentpy.utils.FlowSpace.__init__", "mentpy.utils.FlowSpace.__repr__", "mentpy.utils.are_lc_equivalent", "mentpy.utils.calculate_complete_gens_lie_algebra", "mentpy.utils.calculate_gens_lie_algebra", "mentpy.utils.calculate_lie_algebra", "mentpy.utils.calculate_possible_rotations", "mentpy.utils.digraph_expressivity_of_flow_space", "mentpy.utils.dim_so", "mentpy.utils.dim_sp", "mentpy.utils.dim_su", "mentpy.utils.draw_digraph_flow_space", "mentpy.utils.expressivity_with_histogram", "mentpy.utils.generate_haar_random_states", "mentpy.utils.generate_random_dataset", "mentpy.utils.generate_random_dataset_noisy", "mentpy.utils.lc_cluster_flowspace", "mentpy.utils.lie_algebra_completion", "mentpy.utils.sample_probability_density_of_fidelities", "mentpy.utils.train_test_split", "mentpy.vstack", "mentpy.optimizers.AdamOpt", "mentpy.optimizers.AdamOpt.__init__", "mentpy.optimizers.AdamOpt.optimize", "mentpy.optimizers.AdamOpt.optimize_and_gradient_norm", "mentpy.optimizers.AdamOpt.reset", "mentpy.optimizers.AdamOpt.step", "mentpy.optimizers.AdamOpt.update_step_size", "mentpy.optimizers.RCDOpt", "mentpy.optimizers.RCDOpt.__init__", "mentpy.optimizers.RCDOpt.optimize", "mentpy.optimizers.RCDOpt.optimize_and_gradient_norm", "mentpy.optimizers.RCDOpt.reset", "mentpy.optimizers.RCDOpt.step", "mentpy.optimizers.RCDOpt.update_step_size", "mentpy.optimizers.SGDOpt", "mentpy.optimizers.SGDOpt.__init__", "mentpy.optimizers.SGDOpt.optimize", "mentpy.optimizers.SGDOpt.optimize_and_gradient_norm", "mentpy.optimizers.SGDOpt.reset", "mentpy.optimizers.SGDOpt.step", "mentpy.optimizers.SGDOpt.update_step_size", "Graph States", "Creating MBQC Circuits", "Single qubit measurements", "Simulating MBQC Circuits", "Installation", "Welcome to MentPy\u2019s documentation", "Classifying classical data", "Fisher information classifier", "Discrete optimization for HEA", "Introduction to Measurement-based VQE", "An introduction to MB-QML", "Parallelizing MB-QML protocols", "Learning a quantum instrument"], "terms": {"class": [0, 1, 11, 96, 98, 100, 137, 150, 163, 176, 183, 195, 209, 221, 231, 238, 245, 252, 253, 254, 255, 260, 262], "mentpi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 259, 260, 262, 263, 264], "control": [0, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 74, 81, 100, 111, 201, 252, 264], "measur": [0, 1, 7, 10, 11, 12, 16, 17, 18, 19, 100, 101, 102, 103, 106, 109, 117, 118, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 150, 156, 157, 162, 163, 169, 170, 175, 176, 180, 195, 197, 199, 222, 253, 255, 257, 258, 260, 262, 264], "mentoutcom": [0, 11, 12, 125, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], "outcom": [0, 1, 8, 11, 125, 134, 137, 142, 150, 163, 195, 264], "pauliop": [0, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 203, 216, 227], "repres": [0, 183, 209, 252, 254], "pauli": [0, 183, 188, 190, 191, 192, 193, 194, 203, 213, 227, 254], "matric": [0, 183], "string": [0, 29, 30, 32, 34, 72, 74, 76, 81, 84, 92, 212, 254], "The": [0, 1, 5, 6, 7, 8, 10, 24, 27, 30, 31, 34, 35, 71, 72, 73, 74, 75, 76, 82, 84, 85, 86, 87, 89, 92, 94, 99, 100, 150, 156, 163, 169, 176, 183, 192, 195, 197, 199, 203, 204, 205, 206, 207, 209, 216, 231, 238, 245, 252, 253, 254, 256, 257, 258], "deal": [0, 100], "manipul": [0, 100, 257], "graph": [0, 21, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 103, 114, 201, 202, 203, 206, 207, 209, 210, 212, 222, 226, 228, 230, 257], "state": [0, 1, 5, 7, 9, 10, 21, 25, 93, 100, 103, 105, 114, 150, 156, 160, 161, 162, 163, 169, 173, 174, 175, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 212, 213, 214, 215, 216, 222, 223, 228, 230, 253, 254, 255, 257, 259, 260, 262, 263, 264], "hstack": [0, 202, 253], "horizont": [0, 202], "stack": [0, 202, 230], "list": [0, 1, 2, 10, 26, 31, 33, 34, 69, 70, 72, 73, 84, 89, 90, 91, 94, 95, 97, 99, 100, 103, 108, 110, 111, 115, 116, 117, 119, 120, 121, 123, 124, 150, 153, 155, 158, 162, 163, 166, 168, 171, 175, 176, 177, 182, 183, 187, 192, 195, 199, 202, 206, 209, 212, 230, 262, 264], "larger": [0, 202, 208, 230], "thi": [0, 1, 31, 32, 33, 34, 35, 37, 67, 69, 71, 72, 73, 74, 75, 76, 81, 82, 83, 85, 91, 95, 96, 97, 98, 99, 202, 207, 208, 230, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "i": [0, 11, 18, 21, 22, 24, 31, 32, 33, 34, 35, 37, 61, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 94, 95, 97, 99, 100, 116, 125, 131, 150, 157, 159, 163, 170, 172, 176, 202, 203, 207, 208, 230, 231, 236, 237, 238, 243, 244, 245, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "input": [0, 1, 5, 21, 99, 100, 115, 116, 150, 163, 195, 202, 208, 209, 224, 225, 229, 230, 253, 262], "new": [0, 31, 34, 37, 52, 60, 71, 202, 208, 230, 256, 260], "mbqc": [0, 1, 6, 10, 21, 100, 105, 110, 111, 112, 113, 115, 117, 118, 119, 120, 122, 123, 124, 150, 163, 176, 195, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 230, 252, 254, 257, 258, 259, 262], "circuit": [0, 1, 6, 10, 100, 105, 110, 111, 112, 113, 115, 117, 118, 119, 120, 122, 123, 124, 150, 163, 176, 195, 199, 200, 201, 202, 208, 209, 210, 215, 222, 228, 230, 252, 254, 257, 258, 262], "first": [0, 65, 88, 99, 202, 230, 231, 259, 260, 263], "output": [0, 100, 110, 120, 121, 123, 175, 202, 208, 209, 212, 230, 260, 262, 263, 264], "last": [0, 65, 202, 230], "merg": [0, 208, 253, 264], "state1": [0, 208, 258, 259], "state2": [0, 208, 258, 259], "two": [0, 21, 30, 76, 84, 85, 95, 99, 183, 188, 191, 194, 208, 212, 253, 262], "depend": [0, 208, 256], "concat_indic": [0, 208], "vstack": [0, 230, 253], "vertic": [0, 230], "from_pauli": [0, 203], "pauli_op": [0, 203], "return": [0, 1, 4, 11, 13, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 36, 37, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 61, 64, 65, 66, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 92, 94, 95, 96, 97, 98, 100, 102, 104, 105, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 137, 139, 140, 141, 143, 144, 145, 146, 147, 150, 152, 153, 158, 159, 163, 165, 166, 171, 172, 176, 179, 183, 184, 186, 188, 189, 191, 192, 193, 194, 195, 203, 204, 205, 206, 207, 209, 211, 212, 216, 217, 222, 224, 225, 253, 258, 259, 260, 262, 263, 264], "can": [0, 30, 31, 32, 33, 34, 71, 74, 76, 82, 84, 85, 89, 94, 99, 175, 183, 203, 252, 253, 254, 255, 256, 258, 260, 262, 263, 264], "implement": [0, 37, 47, 203, 212, 253, 258, 260], "u": [0, 21, 30, 31, 34, 74, 75, 76, 85, 88, 89, 95, 99, 100, 107, 203, 257, 262], "e": [0, 30, 31, 33, 34, 37, 67, 74, 75, 76, 88, 91, 99, 203, 252, 253, 255, 256], "theta": [0, 203, 253, 259, 260, 262, 263, 264], "p": [0, 203, 258, 260, 262, 263], "grid_clust": [0, 204, 215, 253, 255], "n": [0, 21, 22, 24, 26, 31, 33, 34, 35, 36, 77, 83, 84, 90, 91, 94, 204, 205, 212, 218, 219, 220, 252, 253, 258, 259, 260, 262], "m": [0, 204, 253, 256, 257, 258], "grid": [0, 204, 215, 253], "cluster": [0, 21, 93, 100, 204, 205, 215, 226, 253], "x": [0, 12, 37, 44, 204, 231, 236, 237, 238, 243, 244, 245, 250, 251, 253, 254, 258, 259, 260, 262, 263, 264], "qubit": [0, 21, 93, 100, 150, 160, 163, 173, 176, 183, 193, 204, 205, 206, 209, 212, 252, 253, 255, 258, 262], "linear_clust": [0, 205, 253, 264], "kwarg": [0, 1, 2, 7, 10, 11, 14, 17, 19, 20, 21, 25, 37, 52, 100, 108, 125, 130, 132, 137, 138, 150, 151, 163, 164, 175, 176, 177, 178, 180, 182, 195, 196, 199, 200, 201, 204, 205, 206, 207, 217, 221, 231, 233, 234, 236, 238, 240, 241, 242, 243, 245, 247, 248, 249, 250, 253, 264], "linear": [0, 205], "many_wir": [0, 206, 264], "n_wire": [0, 206, 207], "mani": [0, 30, 32, 206], "wire": [0, 150, 158, 159, 163, 171, 172, 206, 207, 264], "muta": [0, 207, 258, 260, 262, 263], "n_layer": [0, 207], "multipl": [0, 21, 33, 34, 72, 91, 99, 207], "triangl": [0, 207], "ansatz": [0, 207, 257, 264], "basesimul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 150, 163, 195], "abc": [0, 1], "base": [0, 1, 94, 96, 98, 231, 238, 245, 253, 254, 257, 258, 262], "numpysimulatordm": [0, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 255], "A": [0, 21, 24, 32, 33, 71, 72, 74, 83, 84, 90, 91, 94, 95, 97, 150, 163, 206, 231, 253, 257, 258], "densiti": [0, 150, 175], "matrix": [0, 11, 19, 125, 132, 150, 175, 183, 253, 254], "us": [0, 1, 6, 21, 22, 24, 26, 27, 30, 31, 32, 33, 34, 35, 71, 72, 73, 74, 76, 77, 82, 84, 91, 92, 94, 95, 96, 97, 98, 99, 150, 163, 175, 176, 195, 207, 222, 231, 233, 234, 238, 240, 241, 243, 245, 247, 248, 252, 253, 254, 255, 257, 258, 260, 262, 263, 264], "numpi": [0, 150, 163, 212, 255, 258, 259, 260, 262, 264], "quantum": [0, 150, 162, 163, 175, 252, 253, 254, 257, 258, 259, 261, 262], "numpysimulatorsv": [0, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175], "vector": [0, 163], "patternsimul": [0, 1, 176, 177, 178, 179, 180, 181, 182, 195, 255, 258, 260, 262, 263, 264], "pattern": [0, 150, 162, 163, 175, 176, 195, 260, 262, 264], "pennylanesimul": [0, 1, 176, 195, 196, 197, 198, 199], "adamopt": [0, 231, 232, 233, 234, 235, 236, 237, 245, 259, 262, 263, 264], "baseopt": [0, 231, 238, 245], "adam": [0, 231, 232, 233, 234, 259], "rcdopt": [0, 238, 239, 240, 241, 242, 243, 244, 259], "random": [0, 223, 224, 225, 229, 238, 239, 240, 241, 243, 255, 259, 260, 262, 263, 264], "coordin": [0, 238, 239, 240, 241, 243], "descent": [0, 238, 239, 240, 241, 243], "sgdopt": [0, 231, 245, 246, 247, 248, 249, 250, 251, 259], "sgd": [0, 245, 246, 247, 248, 250, 259], "flowspac": [0, 209, 210, 211, 217], "flow": [0, 100, 113, 200, 201, 203, 209, 210, 211, 221, 226, 253, 257], "space": [0, 209, 210, 211, 221, 258, 260], "calculate_complete_gens_lie_algebra": [0, 213], "calcul": [0, 93, 213, 214, 215, 216, 218, 219, 220, 222, 228, 253, 257, 258, 260, 262, 263, 264], "lie": [0, 213, 214, 215, 227, 253, 257], "algebra": [0, 213, 214, 215, 227, 253, 257], "given": [0, 31, 34, 37, 64, 89, 100, 150, 160, 162, 163, 173, 175, 213, 214, 215, 216, 217, 224, 225, 227, 228, 253, 262], "calculate_gens_lie_algebra": [0, 214], "gener": [0, 21, 92, 93, 214, 227, 256, 257, 259, 262, 264], "calculate_lie_algebra": [0, 215, 253], "calculate_possible_rot": [0, 216], "possibl": [0, 209, 216, 264], "rotat": [0, 203, 216, 254], "dim_so": [0, 218], "dimens": [0, 218, 219, 220], "mathfrak": [0, 218, 219, 220, 253], "so": [0, 35, 71, 212, 218], "dim_sp": [0, 219], "sp": [0, 219], "dim_su": [0, 220], "su": [0, 220], "generate_haar_random_st": [0, 223, 255, 259, 264], "n_qubit": [0, 209, 210, 223], "ndarrai": [0, 1, 3, 5, 10, 150, 151, 161, 162, 163, 164, 174, 175, 176, 178, 181, 182, 183, 187, 195, 196, 199, 223, 224, 225], "make": [0, 94, 223, 256], "one": [0, 1, 31, 32, 34, 71, 73, 82, 207, 209, 223, 260, 262, 264], "haar": [0, 223, 262], "over": [0, 21, 24, 26, 31, 33, 34, 35, 36, 37, 55, 74, 82, 83, 84, 91, 209, 223, 260, 262, 263], "generate_random_dataset": [0, 224, 262, 264], "unitari": [0, 224, 225, 262], "tupl": [0, 1, 10, 12, 21, 30, 31, 32, 33, 34, 36, 37, 65, 74, 75, 76, 84, 88, 89, 99, 100, 108, 126, 150, 156, 162, 163, 169, 175, 176, 182, 195, 199, 200, 201, 224, 225, 229], "train": [0, 224, 225, 229, 257, 258, 260, 262, 263, 264], "test": [0, 82, 224, 225, 229, 258, 259, 260, 262, 263, 264], "data": [0, 30, 31, 33, 34, 35, 71, 74, 75, 84, 88, 95, 97, 224, 225, 229, 257, 260, 262], "target": [0, 150, 154, 163, 167, 224, 225, 229, 258, 259, 260, 262, 263, 264], "gate": [0, 224, 225, 252, 253, 259, 260, 262, 263, 264], "generate_random_dataset_noisi": [0, 225, 263], "brownian": [0, 225, 263], "nois": [0, 225, 262, 263], "parametr": [0, 225, 253, 262], "noise_level": [0, 225, 263], "lie_algebra_complet": [0, 227], "complet": [0, 95, 97, 227, 264], "set": [0, 11, 32, 33, 35, 37, 57, 60, 62, 63, 74, 84, 91, 94, 99, 100, 106, 125, 136, 227, 229, 252, 253, 256, 258], "basi": [0, 227, 253], "train_test_split": [0, 229, 258, 259], "split": [0, 229, 258], "simul": [1, 5, 6, 8, 9, 150, 152, 153, 161, 163, 165, 166, 174, 176, 195, 198, 253, 257], "should": [1, 32, 99, 260], "directli": [1, 30, 82], "instead": [1, 71, 75], "subclass": [1, 95, 96, 97, 98], "paramet": [1, 7, 10, 24, 30, 31, 32, 33, 34, 71, 72, 73, 74, 75, 76, 77, 82, 83, 84, 85, 88, 89, 90, 91, 92, 94, 97, 99, 100, 156, 169, 175, 176, 183, 192, 195, 197, 199, 203, 204, 205, 206, 207, 209, 216, 217, 222, 225, 231, 238, 245, 253, 254, 262], "mbqcircuit": [1, 3, 6, 21, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 150, 151, 163, 164, 176, 178, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 214, 215, 216, 222, 228, 230, 253, 255, 262], "mp": [1, 21, 93, 100, 176, 183, 190, 192, 195, 203, 204, 205, 206, 207, 215, 231, 238, 245, 252, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264], "input_st": [1, 3, 5, 9, 150, 151, 161, 162, 163, 164, 174, 176, 178, 181, 195, 196, 198, 255, 259, 260, 262, 263, 264], "np": [1, 183, 195, 225, 254, 255, 258, 259, 260, 262, 263, 264], "cirqsimul": [1, 176, 195], "initi": [1, 3, 9, 21, 25, 100, 103, 137, 142, 150, 151, 161, 163, 164, 174, 176, 178, 183, 187, 195, 196, 198, 212, 231, 232, 238, 239, 245, 246, 254], "self": [1, 2, 3, 4, 11, 13, 21, 23, 28, 31, 34, 37, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 56, 57, 74, 82, 125, 127, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 163, 164, 176, 177, 178, 179, 183, 184, 186, 189, 195, 196, 260], "help": [1, 3, 37, 52, 137, 142, 150, 151, 163, 164, 176, 178, 195, 196], "type": [1, 3, 24, 26, 27, 29, 36, 37, 52, 71, 72, 73, 74, 75, 76, 82, 83, 84, 85, 86, 87, 92, 94, 95, 97, 137, 142, 150, 151, 163, 164, 176, 178, 195, 196, 203, 204, 205, 206, 207, 212, 216, 222, 225, 252], "accur": [1, 3, 37, 52, 137, 142, 150, 151, 163, 164, 176, 178, 195, 196], "signatur": [1, 3, 37, 52, 137, 142, 150, 151, 163, 164, 176, 178, 195, 196], "__repr__": [1, 4, 11, 13, 21, 28, 37, 54, 100, 105, 125, 127, 137, 147, 150, 163, 176, 179, 183, 189, 195, 209, 211], "str": [1, 4, 11, 12, 13, 29, 33, 100, 105, 126, 137, 147, 150, 163, 175, 176, 179, 183, 187, 195, 197, 209, 211, 217, 222, 225], "repr": [1, 4, 11, 13, 21, 28, 37, 54, 125, 127, 137, 147, 150, 163, 176, 179, 183, 189, 195], "__call__": [1, 2, 137, 138, 150, 163, 176, 177, 195], "angl": [1, 2, 7, 10, 11, 14, 17, 19, 125, 126, 128, 130, 132, 136, 150, 156, 157, 162, 163, 169, 170, 175, 176, 177, 180, 182, 195, 197, 199, 253, 254, 255, 257, 258, 259, 260, 262, 264], "float": [1, 2, 7, 10, 11, 12, 17, 19, 92, 125, 126, 130, 132, 150, 156, 162, 163, 169, 175, 176, 177, 180, 182, 195, 197, 199, 222, 224, 225, 229, 231, 238, 245], "call": [1, 2, 74, 84, 137, 138, 150, 163, 176, 177, 195, 255], "function": [1, 2, 100, 113, 122, 137, 138, 150, 163, 176, 177, 195, 231, 233, 234, 238, 240, 241, 245, 247, 248, 253, 256, 257, 258, 262, 263, 264], "abstract": [1, 7, 9, 10], "system": [1, 7, 10, 150, 156, 163, 169, 195, 197, 199, 253, 260, 264], "reset": [1, 9, 150, 161, 163, 174, 176, 181, 195, 198, 231, 235, 238, 242, 245, 249, 255, 258, 259, 260, 262, 263, 264], "none": [1, 3, 9, 11, 12, 17, 19, 21, 30, 32, 37, 58, 60, 61, 66, 67, 72, 74, 75, 76, 82, 84, 85, 92, 99, 103, 125, 126, 130, 132, 137, 142, 150, 151, 161, 162, 163, 164, 174, 176, 178, 181, 195, 198, 201, 231, 233, 234, 238, 240, 241, 245, 247, 248, 253, 254, 258, 259, 260], "run": [1, 10, 150, 162, 163, 175, 176, 182, 195, 199, 256, 260, 262, 263], "int": [1, 10, 12, 27, 72, 85, 86, 87, 92, 100, 103, 104, 110, 111, 112, 115, 117, 118, 119, 120, 123, 124, 126, 150, 152, 153, 155, 158, 159, 162, 163, 165, 166, 168, 171, 172, 175, 176, 182, 192, 195, 199, 204, 205, 207, 209, 215, 222, 223, 224, 225, 227], "dict": [1, 8, 21, 24, 33, 35, 36, 37, 55, 65, 67, 71, 74, 81, 84, 91, 95, 97, 99, 100, 103, 118, 150, 163, 195], "see": [3, 25, 37, 38, 52, 95, 137, 142, 150, 151, 163, 164, 178, 196, 252, 253, 256, 262, 263], "properti": [5, 6, 8, 15, 35, 72, 74, 81, 84, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 128, 133, 134, 135, 148, 149, 193], "ani": [10, 11, 29, 31, 32, 71, 73, 75, 82, 125, 133, 199, 253, 256], "oper": [11, 12, 19, 74, 84, 100, 125, 126, 183, 188, 190, 191, 192, 193, 194, 203, 212, 213, 227, 252, 254, 262], "condit": [11, 12, 15], "bool": [11, 12, 15, 71, 74, 76, 84, 97, 103, 137, 142, 204, 207, 210, 212, 238, 245], "arg": [11, 14, 17, 19, 20, 21, 25, 125, 130, 132, 137, 138, 178, 196, 238, 242, 245, 249, 259], "copi": [11, 16, 21, 37, 59, 71, 73, 94, 95, 96, 97, 98, 125, 129, 260, 263], "get_povm": [11, 17, 125, 130, 254], "povm": [11, 17, 125, 130, 254], "is_train": [11, 18, 125, 131], "true": [11, 18, 21, 22, 33, 37, 39, 71, 74, 76, 77, 79, 80, 84, 97, 103, 125, 131, 204, 226, 258, 259, 260, 262, 263, 264], "trainabl": [11, 18, 100, 124, 125, 131, 253, 254, 255], "plane": [11, 20, 125, 126, 135, 195, 197, 253, 254], "set_angl": [11, 125, 136], "node_id": [11, 125, 133, 137, 142, 149], "true_angl": 12, "true_plan": 12, "xy": [12, 103, 126, 195, 197, 253, 254], "false_angl": 12, "0": [12, 21, 24, 26, 29, 30, 31, 32, 33, 34, 36, 70, 72, 73, 74, 75, 76, 77, 83, 84, 85, 88, 90, 91, 92, 93, 94, 95, 97, 99, 100, 183, 192, 224, 225, 229, 231, 232, 237, 238, 239, 244, 245, 246, 251, 252, 253, 254, 256, 258, 259, 260, 262, 263, 264], "false_plan": 12, "represent": [17, 95, 105, 130, 132, 211], "graphstat": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103, 114, 200, 201, 253], "networkx": [21, 25, 30, 32, 71, 221], "inherit": 21, "from": [21, 30, 31, 33, 34, 37, 58, 60, 67, 69, 70, 74, 82, 84, 85, 88, 89, 91, 99, 100, 108, 183, 209, 221, 253, 257, 258, 260, 262, 263], "exampl": [21, 22, 24, 26, 27, 29, 30, 31, 32, 33, 34, 36, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 183, 190, 192, 203, 204, 205, 206, 207, 215, 231, 238, 245, 253, 262, 264], "creat": [21, 37, 52, 60, 71, 73, 84, 94, 95, 97, 100, 183, 203, 204, 205, 206, 207, 209, 210, 231, 238, 245, 252, 255, 257, 258, 260], "1d": [21, 93, 100, 205], "g": [21, 22, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 69, 70, 71, 72, 73, 74, 75, 76, 77, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 203, 204, 205, 206, 207, 252, 253, 258, 260, 262, 263, 264], "five": [21, 93, 100, 204, 205], "In": [21, 37, 67, 84, 93, 94, 100, 183, 190, 192, 203, 204, 205, 206, 207, 215, 231, 238, 245, 252, 253, 254, 255, 256, 258, 260, 262, 263, 264], "1": [21, 22, 24, 26, 30, 31, 32, 33, 34, 35, 36, 70, 72, 73, 74, 75, 76, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 97, 99, 100, 183, 190, 192, 203, 204, 205, 206, 207, 215, 223, 231, 232, 238, 239, 245, 246, 252, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264], "2": [21, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 65, 70, 72, 74, 76, 84, 88, 89, 90, 91, 92, 93, 94, 97, 99, 100, 183, 190, 192, 203, 204, 205, 206, 207, 215, 231, 238, 245, 252, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264], "add_edges_from": [21, 30, 31, 34, 71, 93, 94, 97, 99, 100, 108, 252, 253], "3": [21, 26, 29, 30, 31, 32, 33, 34, 35, 36, 70, 71, 73, 74, 76, 77, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 99, 100, 183, 190, 203, 204, 206, 207, 215, 221, 224, 225, 229, 252, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264], "4": [21, 22, 24, 26, 27, 31, 32, 33, 34, 36, 69, 70, 71, 72, 73, 75, 76, 83, 85, 88, 89, 91, 92, 93, 94, 99, 100, 183, 190, 206, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264], "print": [21, 93, 183, 190, 192, 215, 231, 238, 245, 252, 253, 254, 255, 258, 260, 263, 264], "5": [21, 30, 31, 34, 71, 73, 74, 99, 183, 205, 207, 252, 253, 254, 255, 258, 260, 262, 263, 264], "node": [21, 22, 24, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 87, 88, 90, 91, 94, 95, 97, 99, 100, 101, 102, 104, 106, 107, 110, 111, 115, 116, 120, 121, 123, 124, 150, 152, 153, 155, 158, 159, 163, 165, 166, 168, 171, 172, 201, 209, 252, 253, 255, 264], "edg": [21, 29, 30, 31, 34, 35, 69, 70, 71, 72, 73, 74, 75, 76, 82, 85, 88, 89, 90, 92, 94, 95, 97, 99, 100, 107, 108, 209, 252], "adjlist_inner_dict_factori": [21, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "alia": [21, 37, 125, 253], "adjlist_outer_dict_factori": 21, "edge_attr_dict_factori": 21, "graph_attr_dict_factori": 21, "node_attr_dict_factori": 21, "node_dict_factori": 21, "more": [21, 25, 71, 77, 92, 94, 95, 97, 257, 258], "inform": [21, 25, 29, 35, 71, 95, 97, 253], "__str__": [21, 29], "short": [21, 29], "summari": [21, 29], "__contains__": [21, 22, 37, 39], "fals": [21, 22, 37, 39, 71, 74, 76, 79, 80, 84, 95, 97, 100, 119, 150, 157, 163, 170, 204, 210, 229, 231, 233, 234, 238, 239, 240, 241, 245, 246, 247, 248, 259, 260, 264], "otherwis": [21, 22, 37, 64, 76, 79, 80, 84, 85, 92], "__eq__": [21, 23, 37, 41, 137, 139, 183, 184], "other": [21, 23, 71, 137, 139, 140, 141, 143, 144, 145, 146, 183, 184, 188, 190, 191, 194, 253], "valu": [21, 23, 30, 32, 35, 37, 41, 42, 45, 46, 48, 50, 51, 53, 56, 57, 60, 61, 64, 65, 66, 68, 72, 74, 75, 82, 84, 92, 100, 102, 106, 137, 139, 140, 141, 143, 144, 145, 146, 183, 184, 260, 262, 264], "__getitem__": [21, 24, 37, 44, 100, 102, 183, 185], "neighbor": [21, 24, 35, 36, 83, 150, 158, 163, 171], "__iter__": [21, 26, 37, 47, 82], "iter": [21, 24, 26, 30, 31, 33, 34, 35, 36, 37, 47, 55, 60, 67, 72, 73, 74, 82, 83, 84, 91, 94, 99, 260, 262, 263, 264], "__len__": [21, 27, 37, 49, 86, 87, 100, 104], "number": [21, 27, 29, 30, 32, 34, 72, 76, 85, 86, 87, 92, 100, 104, 150, 152, 163, 165, 183, 193, 204, 205, 206, 207, 209, 222, 225, 231, 252], "len": [21, 27, 37, 49, 253, 255, 259, 260, 262, 263, 264], "add_edg": [21, 30, 31, 34, 74, 83, 85, 92, 95, 97, 100, 107, 264], "u_of_edg": [21, 30], "v_of_edg": [21, 30], "attr": [21, 30, 31, 32, 33, 34], "add": [21, 30, 31, 32, 33, 34, 99, 100, 107, 108, 201, 257], "an": [21, 24, 26, 30, 31, 33, 34, 36, 37, 68, 71, 72, 73, 74, 75, 81, 82, 83, 84, 88, 89, 90, 91, 92, 94, 97, 99, 100, 107, 231, 238, 245, 253, 254, 255, 256, 257, 258, 263, 264], "between": [21, 30, 71, 85, 88, 89, 94, 100, 107, 209, 262, 263], "v": [21, 30, 31, 34, 37, 64, 67, 74, 75, 76, 85, 88, 89, 95, 99, 100, 107, 258], "ebunch_to_add": [21, 31, 34], "all": [21, 26, 30, 31, 33, 34, 36, 37, 58, 69, 70, 71, 72, 74, 82, 83, 84, 85, 89, 90, 92, 95, 97, 212, 253, 256], "add_nod": [21, 32, 33, 84], "node_for_ad": [21, 32], "singl": [21, 30, 31, 32, 34, 72, 74, 82, 89, 212, 253], "updat": [21, 30, 31, 32, 33, 34, 37, 67, 94, 99, 231, 237, 238, 244, 245, 251], "attribut": [21, 30, 31, 32, 33, 34, 69, 71, 72, 73, 74, 75, 81, 84, 88, 92, 94, 95, 97, 99], "add_nodes_from": [21, 32, 33, 71, 94, 99], "nodes_for_ad": [21, 33], "add_weighted_edges_from": [21, 31, 34], "weight": [21, 30, 31, 32, 33, 34, 72, 74, 75, 76, 83, 84, 88, 92, 99], "specifi": [21, 30, 31, 33, 34, 37, 39, 64, 73, 84, 85, 89, 99, 253, 255, 256], "adjac": [21, 24, 35, 36, 72, 90, 99], "clear": [21, 37, 58, 69, 260], "remov": [21, 37, 58, 64, 65, 69, 70, 88, 89, 90, 91, 94, 209], "clear_edg": [21, 70], "without": [21, 70, 71, 76, 201], "alter": [21, 70], "as_view": [21, 71, 95, 97], "edge_subgraph": [21, 73], "subgraph": [21, 73, 94], "induc": [21, 73, 94, 262], "get_edge_data": [21, 75], "default": [21, 30, 33, 34, 35, 37, 61, 64, 66, 71, 72, 74, 75, 82, 84, 85, 92, 97, 100, 176, 212, 231, 238, 245, 253, 254, 264], "dictionari": [21, 24, 30, 31, 32, 33, 34, 36, 37, 39, 60, 61, 66, 75, 84, 91], "associ": [21, 30, 31, 75], "has_edg": [21, 76], "has_nod": [21, 77], "contain": [21, 30, 31, 33, 34, 71, 72, 73, 74, 77, 82, 89, 91, 94, 99, 253, 257], "index_map": [21, 78], "map": [21, 72, 78, 253, 258, 263, 264], "indic": [21, 78, 183, 192, 260, 264], "is_direct": [21, 79], "direct": [21, 35, 36, 71, 74, 79, 85, 95, 96, 98], "is_multigraph": [21, 80, 94], "multigraph": [21, 22, 24, 26, 27, 30, 31, 32, 33, 34, 36, 69, 70, 71, 72, 74, 75, 76, 77, 80, 83, 86, 87, 89, 90, 91, 92, 94, 95, 97, 99], "nbunch_it": [21, 82], "nbunch": [21, 72, 74, 82], "ar": [21, 30, 31, 33, 34, 36, 65, 71, 72, 73, 74, 76, 82, 83, 84, 85, 91, 92, 94, 99, 100, 150, 152, 153, 163, 165, 166, 201, 212, 252, 253, 254, 256, 262], "number_of_edg": [21, 85, 92], "number_of_nod": [21, 27, 32, 86, 87], "order": [21, 27, 65, 86, 87, 100, 109, 117, 122, 150, 160, 163, 173], "remove_edg": [21, 88, 89], "remove_edges_from": [21, 88, 89], "ebunch": [21, 31, 89], "remove_nod": [21, 90, 91], "remove_nodes_from": [21, 90, 91, 94], "size": [21, 31, 32, 33, 34, 85, 91, 92, 203, 204, 205, 206, 207, 231, 237, 238, 244, 245, 251, 253, 262, 263, 264], "total": [21, 85, 92], "stabil": [21, 93], "view": [21, 37, 62, 63, 68, 71, 72, 73, 74, 82, 84, 94, 97, 260], "to_direct": [21, 71, 95, 96, 97, 98], "to_directed_class": [21, 96], "empti": [21, 65, 71, 74, 82, 96, 98], "to_undirect": [21, 97], "undirect": [21, 85, 97, 98], "to_undirected_class": [21, 98], "adj": [21, 24, 35, 83, 94, 99], "object": [21, 30, 31, 32, 33, 34, 35, 37, 52, 62, 63, 68, 71, 72, 74, 75, 76, 82, 91, 95, 97, 99, 183, 187, 217, 231, 238, 245, 253, 254, 255, 264], "hold": [21, 30, 35, 72, 92], "each": [21, 31, 34, 35, 72, 73, 84, 89, 92, 95, 206, 209, 253, 258], "degre": [21, 72], "degreeview": [21, 72], "edgeview": [21, 74], "name": [21, 29, 34, 37, 43, 69, 72, 81, 95, 258], "identifi": [21, 81, 262], "nodeview": [21, 84], "nx": [22, 24, 26, 27, 29, 30, 31, 32, 33, 34, 36, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 99], "path_graph": [22, 24, 26, 27, 29, 36, 69, 70, 71, 72, 73, 74, 75, 76, 77, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 99], "digraph": [22, 24, 26, 27, 30, 31, 32, 33, 34, 36, 69, 70, 71, 72, 75, 76, 77, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 99, 217, 221], "multidigraph": [22, 24, 26, 27, 30, 31, 32, 33, 34, 36, 69, 70, 71, 72, 75, 76, 77, 83, 86, 87, 89, 90, 91, 92, 94, 95, 99], "etc": [22, 24, 26, 27, 30, 31, 32, 33, 34, 36, 69, 70, 71, 72, 74, 75, 76, 77, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97], "adj_dict": 24, "connect": 24, "note": [24, 30, 31, 32, 33, 34, 71, 73, 74, 82, 83, 84, 89, 91, 94, 95, 97, 99, 209], "same": [24, 31, 33, 34, 73, 76, 91, 95, 150, 158, 163, 171, 253, 260], "similar": [24, 95, 97, 263], "which": [24, 74, 84, 94, 95, 97, 150, 159, 163, 172, 216, 222, 253, 254, 256, 260, 262, 263], "atlasview": [24, 83], "niter": [26, 82], "nnode": [27, 86, 87], "ident": [27, 75, 77, 83, 86, 87], "method": [27, 67, 71, 85, 86, 87, 95, 97, 99, 217, 222, 252, 254, 256], "info": [29, 35, 260], "includ": [29, 32, 35, 36, 84, 256], "foo": [29, 35, 74, 75, 84], "automat": [30, 257], "ad": [30, 31, 33, 34, 99, 209, 255, 256], "thei": [30, 71, 99, 212], "alreadi": [30, 95], "keyword": [30, 31, 32, 33, 34, 84, 92, 99, 207, 255], "access": [30, 74, 83, 264], "": [30, 31, 33, 34, 37, 62, 63, 68, 71, 91, 99, 253, 255, 256, 258, 259, 260, 262], "below": [30, 260], "must": [30, 31, 34, 76, 99], "hashabl": [30, 32, 76, 82], "python": [30, 32, 71, 75, 76, 95, 97, 221, 256, 257], "argument": [30, 31, 32, 33, 34, 84, 99, 207, 253, 255], "option": [30, 31, 32, 33, 34, 71, 72, 74, 84, 85, 92, 97, 231, 238, 245, 254, 260], "label": [30, 31, 253, 260, 262, 263, 264], "assign": [30, 31, 75], "collect": [30, 88, 99, 258, 264], "exist": [30, 31, 34, 74, 75, 212], "algorithm": [30, 260], "design": [30, 96, 98, 253], "numer": [30, 72, 92], "follow": [30, 37, 67, 76, 99, 256, 258, 262, 264], "explicit": 30, "form": [30, 75, 175, 212], "7": [30, 34, 75, 76, 83, 88, 99, 253, 254, 255, 258, 262, 263, 264], "capac": 30, "15": [30, 253, 255, 258, 260, 264], "length": [30, 212], "342": 30, "For": [30, 34, 35, 36, 71, 74, 85, 94, 253], "non": 30, "kei": [30, 32, 33, 35, 37, 39, 40, 55, 57, 60, 61, 63, 64, 65, 66, 67, 81, 94, 100, 101, 102, 106, 183, 185], "subscript": [30, 35], "notat": 30, "d": [31, 37, 58, 59, 62, 63, 64, 67, 68, 74, 94, 95, 97, 99, 253, 258], "where": [31, 34, 84, 89, 94, 252, 254, 262, 264], "conveni": 31, "wai": [31, 33, 34, 71, 83, 84, 253, 258], "twice": [31, 34], "ha": [31, 37, 39, 67, 71, 72, 84, 92, 99, 253], "effect": 31, "when": [31, 33, 34, 74, 82, 84, 91, 99, 201, 253, 258, 263], "duplic": [31, 34], "take": [31, 33, 99, 231, 236, 238, 243, 245, 250, 258], "preced": [31, 33], "via": [31, 33, 209], "you": [31, 33, 34, 71, 84, 85, 91, 94, 95, 96, 97, 98, 99, 253, 255, 256, 257, 258, 260, 262, 263], "chang": [31, 32, 33, 34, 71, 91, 94, 95, 97, 253, 256, 263], "runtimeerror": [31, 33, 34, 91], "rais": [31, 33, 34, 37, 64, 65, 82, 83, 88, 90, 91, 99], "messag": [31, 33, 34, 91], "dure": [31, 33, 34, 91, 257], "happen": [31, 33, 34, 91], "underli": [31, 33, 34, 91], "modifi": [31, 33, 34, 91], "To": [31, 33, 34, 73, 82, 84, 91, 94, 99, 252, 253, 255, 256, 262], "avoid": [31, 33, 34, 91, 231, 258], "error": [31, 33, 34, 91, 256], "evalu": [31, 33, 34, 91, 260], "separ": [31, 33, 34, 91], "iterator_of_edg": [31, 34], "pass": [31, 33, 34, 91, 260], "zip": [31, 260, 262, 263, 264], "rang": [31, 99, 259, 260, 262, 263, 264], "path": 31, "wn2898": 31, "grow": [31, 34], "wrong": [31, 33, 34], "correct": [31, 33, 34], "except": [32, 75, 76, 90, 99], "hello": [32, 33], "k3": [32, 33], "10": [32, 33, 99, 203, 221, 231, 253, 255, 258, 259, 262, 263, 264], "utm": 32, "13": [32, 253, 258, 264], "382871": 32, "3972649": 32, "On": 32, "platform": 32, "item": [32, 35, 37, 58, 62, 84, 94, 99], "mutabl": 32, "though": [32, 76], "care": 32, "hash": [32, 183, 186], "doesn": [32, 75], "t": [32, 74, 75, 84, 259, 260, 262], "OR": 33, "iterator_of_nod": [33, 91], "sort": 33, "h": [33, 71, 73, 94, 95, 97, 253, 258, 264], "l": [33, 257, 262], "o": [33, 100, 121, 259, 260], "specif": [33, 84, 212], "everi": 33, "attrdict": 33, "11": [33, 253, 258, 262, 264], "color": [33, 35, 74, 84, 99, 258, 260, 262, 263, 264], "blue": [33, 35, 258, 262, 263, 264], "w": 34, "simpli": [34, 94, 255], "store": [34, 264], "befor": [34, 256, 260], "read": [35, 71, 73], "onli": [35, 36, 71, 72, 73, 74, 82, 84, 85, 99, 176, 207, 209, 253], "like": [35, 37, 62, 63, 71, 74, 84, 94, 95, 97, 99, 257], "structur": [35, 71, 94, 95, 97, 99], "behav": 35, "idiom": 35, "nbr": [35, 94, 99], "datadict": [35, 99], "also": [35, 69, 74, 84, 253, 256, 260], "provid": [35, 37, 62, 63, 68, 71, 72, 74, 84, 92, 99, 253, 260, 262], "foovalu": 35, "work": [35, 91, 209, 260, 263], "outgo": [35, 36], "successor": 35, "adj_it": 36, "nbrdict": 36, "pep": [37, 38], "585": [37, 38], "els": [37, 39, 61, 66, 94, 259], "__delitem__": [37, 40, 100, 101], "delet": [37, 40, 100, 101], "__ge__": [37, 42, 137, 140], "__getattribute__": [37, 43], "getattr": [37, 43], "y": [37, 44, 253, 258, 259, 260], "__gt__": [37, 45, 137, 141], "__ior__": [37, 46], "__le__": [37, 48, 137, 143], "__lt__": [37, 50, 137, 144], "__ne__": [37, 51, 137, 145], "__or__": [37, 53, 137, 146], "__reversed__": [37, 55], "revers": [37, 55], "__ror__": [37, 56], "__setitem__": [37, 57, 100, 106], "shallow": [37, 59, 71, 95, 97], "fromkei": [37, 60], "get": [37, 61, 84, 252, 254, 260, 264], "pop": [37, 64], "correspond": [37, 64, 73, 209, 212], "If": [37, 64, 67, 71, 72, 74, 82, 83, 84, 85, 88, 90, 91, 92, 95, 96, 97, 98, 99, 204, 212, 253, 255, 256, 257, 262, 263], "found": [37, 64, 75], "keyerror": [37, 64, 65, 76], "popitem": [37, 65], "pair": [37, 65, 84], "setdefault": [37, 66], "insert": [37, 66], "f": [37, 67, 231, 233, 234, 236, 238, 240, 241, 243, 245, 247, 248, 250, 253, 260, 263, 264], "present": [37, 67, 84], "doe": [37, 67, 71, 74, 99, 255], "k": [37, 64, 67, 89, 258, 259, 260, 263], "lack": [37, 67], "either": [37, 67, 99, 225, 262, 263], "case": [37, 67, 94, 99, 260, 264], "lifo": 65, "out": [65, 74, 94, 203, 204, 205, 206, 207, 253, 254, 255, 256, 258, 260, 262, 263, 264], "independ": 71, "That": 71, "share": [71, 94], "origin": [71, 73, 94, 97], "deepcopi": [71, 95, 97], "reproduc": 71, "mai": [71, 99], "handl": [71, 256, 260], "differ": [71, 99, 253, 260], "There": [71, 84], "four": 71, "peopl": 71, "might": [71, 260, 263, 264], "want": [71, 94, 99, 253, 255], "well": [71, 72, 74, 81, 84], "entir": [71, 81, 84], "do": [71, 84, 94, 95, 97, 262, 263, 264], "affect": 71, "refer": [71, 73, 95, 97], "those": [71, 73, 85, 94, 95, 97, 99, 256], "save": [71, 263], "time": [71, 84, 260], "memori": 71, "could": 71, "caus": 71, "confus": 71, "level": [71, 225], "exactli": 71, "what": [71, 94, 96, 98], "obtain": [71, 99], "style": [71, 262, 263, 264], "__class__": [71, 94], "fresh": 71, "while": [71, 74], "result": [71, 259, 262], "enabl": 71, "inspir": [71, 258], "act": [71, 212], "version": [71, 73, 256, 257, 260, 263, 264], "requir": [71, 99, 256, 260], "modul": [71, 95, 97, 221, 253], "deep": [71, 95, 97, 253], "http": [71, 95, 97, 256, 257], "doc": [71, 95, 97, 256], "org": [71, 95, 97], "librari": [71, 95, 97, 256, 257], "html": [71, 95, 97, 256], "actual": [71, 255], "sum": [72, 92, 259, 260], "incid": [72, 73, 82], "lookup": [72, 74, 84], "report": [72, 74, 82, 84], "request": [72, 74, 84, 257], "integ": 72, "full": [73, 260], "its": [73, 94, 253, 256, 257], "own": [73, 94], "edgedataview": 74, "allow": [74, 84], "henc": 74, "c": [74, 92, 100, 116, 121, 253, 258, 260, 262, 264], "red": [74, 258], "through": [74, 94, 253], "yield": [74, 82, 99], "ddict": [74, 84], "don": [74, 84], "have": [74, 84, 95, 97, 99, 253, 255, 258, 262, 263, 264], "relev": [74, 84], "usual": [74, 264], "quietli": 74, "ignor": [74, 82, 89, 91, 99, 262], "edge_dict": 75, "warn": [75, 95, 97], "permit": 75, "But": 75, "safe": 75, "b": [75, 83, 92, 253, 260], "edge_ind": 76, "data_dictionari": 76, "syntax": 76, "equival": [76, 84, 212, 253], "give": 76, "It": [77, 84, 99, 253, 256, 258], "readabl": 77, "simpler": [77, 84], "appear": 81, "technic": 81, "user": [81, 256], "check": [82, 212, 256], "membership": 82, "silent": [82, 89, 91], "networkxerror": [82, 83, 88, 90], "sequenc": [82, 253], "becom": [82, 84], "exhaust": 82, "whether": [82, 207, 212, 238, 245], "even": 82, "after": 82, "process": [82, 256, 258, 262], "routin": 82, "possibli": [82, 94], "altern": 83, "nodedataview": 84, "interfac": 84, "nodedata": 84, "addit": [84, 256], "just": [84, 94], "your": [84, 99, 256, 257], "need": [84, 253, 255, 260, 262, 263], "express": [84, 217, 221, 222, 257], "simpl": [84, 258], "along": [84, 208, 253, 264], "5pm": 84, "bar": 84, "Not": [84, 253], "avail": 84, "some": [84, 99, 253, 262], "rest": 84, "assum": 84, "guarante": 84, "never": 84, "nedg": 85, "count": 85, "join": 85, "unpack": 88, "select": 88, "part": 88, "Will": 89, "fail": [89, 91], "attempt": [90, 95, 97], "nonexist": 90, "command": [91, 256], "sinc": 91, "6": [92, 183, 253, 254, 255, 258, 259, 262, 263, 264], "xziii": 93, "zxzii": 93, "izxzi": 93, "iizxz": 93, "iiizx": 93, "onc": 94, "cannot": 94, "rule": 94, "reflect": 94, "inplac": 94, "reduct": 94, "sometim": 94, "NOT": 94, "most": 94, "than": [94, 209], "look": [94, 256], "sens": 94, "code": [94, 257], "sg": 94, "largest_wcc": 94, "keydict": [94, 99], "replac": [95, 262], "contrast": [95, 97], "transfer": [95, 97], "g2": 97, "final": [99, 253, 258, 260, 262, 263, 264], "treat": [99, 253], "similarli": 99, "taken": 99, "second": [99, 231], "unless": 99, "complete_graph": 99, "itertool": [99, 260], "import": [99, 256, 258, 259, 260, 262, 263, 264], "combin": 99, "power": [99, 253, 258], "20": [99, 253, 258, 262, 263, 264], "225": 99, "1000": [99, 222, 227, 228], "singleton": 99, "straightforward": 99, "common": [99, 253], "slightli": 99, "tweak": 99, "dg": 99, "predecessor": 99, "pred": 99, "mdg": 99, "ekei": 99, "input_nod": [100, 103, 115, 209, 210, 253], "output_nod": [100, 103, 120, 209, 210, 253, 264], "default_measur": [100, 103, 253], "ment": [100, 103, 118, 125, 150, 157, 163, 170, 254, 255, 262, 263, 264], "current": [100, 105, 150, 152, 153, 163, 165, 166, 176, 255, 257], "index": [100, 101, 102, 106], "calculate_ord": [100, 109], "ordered_lay": [100, 119, 260], "train_indic": [100, 119, 260], "layer": [100, 119, 207, 260], "classical_output_nod": [100, 110], "controlled_nod": [100, 111], "depth": [100, 112], "resourc": [100, 114, 252, 253, 254, 257], "inputc": [100, 116], "complement": [100, 116, 121], "measurement_ord": [100, 117, 260], "outputc": [100, 121, 264], "partial_ord": [100, 122], "callabl": [100, 122, 137, 142], "partial": [100, 122], "quantum_output_nod": [100, 123, 264], "trainable_nod": [100, 124, 255, 260, 262, 263, 264], "\u03b8": [103, 253], "relabel_indic": 103, "cond_nod": [137, 142, 148], "current_number_simulated_nod": [150, 152, 163, 165], "current_simulated_nod": [150, 153, 163, 166], "find_swap": [150, 154, 163, 167], "sourc": [150, 154, 163, 167, 257], "future_neighbors_in_wir": [150, 155, 163, 168], "mode": [150, 156, 157, 162, 256, 260], "sampl": [150, 156, 157, 162, 222, 225, 228], "measure_": [150, 157, 163, 170], "force0": [150, 157, 163, 170], "neighbors_in_wir": [150, 158, 163, 171], "node_in_which_wir": [150, 159, 163, 172], "reorder_qubit": [150, 160, 163, 173], "current_ord": [150, 160, 163, 173], "target_ord": [150, 160, 163, 173], "reorder": [150, 160, 163, 173], "output_form": 175, "dm": [175, 255, 258, 260, 264], "sv": 175, "statevector": 175, "backend": [176, 178, 228, 255, 258, 260, 264], "pennylan": [176, 178, 228], "support": [176, 201, 253, 255, 257], "op": [183, 187, 192, 253], "union": 183, "arrai": [183, 212, 254, 258, 259, 260, 262, 263, 264], "xi": 183, "ix": 183, "iz": [183, 192], "zi": [183, 192], "xiz": [183, 190, 192], "zii": [183, 192], "iiz": [183, 192, 253], "izi": [183, 190, 192], "__hash__": [183, 186], "__mul__": [183, 188], "product": [183, 188, 194, 260], "append": [183, 190, 259, 260, 262, 263, 264], "end": [183, 190, 264], "anoth": [183, 190, 209], "commut": [183, 191], "get_subset": [183, 192], "subset": [183, 192], "symplectic_prod": [183, 194], "symplect": [183, 194], "number_of_qubit": [183, 193], "op1": 190, "op2": 190, "xzz": [190, 252], "xz": [192, 253], "ii": 192, "draw": [200, 201, 203, 204, 205, 206, 207, 221, 253, 258, 262, 263], "figur": [200, 201, 203, 204, 205, 206, 207, 253, 258, 262, 263, 264], "ax": [200, 201, 203, 204, 205, 206, 207, 253, 258, 262, 263, 264], "draw_with_wir": [201, 264], "fix_wir": [201, 264], "todo": 201, "gflow": 201, "improv": [201, 257], "fix": [201, 255, 256, 262], "templat": [203, 204, 205, 206, 207, 215, 255, 258, 260, 262, 263, 264], "around": 203, "xyi": 203, "p_op": 203, "correction_op": 203, "800x300": [203, 204, 205, 206, 253, 262, 263], "period": 204, "row": 204, "column": [204, 207, 258], "cylind": 204, "2d": [204, 258], "three": 206, "respect": 206, "one_column": [207, 258, 260, 262, 263], "figsiz": [207, 258, 264], "16": [207, 253, 258, 260, 262, 263, 264], "1600x500": 207, "util": [209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 253, 255, 259, 260, 262, 263, 264], "go": 209, "flow_spac": [209, 217], "less": 209, "8": [209, 231, 253, 255, 258, 260, 262, 263, 264], "allow_any_size_graph": 210, "are_lc_equival": 212, "graph1": 212, "graph2": 212, "clifford_form": 212, "tensor": 212, "egraph": 212, "lc": 212, "clifford": 212, "arxiv": [212, 253], "quant": 212, "ph": 212, "0405023": 212, "param": [212, 262, 263], "against": 212, "describ": 212, "local": [212, 256, 262], "produc": 212, "2x2": 212, "factor": [212, 231, 237, 238, 244, 245, 251], "global": [212, 260, 262, 264], "2nx2n": 212, "accord": [212, 259], "max_it": [215, 227, 260], "10000": [215, 222], "3x3": 215, "circ": 215, "lie_alg": 215, "ixz": [215, 253], "xzi": 215, "xzx": 215, "zxz": [215, 252], "zxi": 215, "izx": 215, "xyz": 215, "yyi": 215, "zyx": 215, "iii": 215, "achiev": 216, "digraph_expressivity_of_flow_spac": 217, "kl": [217, 222], "draw_digraph_flow_spac": 221, "digraph_expr": 221, "opt": [221, 231, 238, 245, 259, 260, 262, 263, 264], "hostedtoolcach": 221, "14": [221, 253, 258, 264], "x64": 221, "lib": 221, "python3": [221, 256], "site": 221, "packag": [221, 256, 257, 260, 263], "py": 221, "expressivity_with_histogram": 222, "graph_state_circuit": [222, 228], "n_sampl": [222, 223, 224, 225, 228, 258], "n_bin": 222, "kullback": 222, "leiber": 222, "entropi": 222, "we": [222, 252, 253, 254, 255, 258, 259, 260, 262, 263, 264], "estim": 222, "bin": 222, "histogram": 222, "leibler": 222, "diverg": 222, "re": [222, 256], "rel": 222, "test_siz": [224, 225, 229, 258, 259, 262, 263, 264], "noise_typ": [225, 263], "bitflip": [225, 263], "percentag": 225, "lc_cluster_flowspac": 226, "deg_graph": 226, "sanity_check": 226, "lc_equival": 226, "sample_probability_density_of_fidel": 228, "probabl": 228, "fidel": [228, 258, 260, 262, 263, 264], "optim": [231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 257, 259, 262, 263, 264], "step_siz": [231, 232, 238, 239, 245, 246, 259, 262, 263, 264], "step": [231, 236, 237, 238, 243, 244, 245, 250, 251, 259, 260, 262, 264], "b1": [231, 232], "moment": [231, 253], "decai": 231, "rate": 231, "9": [231, 232, 245, 253, 255, 256, 258, 262, 263, 264], "b2": [231, 232], "999": [231, 232], "ep": [231, 232, 260], "small": [231, 264], "divis": 231, "zero": [231, 255, 258, 259, 264], "0x7f71073c1960": 231, "1e": [231, 232], "08": [231, 232, 262, 263], "x0": [231, 233, 234, 238, 240, 241, 245, 247, 248], "num_it": [231, 233, 234, 238, 240, 241, 245, 247, 248, 260, 262, 263, 264], "100": [231, 233, 234, 238, 240, 241, 245, 247, 248, 262], "callback": [231, 233, 234, 238, 240, 241, 245, 247, 248, 260, 262, 264], "verbos": [231, 233, 234, 238, 240, 241, 245, 247, 248, 260], "optimize_and_gradient_norm": [231, 234, 238, 241, 245, 248], "update_step_s": [231, 237, 238, 244, 245, 251], "99": [231, 237, 238, 244, 245, 251, 260], "adapt": [238, 239, 259], "rcd": [238, 259], "0x7f710726ef50": 238, "momentum": [245, 246, 259], "nesterov": [245, 246], "0x7f71071529e0": 245, "measurement-based quantum comput": [252, 253, 254, 255, 260, 264], "quantum comput": [252, 253, 254, 255], "graph stat": 252, "defin": [252, 253, 258, 260, 262, 263, 264], "psi": 252, "rangl": [252, 258], "prod_": 252, "j": [252, 253, 254, 258], "cz_": 252, "ij": 252, "otim": [252, 262, 264], "z": [252, 253, 258, 264], "gr": 252, "particular": [252, 255, 264], "stab": 252, "zzx": 252, "learn": [252, 255, 257, 258, 259], "how": [252, 255, 256, 260, 262, 263], "comput": [252, 253, 254, 257, 258, 263], "tutori": [252, 255, 258, 259, 260, 261, 262, 263, 264], "paradigm": [253, 254], "perform": [253, 254, 259, 260], "univers": [253, 262], "standard": 253, "model": [253, 257, 258, 260, 262, 263], "main": 253, "explicitli": 253, "appli": [253, 258], "rather": 253, "big": 253, "entangl": [253, 254], "prepar": [253, 260], "logic": 253, "mbcirc": 253, "left": [253, 262, 264], "right": [253, 262, 264], "teleport": [253, 264], "posit": [253, 264], "character": 253, "yz": 253, "accept": 253, "determin": [253, 257], "At": 253, "12": [253, 258, 260, 264], "arrow": 253, "By": 253, "let": [253, 255, 258, 260], "constructor": 253, "concaten": [253, 259], "17": [253, 254, 258, 264], "new_circ": 253, "18": [253, 258, 262, 263, 264], "19": [253, 258, 264], "21": [253, 264], "22": [253, 264], "pre": [253, 264], "23": [253, 264], "24": [253, 264], "25": [253, 264], "grid_and_linear": 253, "26": [253, 264], "know": 253, "exponenti": 253, "mid": 253, "mathbb": [253, 264], "r": [253, 260, 262, 263, 264], "27": [253, 264], "28": [253, 264], "64": 253, "29": [253, 264], "iix": 253, "tool": [253, 257], "studi": [253, 258, 262], "qml": [253, 257, 258, 259, 260], "been": 253, "shown": 253, "relat": [253, 262], "phenomenon": 253, "barren": [253, 262], "plateau": [253, 262], "raussendorf": [253, 257], "briegel": 253, "2001": 253, "One": 253, "physic": 253, "review": [253, 256], "letter": 253, "86": 253, "5188": 253, "5191": 253, "fontana": 253, "herman": 253, "chakrabarti": 253, "kumar": 253, "yalovetzki": 253, "heredg": 253, "sureshbabu": 253, "pistoia": 253, "2023": [253, 257, 262], "adjoint": 253, "ans\u00e4tz": 253, "preprint": 253, "2309": 253, "07902": 253, "ragon": 253, "bakalov": 253, "sauvag": 253, "kemper": 253, "ortiz": 253, "marrero": 253, "larocca": 253, "cerezo": 253, "unifi": 253, "theori": 253, "09342": 253, "larg": 254, "known": 254, "m1": 254, "m2": 254, "pi": [254, 259, 260, 262, 263, 264], "000000e": 254, "00": 254, "123234e": 254, "element": 254, "p0": 254, "p1": 254, "01": [254, 260], "061617e": 254, "5j": 254, "basic": 254, "build": [254, 256], "block": 254, "previou": [255, 258, 263], "now": [255, 256, 258, 259, 260, 262, 264], "experi": 255, "try": 255, "real": [255, 259], "hardwar": 255, "featur": [255, 256, 258], "futur": [255, 260, 263, 264], "num_angl": 255, "output_st": 255, "rand": [255, 259, 260, 262, 263, 264], "shape": [255, 258], "random_st": [255, 258], "guid": 256, "intend": 256, "assist": 256, "abov": 256, "pypi": 256, "git": 256, "clone": 256, "repositori": 256, "ensur": 256, "necessari": 256, "pyproject": 256, "toml": 256, "github": [256, 257], "com": [256, 257], "cd": 256, "verifi": 256, "__version__": 256, "who": 256, "wish": 256, "contribut": 256, "up": [256, 263], "environ": 256, "involv": 256, "document": 256, "dev": 256, "edit": 256, "under": [256, 257, 258, 259, 260, 261, 263, 264], "submit": 256, "suit": 256, "everyth": 256, "correctli": 256, "pytest": 256, "bug": 256, "good": [256, 258], "idea": [256, 258], "cover": 256, "addition": 256, "push": 256, "_build": 256, "open": [256, 257], "web": [256, 257], "browser": 256, "contributor": 256, "encourag": 256, "guidelin": 256, "enhanc": [256, 258], "alpha": [257, 258, 260, 262, 264], "activ": [257, 260, 263, 264], "develop": [257, 260, 263, 264], "machin": [257, 258, 262], "framework": 257, "causal": 257, "analyz": 257, "noisi": 257, "increas": 257, "coverag": 257, "autodiff": 257, "integr": 257, "pyzx": 257, "would": 257, "project": 257, "pleas": 257, "feel": 257, "free": 257, "issu": [257, 258, 262], "pull": 257, "lui": [257, 258, 259, 260, 262], "thank": 257, "hi": 257, "sc": 257, "supervisor": 257, "dr": 257, "dmytro": [257, 259], "bondarenko": [257, 259], "polina": [257, 259], "feldmann": [257, 259], "robert": 257, "guidanc": 257, "find": [257, 258, 260, 264], "research": 257, "consid": 257, "cite": 257, "bibtex": 257, "softwar": 257, "mantilla_mentpy_2023": 257, "titl": [257, 260, 262, 264], "author": [257, 258, 259, 260, 262], "mantilla": [257, 258, 259, 260, 262], "calder\u00f3n": [257, 262], "year": 257, "url": 257, "aip": 257, "apa": 257, "retriev": 257, "mla": 257, "mb-qml": [258, 259, 262], "measurement-based quantum machine learn": [258, 259, 262], "construct": [258, 259, 261], "notabl": 258, "task": 258, "about": 258, "few": 258, "ll": 258, "focu": 258, "mb": [258, 260], "classif": [258, 259], "core": 258, "embed": 258, "x_i": 258, "mapsto": 258, "phi": 258, "dataset": [258, 259, 262], "formul": 258, "kernel": 258, "x_j": 258, "braket": 258, "sever": 258, "encod": 258, "begin": 258, "matplotlib": [258, 260, 262], "pyplot": [258, 260, 262], "plt": [258, 260, 262, 263, 264], "sklearn": 258, "model_select": 258, "panda": 258, "pd": 258, "blob": 258, "make_blob": 258, "200": [258, 260, 263], "center": 258, "42": [258, 264], "cluster_std": 258, "blobs_df": 258, "datafram": 258, "feature1": 258, "feature2": 258, "drop": 258, "axi": [258, 260, 262, 263, 264], "x_train": [258, 259, 260, 262, 263, 264], "x_test": [258, 259, 260, 262, 263, 264], "y_train": [258, 259, 260, 262, 263, 264], "y_test": [258, 259, 260, 262, 263, 264], "fig": [258, 262, 263, 264], "subplot": [258, 262, 263, 264], "set_facecolor": 258, "white": [258, 262], "scatter": 258, "cmap": [258, 260], "coolwarm": 258, "pathcollect": 258, "0x7f70b98c52a0": 258, "practic": 258, "normal": 258, "preprocess": 258, "minmaxscal": 258, "scaler": 258, "feature_rang": 258, "x_scaler": 258, "fit": 258, "transform": 258, "nan_to_num": 258, "mention": 258, "window_s": [258, 260, 264], "def": [258, 259, 260, 262, 263, 264], "quantum_kernel": 258, "enumer": [258, 260, 263], "angles1": 258, "co": [258, 259], "angles2": 258, "svm": 258, "metric": 258, "accuracy_scor": 258, "clf": 258, "svc": 258, "y_pred": 258, "predict": [258, 260, 262, 263, 264], "accuraci": 258, "decis": 258, "boundari": 258, "visual": [258, 260], "listedcolormap": 258, "x_train_np": 258, "y_train_np": 258, "x_min": 258, "x_max": 258, "min": 258, "max": [258, 260], "y_min": 258, "y_max": 258, "xx": 258, "yy": 258, "meshgrid": 258, "arang": [258, 263], "05": [258, 260, 263], "c_": 258, "ravel": 258, "reshap": 258, "contour": 258, "contourf": 258, "edgecolor": 258, "colorbar": 258, "show": [258, 260, 262, 264], "havl\u00ed\u010dek": 258, "c\u00f3rcole": 258, "temm": 258, "et": 258, "al": 258, "supervis": 258, "natur": 258, "567": 258, "209": 258, "212": 258, "2019": 258, "schuld": 258, "killoran": 258, "hilbert": 258, "phy": 258, "rev": 258, "lett": 258, "122": 258, "040504": 258, "abba": 258, "sutter": 258, "zoufal": 258, "neural": 258, "network": 258, "nat": 258, "sci": 258, "403": 258, "409": 258, "2021": 258, "suzuki": 258, "yano": 258, "gao": 258, "q": 258, "analysi": 258, "synthesi": 258, "mach": 258, "intel": 258, "2020": 258, "here": [259, 262], "pickl": 259, "uuid": 259, "datetim": 259, "argpars": 259, "log": 259, "hh": 259, "kron": [259, 260, 262, 264], "hgate": [259, 264], "two_deg_poli": 259, "coeff": 259, "extended_x": 259, "get_prob": 259, "st": [259, 260, 262, 263], "pattern_simul": 259, "qdensiti": 259, "ab": 259, "fisher_predict": 259, "polycoeff": 259, "p00": 259, "p11": 259, "prob_predict": 259, "polydeg": 259, "generate_data": 259, "n_state": 259, "create_st": 259, "tensor_00": 259, "tensor_01": 259, "tensor_10": 259, "tensor_11": 259, "phase": 259, "dtype": 259, "complex": 259, "sin": 259, "linalg": [259, 260], "norm": 259, "half_n": 259, "basis0_1": 259, "basis1_1": 259, "sqrt": [259, 263], "states_1": 259, "basis0_2": 259, "basis1_2": 259, "states_2": 259, "get_targets_or_fish": 259, "hamilt": 259, "return_fish": 259, "idealfish": 259, "conj": [259, 260, 264], "get_target": 259, "lambda": [259, 260, 262, 263, 264], "get_fish": 259, "get_optim": 259, "opt_nam": 259, "get_stochastic_batch": 259, "batch_siz": 259, "idx": 259, "randint": 259, "parallel_run": 259, "worker_id": 259, "seed": [259, 260], "gen_stat": 259, "num_data": 259, "data_dist": 259, "2dfamili": 259, "hamiltonian": 259, "ey": [259, 260, 262, 264], "cost_train": [259, 260, 262, 264], "cost_test": [259, 260, 262, 264], "num_step": [259, 262, 263], "batch_x": 259, "batch_i": 259, "stochast": 259, "50": [259, 264], "cost": [259, 260, 262, 263, 264], "asymmetr": 259, "regular": 259, "parallel_run_wrapp": 259, "quantum machine learn": [260, 261, 262, 264], "break": [260, 263, 264], "explor": 260, "our": [260, 262, 263], "gymnasium": 260, "stable_baselines3": 260, "instal": [260, 262, 263], "pip": [260, 262, 263], "upgrad": [260, 262, 263], "scipi": 260, "sqrtm": 260, "mygat": 260, "ising_xx": [260, 262, 263], "tgate": 260, "random_train_test_states_unitari": 260, "30": [260, 264], "avg_fidel": [260, 262, 263, 264], "sty": [260, 262, 263, 264], "outer": [260, 264], "statesx": [260, 262, 263, 264], "statek": [260, 263, 264], "statesi": [260, 262, 263, 264], "custom": 260, "gym": 260, "interact": 260, "reinforc": 260, "agent": 260, "dqn": 260, "her": 260, "goal_selection_strategi": 260, "goalselectionstrategi": 260, "model_class": 260, "sac": 260, "ddpg": 260, "td3": 260, "quantumgymenviron": 260, "env": 260, "__init__": 260, "300": 260, "threshold": 260, "eval": 260, "super": 260, "iter_to_nod": 260, "best_solut": 260, "num_nod": 260, "total_it": 260, "action_spac": 260, "low_bound": 260, "high_bound": 260, "observation_spac": 260, "box": 260, "low": 260, "high": 260, "cost_cal": 260, "action": 260, "training_progress": 260, "curr_ind": 260, "done": 260, "loss_valu": 260, "reward": 260, "outputs_test": 260, "loss_value_test": 260, "fidelity_test": 260, "fid_test": 260, "observ": 260, "_get_ob": 260, "_get_info": 260, "choic": 260, "render": 260, "human": 260, "close": [260, 264], "train_model": 260, "mlppolici": 260, "total_timestep": 260, "progress": 260, "line": [260, 262, 263], "mline": 260, "mcolor": 260, "plot_progress": 260, "linestyl": [260, 262, 263, 264], "marker": 260, "markeveri": 260, "train_lin": 260, "line2d": 260, "markers": 260, "test_lin": 260, "worst_case_lin": 260, "worst": 260, "axvlin": 260, "xlabel": [260, 264], "fontsiz": [260, 262, 263], "ylabel": [260, 264], "ylim": 260, "legend": [260, 262, 263, 264], "tick_param": [260, 262, 263], "both": [260, 262, 263], "major": [260, 262, 263], "labels": [260, 262, 263], "savefig": [260, 263, 264], "dqn_optim": 260, "png": [260, 263, 264], "dpi": [260, 263, 264], "500": [260, 263], "bbox_inch": 260, "tight": 260, "num_run": [260, 262, 263], "all_training_progress": 260, "frac": 260, "sum_i": 260, "rho_": 260, "sigma_i": [260, 262], "decreas": 260, "greedylayeroptim": 260, "discrete_angl": 260, "1000000": 260, "max_lay": 260, "n_step": 260, "new_angl": 260, "new_cost": 260, "layer_opt": 260, "reach": 260, "merged_lay": 260, "best_cost": 260, "best_angl": 260, "angle_combin": 260, "repeat": 260, "curr_cost": 260, "best": 260, "runs_train": [260, 262, 263, 264], "runs_test": [260, 262, 263, 264], "steps_run": 260, "max_cost_cal": 260, "thetas_op": 260, "global_cost_cal": 260, "my_callback": 260, "create_callback": [260, 264], "linearsegmentedcolormap": 260, "from_list": 260, "viridi": 260, "get_cmap": 260, "num_color": 260, "linspac": 260, "greedy_layer_optimizer_al": 260, "detail": 260, "greedy_layer_optim": 260, "demonstr": 260, "measurement-based vq": 261, "variational quantum eigensolv": 261, "mb-vqe": 261, "field": 262, "solv": 262, "problem": [262, 264], "scratch": 262, "loss": [262, 263, 264], "averag": 262, "infidel": [262, 263], "pure2dens": [262, 263], "prediction_single_st": [262, 263], "Be": 262, "awar": 262, "rho_i": 262, "_i": 262, "dagger": 262, "gate2learn": [262, 263], "random_su": 262, "isingxx": [262, 263], "\u03c0": 262, "post_cost": [262, 264], "seaborn": [262, 263], "comment": [262, 263], "sn": 262, "set_styl": 262, "runs_train_arrai": [262, 264], "runs_test_arrai": [262, 264], "train_mean": [262, 264], "mean": [262, 263, 264], "train_std": [262, 264], "std": [262, 263, 264], "test_mean": [262, 264], "test_std": [262, 264], "train_low": [262, 264], "maximum": [262, 264], "train_upp": [262, 264], "test_low": [262, 264], "test_upp": [262, 264], "fill_between": [262, 264], "green": [262, 263, 264], "set_xlabel": [262, 263], "set_ylabel": [262, 263], "set_titl": [262, 263], "u_": 262, "next": 262, "wil": 262, "parallel": 262, "robust": 262, "british": 262, "columbia": 262, "Then": 263, "patho": 263, "multiprocess": 263, "processingpool": 263, "pool": 263, "loop": 263, "strength": 263, "steps_nois": 263, "test_round": 263, "train_round": 263, "60": 263, "post_cost_test": 263, "post_cost_train": 263, "finish": 263, "round": 263, "train_": 263, "_np": 263, "npy": 263, "test_": 263, "significantli": 263, "speed": 263, "means_train": 263, "means_test": 263, "sem_train": 263, "sem_test": 263, "indx": 263, "noise_lvl": 263, "load": 263, "ddof": 263, "errorbar": 263, "yerr": 263, "capsiz": 263, "operatornam": [263, 264], "tight_layout": 263, "isingxx_nois": 263, "mathcal": 264, "_1": 264, "rightarrow": 264, "_2": 264, "rho": 264, "sum_": 264, "e_x": 264, "ket": 264, "bra": 264, "_": 264, "tr": 264, "list_of_wir": 264, "mg": 264, "edge_color_control": 264, "black": 264, "1200x400": 264, "analyt": 264, "input_state_random": 264, "state_zero": 264, "state_zero_product": 264, "schedul": 264, "psk": 264, "dev_mod": 264, "31": 264, "32": 264, "33": 264, "34": 264, "35": 264, "quantum_st": 264, "36": 264, "37": 264, "38": 264, "71065699": 264, "03927978e": 264, "17j": 264, "43969169": 264, "10882168e": 264, "01j": 264, "28934301": 264, "51183534e": 264, "0000000149011603": 264, "39": 264, "angle_to_text": 264, "40": 264, "41": 264, "elif": 264, "apply_hadamard": 264, "st0": 264, "input_kron": 264, "callit": 264, "ctrain": 264, "ctest": 264, "max_num_step": 264, "180": 264, "theta_op": 264, "max_num_run": 264, "loc": 264, "lower": 264, "teleportlearningcurv": 264, "700": 264}, "objects": {"": [[0, 0, 0, 1, "mentpy", ""]], "mentpy": [[1, 1, 1, "", "BaseSimulator", "Base class for simulators."], [11, 1, 1, "", "ControlMent", "Controlled measurement operator."], [21, 1, 1, "", "GraphState", "A graph state class that inherits from networkx.Graph."], [100, 1, 1, "", "MBQCircuit", "The MBQCircuit class that deals with operations and manipulations of graph states"], [125, 5, 1, "", "Measurement", "alias of Ment"], [137, 1, 1, "", "MentOutcome", "Measurement outcome class."], [150, 1, 1, "", "NumpySimulatorDM", "A density matrix simulator that uses numpy to simulate the quantum circuit."], [163, 1, 1, "", "NumpySimulatorSV", "A vector state simulator that uses numpy to simulate the quantum circuit."], [176, 1, 1, "", "PatternSimulator", "Simulator for measuring patterns of MBQC circuits."], [183, 1, 1, "", "PauliOp", "Class for representing Pauli operators as matrices and strings."], [195, 1, 1, "", "PennylaneSimulator", "Simulator for measuring patterns of MBQC circuits."], [200, 6, 1, "", "draw", "Draws mbqc circuit with flow."], [201, 6, 1, "", "draw_with_wires", "Draws mbqc circuit with flow."], [202, 6, 1, "", "hstack", "Horizontally stack a list of graph states into a larger graph state. This is, the input of the new MBQC circuit is the input of the first state, and the output is the output of the last state."], [208, 6, 1, "", "merge", "Merge two MBQC circuits into a larger MBQC circuit. This is, the input and output of the new MBQC circuit will depend on the concat_indices."], [230, 6, 1, "", "vstack", "Vertically stack a list of graph states into a larger graph state. This is, the input of the new MBQC circuit is the input of the first state, and the output is the output of the last state."]], "mentpy.BaseSimulator": [[2, 2, 1, "", "__call__", "Call self as a function."], [3, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [4, 2, 1, "", "__repr__", "Return repr(self)."], [5, 3, 1, "", "input_state", "The input state of the simulator."], [6, 3, 1, "", "mbqcircuit", "The MBQC circuit used for the simulation."], [7, 2, 1, "", "measure", "Measures the state of the system."], [8, 3, 1, "", "outcomes", "The outcomes of the simulation."], [9, 2, 1, "", "reset", "Resets the simulator to the initial state."], [10, 2, 1, "", "run", "Measures the state of the system."]], "mentpy.BaseSimulator.measure": [[7, 4, 2, "p-angle", "angle", "The angle of measurement."]], "mentpy.BaseSimulator.run": [[10, 4, 2, "p-angles", "angles", "The parameters of the MBQC circuit (if any)."]], "mentpy.ControlMent": [[12, 2, 1, "", "__init__", "Controlled measurement operator."], [13, 2, 1, "", "__repr__", "Return repr(self)."], [14, 2, 1, "", "angle", ""], [15, 3, 1, "", "condition", ""], [16, 2, 1, "", "copy", "Returns a copy of the measurement."], [17, 2, 1, "", "get_povm", "Returns the POVM representation of the measurement."], [18, 2, 1, "", "is_trainable", "Returns True if the measurement is trainable."], [19, 2, 1, "", "matrix", "Return the matrix of the controlled measurement operator."], [20, 2, 1, "", "plane", ""]], "mentpy.GraphState": [[22, 2, 1, "", "__contains__", "Returns True if n is a node, False otherwise. Use: 'n in G'."], [23, 2, 1, "", "__eq__", "Return self==value."], [24, 2, 1, "", "__getitem__", "Returns a dict of neighbors of node n.  Use: 'G[n]'."], [25, 2, 1, "", "__init__", "Initialize a graph state. See networkx.Graph for more information."], [26, 2, 1, "", "__iter__", "Iterate over the nodes. Use: 'for n in G'."], [27, 2, 1, "", "__len__", "Returns the number of nodes in the graph. Use: 'len(G)'."], [28, 2, 1, "", "__repr__", "Return repr(self)."], [29, 2, 1, "", "__str__", "Returns a short summary of the graph."], [30, 2, 1, "", "add_edge", "Add an edge between u and v."], [31, 2, 1, "", "add_edges_from", "Add all the edges in ebunch_to_add."], [32, 2, 1, "", "add_node", "Add a single node node_for_adding and update node attributes."], [33, 2, 1, "", "add_nodes_from", "Add multiple nodes."], [34, 2, 1, "", "add_weighted_edges_from", "Add weighted edges in ebunch_to_add with specified weight attr"], [35, 3, 1, "", "adj", "Graph adjacency object holding the neighbors of each node."], [36, 2, 1, "", "adjacency", "Returns an iterator over (node, adjacency dict) tuples for all nodes."], [37, 5, 1, "", "adjlist_inner_dict_factory", "alias of dict"], [69, 2, 1, "", "clear", "Remove all nodes and edges from the graph."], [70, 2, 1, "", "clear_edges", "Remove all edges from the graph without altering nodes."], [71, 2, 1, "", "copy", "Returns a copy of the graph."], [72, 3, 1, "", "degree", "A DegreeView for the Graph as G.degree or G.degree()."], [73, 2, 1, "", "edge_subgraph", "Returns the subgraph induced by the specified edges."], [74, 3, 1, "", "edges", "An EdgeView of the Graph as G.edges or G.edges()."], [75, 2, 1, "", "get_edge_data", "Returns the attribute dictionary associated with edge (u, v)."], [76, 2, 1, "", "has_edge", "Returns True if the edge (u, v) is in the graph."], [77, 2, 1, "", "has_node", "Returns True if the graph contains the node n."], [78, 2, 1, "", "index_mapping", "Return a mapping of the nodes to their indices."], [79, 2, 1, "", "is_directed", "Returns True if graph is directed, False otherwise."], [80, 2, 1, "", "is_multigraph", "Returns True if graph is a multigraph, False otherwise."], [81, 3, 1, "", "name", "String identifier of the graph."], [82, 2, 1, "", "nbunch_iter", "Returns an iterator over nodes contained in nbunch that are also in the graph."], [83, 2, 1, "", "neighbors", "Returns an iterator over all neighbors of node n."], [84, 3, 1, "", "nodes", "A NodeView of the Graph as G.nodes or G.nodes()."], [85, 2, 1, "", "number_of_edges", "Returns the number of edges between two nodes."], [86, 2, 1, "", "number_of_nodes", "Returns the number of nodes in the graph."], [87, 2, 1, "", "order", "Returns the number of nodes in the graph."], [88, 2, 1, "", "remove_edge", "Remove the edge between u and v."], [89, 2, 1, "", "remove_edges_from", "Remove all edges specified in ebunch."], [90, 2, 1, "", "remove_node", "Remove node n."], [91, 2, 1, "", "remove_nodes_from", "Remove multiple nodes."], [92, 2, 1, "", "size", "Returns the number of edges or total of all edge weights."], [93, 2, 1, "", "stabilizers", "Generate the stabilizers of a graph state."], [94, 2, 1, "", "subgraph", "Returns a SubGraph view of the subgraph induced on nodes."], [95, 2, 1, "", "to_directed", "Returns a directed representation of the graph."], [96, 2, 1, "", "to_directed_class", "Returns the class to use for empty directed copies."], [97, 2, 1, "", "to_undirected", "Returns an undirected copy of the graph."], [98, 2, 1, "", "to_undirected_class", "Returns the class to use for empty undirected copies."], [99, 2, 1, "", "update", "Update the graph using nodes/edges/graphs as input."]], "mentpy.GraphState.__getitem__": [[24, 4, 2, "p-n", "n", "A node in the graph."]], "mentpy.GraphState.add_edge": [[30, 4, 2, "p-attr", "attr", "Edge data (or labels or objects) can be assigned using keyword arguments."], [30, 4, 2, "p-u_of_edge", "u_of_edge", "Nodes can be, for example, strings or numbers. Nodes must be hashable (and not None) Python objects."], [30, 4, 2, "p-v_of_edge", "v_of_edge", "Nodes can be, for example, strings or numbers. Nodes must be hashable (and not None) Python objects."]], "mentpy.GraphState.add_edges_from": [[31, 4, 2, "p-attr", "attr", "Edge data (or labels or objects) can be assigned using keyword arguments."], [31, 4, 2, "p-ebunch_to_add", "ebunch_to_add", "Each edge given in the container will be added to the graph. The edges must be given as 2-tuples (u, v) or 3-tuples (u, v, d) where d is a dictionary containing edge data."]], "mentpy.GraphState.add_node": [[32, 4, 2, "p-attr", "attr", "Set or change node attributes using key=value."], [32, 4, 2, "p-node_for_adding", "node_for_adding", "A node can be any hashable Python object except None."]], "mentpy.GraphState.add_nodes_from": [[33, 4, 2, "p-attr", "attr", "Update attributes for all nodes in nodes. Node attributes specified in nodes as a tuple take precedence over attributes specified via keyword arguments."], [33, 4, 2, "p-nodes_for_adding", "nodes_for_adding", "A container of nodes (list, dict, set, etc.). OR A container of (node, attribute dict) tuples. Node attributes are updated using the attribute dict."]], "mentpy.GraphState.add_weighted_edges_from": [[34, 4, 2, "p-attr", "attr", "Edge attributes to add/update for all edges."], [34, 4, 2, "p-ebunch_to_add", "ebunch_to_add", "Each edge given in the list or container will be added to the graph. The edges must be given as 3-tuples (u, v, w) where w is a number."], [34, 4, 2, "p-weight", "weight", "The attribute name for the edge weights to be added."]], "mentpy.GraphState.adjlist_inner_dict_factory": [[38, 2, 1, "", "__class_getitem__", "See PEP 585"], [39, 2, 1, "", "__contains__", "True if the dictionary has the specified key, else False."], [40, 2, 1, "", "__delitem__", "Delete self[key]."], [41, 2, 1, "", "__eq__", "Return self==value."], [42, 2, 1, "", "__ge__", "Return self>=value."], [43, 2, 1, "", "__getattribute__", "Return getattr(self, name)."], [44, 2, 1, "", "__getitem__", "x.__getitem__(y) <==> x[y]"], [45, 2, 1, "", "__gt__", "Return self>value."], [46, 2, 1, "", "__ior__", "Return self|=value."], [47, 2, 1, "", "__iter__", "Implement iter(self)."], [48, 2, 1, "", "__le__", "Return self<=value."], [49, 2, 1, "", "__len__", "Return len(self)."], [50, 2, 1, "", "__lt__", "Return self<value."], [51, 2, 1, "", "__ne__", "Return self!=value."], [52, 2, 1, "", "__new__", "Create and return a new object.  See help(type) for accurate signature."], [53, 2, 1, "", "__or__", "Return self|value."], [54, 2, 1, "", "__repr__", "Return repr(self)."], [55, 2, 1, "", "__reversed__", "Return a reverse iterator over the dict keys."], [56, 2, 1, "", "__ror__", "Return value|self."], [57, 2, 1, "", "__setitem__", "Set self[key] to value."], [58, 2, 1, "", "clear", ""], [59, 2, 1, "", "copy", ""], [60, 2, 1, "", "fromkeys", "Create a new dictionary with keys from iterable and values set to value."], [61, 2, 1, "", "get", "Return the value for key if key is in the dictionary, else default."], [62, 2, 1, "", "items", ""], [63, 2, 1, "", "keys", ""], [64, 2, 1, "", "pop", "If the key is not found, return the default if given; otherwise, raise a KeyError."], [65, 2, 1, "", "popitem", "Remove and return a (key, value) pair as a 2-tuple."], [66, 2, 1, "", "setdefault", "Insert key with a value of default if key is not in the dictionary."], [67, 2, 1, "", "update", "If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k] If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v In either case, this is followed by: for k in F:  D[k] = F[k]"], [68, 2, 1, "", "values", ""]], "mentpy.GraphState.copy": [[71, 4, 2, "p-as_view", "as_view", "If True, the returned graph-view provides a read-only view of the original graph without actually copying any data."]], "mentpy.GraphState.edge_subgraph": [[73, 4, 2, "p-edges", "edges", "An iterable of edges in this graph."]], "mentpy.GraphState.get_edge_data": [[75, 4, 2, "p-default", "default", "Value to return if the edge (u, v) is not found."], [75, 4, 2, "p-u", "u", ""], [75, 4, 2, "p-v", "v", ""]], "mentpy.GraphState.has_edge": [[76, 4, 2, "p-u", "u", "Nodes can be, for example, strings or numbers. Nodes must be hashable (and not None) Python objects."], [76, 4, 2, "p-v", "v", "Nodes can be, for example, strings or numbers. Nodes must be hashable (and not None) Python objects."]], "mentpy.GraphState.has_node": [[77, 4, 2, "p-n", "n", ""]], "mentpy.GraphState.nbunch_iter": [[82, 4, 2, "p-nbunch", "nbunch", "The view will only report edges incident to these nodes."]], "mentpy.GraphState.neighbors": [[83, 4, 2, "p-n", "n", "A node in the graph"]], "mentpy.GraphState.number_of_edges": [[85, 4, 2, "p-u", "u", "If u and v are specified, return the number of edges between u and v. Otherwise return the total number of all edges."], [85, 4, 2, "p-v", "v", "If u and v are specified, return the number of edges between u and v. Otherwise return the total number of all edges."]], "mentpy.GraphState.remove_edge": [[88, 4, 2, "p-u", "u", "Remove the edge between nodes u and v."], [88, 4, 2, "p-v", "v", "Remove the edge between nodes u and v."]], "mentpy.GraphState.remove_edges_from": [[89, 4, 2, "p-ebunch", "ebunch", "Each edge given in the list or container will be removed from the graph. The edges can be:"]], "mentpy.GraphState.remove_node": [[90, 4, 2, "p-n", "n", "A node in the graph"]], "mentpy.GraphState.remove_nodes_from": [[91, 4, 2, "p-nodes", "nodes", "A container of nodes (list, dict, set, etc.).  If a node in the container is not in the graph it is silently ignored."]], "mentpy.GraphState.size": [[92, 4, 2, "p-weight", "weight", "The edge attribute that holds the numerical value used as a weight. If None, then each edge has weight 1."]], "mentpy.GraphState.subgraph": [[94, 4, 2, "p-nodes", "nodes", "A container of nodes which will be iterated through once."]], "mentpy.GraphState.to_undirected": [[97, 4, 2, "p-as_view", "as_view", "If True return a view of the original undirected graph."]], "mentpy.GraphState.update": [[99, 4, 2, "p-edges", "edges", "The first parameter can be a graph or some edges. If it has attributes nodes and edges, then it is taken to be a Graph-like object and those attributes are used as collections of nodes and edges to be added to the graph. If the first parameter does not have those attributes, it is treated as a collection of edges and added to the graph. If the first argument is None, no edges are added."], [99, 4, 2, "p-nodes", "nodes", "The second parameter is treated as a collection of nodes to be added to the graph unless it is None. If edges is None and nodes is None an exception is raised. If the first parameter is a Graph, then nodes is ignored."]], "mentpy.MBQCircuit": [[101, 2, 1, "", "__delitem__", "Delete the measurement of the node with index key."], [102, 2, 1, "", "__getitem__", "Return the value of the measurement of the node with index key."], [103, 2, 1, "", "__init__", "Initializes a graph state"], [104, 2, 1, "", "__len__", "Return the number of nodes in the MBQCircuit"], [105, 2, 1, "", "__repr__", "Return the representation of the current MBQC circuit state"], [106, 2, 1, "", "__setitem__", "Set the value of the measurement of the node with index key."], [107, 2, 1, "", "add_edge", "Adds an edge between nodes u and v"], [108, 2, 1, "", "add_edges_from", "Adds edges from a list of tuples"], [109, 2, 1, "", "calculate_order", "Returns the order of the measurements"], [110, 3, 1, "", "classical_output_nodes", "Return the output nodes of the MBQC circuit."], [111, 3, 1, "", "controlled_nodes", "Return the controlled nodes of the MBQC circuit."], [112, 3, 1, "", "depth", "Return the depth of the MBQC circuit."], [113, 3, 1, "", "flow", "Return the flow function of the MBQC circuit."], [114, 3, 1, "", "graph", "Return the graph of the resource state."], [115, 3, 1, "", "input_nodes", "Return the input nodes of the MBQC circuit."], [116, 3, 1, "", "inputc", "Returns I^c, the complement of input nodes."], [117, 3, 1, "", "measurement_order", "Return the measurement order of the MBQC circuit."], [118, 3, 1, "", "measurements", "Return the measurements of the MBQC circuit."], [119, 2, 1, "", "ordered_layers", "Returns the layers of the MBQC circuit."], [120, 3, 1, "", "output_nodes", "Return the output nodes of the MBQC circuit."], [121, 3, 1, "", "outputc", "Returns O^c, the complement of output nodes."], [122, 3, 1, "", "partial_order", "Return the partial order function of the MBQC circuit."], [123, 3, 1, "", "quantum_output_nodes", "Return the output nodes of the MBQC circuit."], [124, 3, 1, "", "trainable_nodes", "Return the trainable nodes of the MBQC circuit."]], "mentpy.Measurement": [[126, 2, 1, "", "__init__", "Measurement operator."], [127, 2, 1, "", "__repr__", "Return repr(self)."], [128, 3, 1, "", "angle", ""], [129, 2, 1, "", "copy", "Returns a copy of the measurement."], [130, 2, 1, "", "get_povm", "Returns the POVM representation of the measurement."], [131, 2, 1, "", "is_trainable", "Returns True if the measurement is trainable."], [132, 2, 1, "", "matrix", "Returns the matrix representation of the measurement."], [133, 3, 1, "", "node_id", ""], [134, 3, 1, "", "outcome", ""], [135, 3, 1, "", "plane", ""], [136, 2, 1, "", "set_angle", "Sets the angle of the measurement."]], "mentpy.MentOutcome": [[138, 2, 1, "", "__call__", "Call self as a function."], [139, 2, 1, "", "__eq__", "Return self==value."], [140, 2, 1, "", "__ge__", "Return self>=value."], [141, 2, 1, "", "__gt__", "Return self>value."], [142, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [143, 2, 1, "", "__le__", "Return self<=value."], [144, 2, 1, "", "__lt__", "Return self<value."], [145, 2, 1, "", "__ne__", "Return self!=value."], [146, 2, 1, "", "__or__", "Return self|value."], [147, 2, 1, "", "__repr__", "Return repr(self)."], [148, 3, 1, "", "cond_nodes", ""], [149, 3, 1, "", "node_id", ""]], "mentpy.NumpySimulatorDM": [[151, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [152, 2, 1, "", "current_number_simulated_nodes", "Returns the number of nodes that are currently simulated."], [153, 2, 1, "", "current_simulated_nodes", "Returns the nodes that are currently simulated."], [154, 2, 1, "", "find_swaps", ""], [155, 2, 1, "", "future_neighbors_in_wire", ""], [156, 2, 1, "", "measure", "Measures the state of the system."], [157, 2, 1, "", "measure_ment", "Measures a ment"], [158, 2, 1, "", "neighbors_in_wire", "Returns the neighbors of a node in the same wire."], [159, 2, 1, "", "node_in_which_wire", "Returns the wire in which the node is."], [160, 2, 1, "", "reorder_qubits", "Reorders the qubits in the given order."], [161, 2, 1, "", "reset", "Resets the simulator to the initial state."], [162, 2, 1, "", "run", "Measures the quantum state in the given pattern."]], "mentpy.NumpySimulatorDM.measure": [[156, 4, 2, "p-angle", "angle", "The angle of measurement."]], "mentpy.NumpySimulatorSV": [[164, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [165, 2, 1, "", "current_number_simulated_nodes", "Returns the number of nodes that are currently simulated."], [166, 2, 1, "", "current_simulated_nodes", "Returns the nodes that are currently simulated."], [167, 2, 1, "", "find_swaps", ""], [168, 2, 1, "", "future_neighbors_in_wire", ""], [169, 2, 1, "", "measure", "Measures the state of the system."], [170, 2, 1, "", "measure_ment", "Measures a ment"], [171, 2, 1, "", "neighbors_in_wire", "Returns the neighbors of a node in the same wire."], [172, 2, 1, "", "node_in_which_wire", "Returns the wire in which the node is."], [173, 2, 1, "", "reorder_qubits", "Reorders the qubits in the given order."], [174, 2, 1, "", "reset", "Resets the simulator to the initial state."], [175, 2, 1, "", "run", "Measures the quantum state in the given pattern."]], "mentpy.NumpySimulatorSV.measure": [[169, 4, 2, "p-angle", "angle", "The angle of measurement."]], "mentpy.NumpySimulatorSV.run": [[175, 4, 2, "p-angles", "angles", "List of angles to be used for the measurements."], [175, 4, 2, "p-output_form", "output_form", "Output form of the quantum state. Can be 'dm' for density matrix or 'sv' for statevector."]], "mentpy.PatternSimulator": [[177, 2, 1, "", "__call__", "Call self as a function."], [178, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [179, 2, 1, "", "__repr__", "Return repr(self)."], [180, 2, 1, "", "measure", ""], [181, 2, 1, "", "reset", ""], [182, 2, 1, "", "run", ""]], "mentpy.PauliOp": [[184, 2, 1, "", "__eq__", "Return self==value."], [185, 2, 1, "", "__getitem__", ""], [186, 2, 1, "", "__hash__", "Return hash(self)."], [187, 2, 1, "", "__init__", "Initialize a PauliOp object."], [188, 2, 1, "", "__mul__", "Returns the product of two Pauli operators."], [189, 2, 1, "", "__repr__", "Return repr(self)."], [190, 2, 1, "", "append", "Appends a Pauli operator to the end of another Pauli operator."], [191, 2, 1, "", "commutator", "Returns the commutator of two Pauli operators."], [192, 2, 1, "", "get_subset", "Returns a subset of the Pauli operator."], [193, 3, 1, "", "number_of_qubits", "Returns the number of qubits in the Pauli operator."], [194, 2, 1, "", "symplectic_prod", "Returns the symplectic product of two Pauli operators."]], "mentpy.PauliOp.get_subset": [[192, 4, 2, "p-indices", "indices", "The indices of the Pauli operators to be returned."]], "mentpy.PennylaneSimulator": [[196, 2, 1, "", "__init__", "Initialize self.  See help(type(self)) for accurate signature."], [197, 2, 1, "", "measure", "Measures the state of the system."], [198, 2, 1, "", "reset", "Resets the simulator to the initial state."], [199, 2, 1, "", "run", "Measures the state of the system."]], "mentpy.PennylaneSimulator.measure": [[197, 4, 2, "p-angle", "angle", "The angle of measurement."]], "mentpy.PennylaneSimulator.run": [[199, 4, 2, "p-angles", "angles", "The parameters of the MBQC circuit (if any)."]], "mentpy.mbqc.templates": [[203, 6, 1, "", "from_pauli", "Returns a graph state that can implement U=e^{-i \\theta P}"], [204, 6, 1, "", "grid_cluster", "Returns a grid cluster state of n x m qubits."], [205, 6, 1, "", "linear_cluster", "Returns a linear cluster state of n qubits."], [206, 6, 1, "", "many_wires", "Returns a graph state with many wires."], [207, 6, 1, "", "muta", "This is the Multiple Triangle Ansatz (MuTA) template."]], "mentpy.mbqc.templates.from_pauli": [[203, 4, 2, "p-pauli_op", "pauli_op", "The Pauli operator to implement."]], "mentpy.mbqc.templates.grid_cluster": [[204, 4, 2, "p-m", "m", "The number of columns in the cluster state."], [204, 4, 2, "p-n", "n", "The number of rows in the cluster state."], [204, 4, 2, "p-periodic", "periodic", "If True, the returned state will be a cylinder."]], "mentpy.mbqc.templates.linear_cluster": [[205, 4, 2, "p-n", "n", "The number of qubits in the cluster state."]], "mentpy.mbqc.templates.many_wires": [[206, 4, 2, "p-n_wires", "n_wires", "A list of the number of qubits in each wire."]], "mentpy.mbqc.templates.muta": [[207, 4, 2, "p-n_layers", "n_layers", "The number of layers in the graph state."], [207, 4, 2, "p-n_wires", "n_wires", "The number of wires in the graph state."]], "mentpy.optimizers": [[231, 1, 1, "", "AdamOpt", "Class for the Adam optimizer."], [238, 1, 1, "", "RCDOpt", "Class for the random coordinate descent optimizer."], [245, 1, 1, "", "SGDOpt", "Class for the SGD optimizer."]], "mentpy.optimizers.AdamOpt": [[232, 2, 1, "", "__init__", "Initialize the Adam optimizer."], [233, 2, 1, "", "optimize", "Optimize a function f using the Adam optimizer."], [234, 2, 1, "", "optimize_and_gradient_norm", "Optimize a function f using the Adam optimizer."], [235, 2, 1, "", "reset", "Reset the optimizer."], [236, 2, 1, "", "step", "Take a step of the optimizer."], [237, 2, 1, "", "update_step_size", "Update the step size of the optimizer."]], "mentpy.optimizers.RCDOpt": [[239, 2, 1, "", "__init__", "Initialize the random coordinate descent optimizer."], [240, 2, 1, "", "optimize", "Optimize a function f using the random coordinate descent optimizer."], [241, 2, 1, "", "optimize_and_gradient_norm", "Optimize a function f using the random coordinate descent optimizer."], [242, 2, 1, "", "reset", ""], [243, 2, 1, "", "step", "Take a step using the random coordinate descent optimizer."], [244, 2, 1, "", "update_step_size", "Update the step size of the optimizer."]], "mentpy.optimizers.SGDOpt": [[246, 2, 1, "", "__init__", "Initialize the SGD optimizer."], [247, 2, 1, "", "optimize", "Optimize a function f using the SGD optimizer."], [248, 2, 1, "", "optimize_and_gradient_norm", "Optimize a function f using the SGD optimizer."], [249, 2, 1, "", "reset", "Reset the optimizer."], [250, 2, 1, "", "step", "Take a step of the SGD optimizer."], [251, 2, 1, "", "update_step_size", "Update the step size of the optimizer."]], "mentpy.utils": [[209, 1, 1, "", "FlowSpace", "The flow space graph of a MBQCircuit."], [212, 6, 1, "", "are_lc_equivalent", "Check if two EGraphs are LC equivalent, and return the Clifford operation if so. Implemented as in arXiv:quant-ph/0405023. :param graph1: the initial graph to check Clifford equivalence with. :param graph2: the graph to check Clifford equivalence against. :param clifford_form: a string describing the output form of local Clifford operation, if"], [213, 6, 1, "", "calculate_complete_gens_lie_algebra", "Calculates the Pauli operators for the Lie algebra of a given state"], [214, 6, 1, "", "calculate_gens_lie_algebra", "Calculates the generators of the Lie algebra of a given state"], [215, 6, 1, "", "calculate_lie_algebra", "Calculates the Lie algebra of a given MBQCircuit"], [216, 6, 1, "", "calculate_possible_rotations", "Calculates the possible rotations of a given state"], [217, 6, 1, "", "digraph_expressivity_of_flow_space", "Returns digraph given the expressivity of a FlowSpace object."], [218, 6, 1, "", "dim_so", "Calculates the dimension of \\mathfrak{so}(n)"], [219, 6, 1, "", "dim_sp", "Calculates the dimension of \\mathfrak{sp}(n)"], [220, 6, 1, "", "dim_su", "Calculates the dimension of \\mathfrak{su}(n)"], [221, 6, 1, "", "draw_digraph_flow_space", "Draws the expressivity digraph of flow space"], [222, 6, 1, "", "expressivity_with_histogram", "Returns the expressivity calculated using the Kullback-Leiber entropy"], [223, 6, 1, "", "generate_haar_random_states", "Makes one Haar random state over n_qubits"], [224, 6, 1, "", "generate_random_dataset", "Return random training and test data (input, target) for a given unitary gate unitary."], [225, 6, 1, "", "generate_random_dataset_noisy", "Return random training data (input, target) for a given unitary gate unitary with brownian noise parametrized by noise_level."], [226, 6, 1, "", "lc_cluster_flowspace", "Cluster flow graph in lc_equivalent graphs."], [227, 6, 1, "", "lie_algebra_completion", "Completes a given set of Pauli operators to a basis of the Lie algebra"], [228, 6, 1, "", "sample_probability_density_of_fidelities", "Calculates samples of the probability of fidelities of the given graph state circuit"], [229, 6, 1, "", "train_test_split", "Split the data into training and test sets."]], "mentpy.utils.FlowSpace": [[210, 2, 1, "", "__init__", "Creates the flow graph space of a graph state circuit."], [211, 2, 1, "", "__repr__", "Returns the representation of the flow space"]], "mentpy.utils.calculate_possible_rotations": [[216, 4, 2, "p-state", "state", "The state for which to calculate the possible rotations"]], "mentpy.utils.expressivity_with_histogram": [[222, 4, 2, "p-graph_state_circuit", "graph_state_circuit", ""], [222, 4, 2, "p-method", "method", ""], [222, 4, 2, "p-n_bins", "n_bins", ""], [222, 4, 2, "p-n_samples", "n_samples", ""]], "mentpy.utils.generate_random_dataset_noisy": [[225, 4, 2, "p-n_samples", "n_samples", "number of samples"], [225, 4, 2, "p-noise_level", "noise_level", "noise level"], [225, 4, 2, "p-noise_type", "noise_type", "type of noise. Either 'brownian' or 'bitflip'"], [225, 4, 2, "p-test_size", "test_size", "percentage of test data"], [225, 4, 2, "p-unitary", "unitary", "unitary gate"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:parameter", "5": "py:attribute", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "function", "Python function"]}, "titleterms": {"oper": [0, 253], "mbqcircuit": 0, "templat": [0, 253], "simul": [0, 255], "optim": [0, 260], "util": 0, "note": [1, 253, 255, 257, 258, 259, 260, 261, 263, 264], "see": [1, 21, 27, 30, 31, 32, 33, 34, 71, 82, 85, 86, 87, 88, 89, 90, 91, 92, 97, 99, 100, 176, 195, 231, 245], "also": [1, 21, 27, 30, 31, 32, 33, 34, 71, 82, 85, 86, 87, 88, 89, 90, 91, 92, 97, 99, 100, 176, 195, 231, 245], "constructor": [1, 11, 21, 37, 100, 125, 137, 150, 163, 176, 183, 195, 209, 231, 238, 245], "string": [1, 11, 21, 37, 100, 125, 137, 150, 163, 176, 183, 195, 209], "represent": [1, 11, 21, 37, 100, 125, 137, 150, 163, 176, 183, 195, 209], "special": [1, 21, 37, 100, 137, 150, 163, 176, 183, 195], "method": [1, 11, 21, 37, 100, 125, 137, 150, 163, 176, 183, 195, 231, 238, 245], "properti": [1, 11, 21, 100, 125, 137, 150, 163, 183, 195], "class": 21, "graph": 252, "state": 252, "graphstat": 252, "stabil": 252, "creat": 253, "mbqc": [253, 255], "circuit": [253, 255, 260], "ment": 253, "refer": [253, 258, 262], "singl": 254, "qubit": 254, "measur": [254, 261], "run": 255, "differ": 255, "input": 255, "instal": 256, "us": 256, "pip": 256, "from": 256, "sourc": 256, "develop": 256, "test": 256, "welcom": 257, "mentpi": 257, "": 257, "document": 257, "featur": 257, "roadmap": 257, "contribut": 257, "acknowledg": 257, "citat": 257, "classifi": [258, 259], "classic": 258, "data": 258, "fisher": 259, "inform": 259, "discret": 260, "hea": 260, "set": 260, "up": 260, "environ": 260, "quantum": [260, 264], "loss": 260, "function": 260, "deep": 260, "q": 260, "learn": [260, 262, 263, 264], "code": [260, 262, 263, 264], "plot": [260, 262, 263, 264], "curv": [260, 262, 263, 264], "greedi": 260, "search": 260, "conclus": 260, "introduct": [261, 262], "base": 261, "vqe": 261, "an": 262, "mb": [262, 263], "qml": [262, 263], "parallel": 263, "protocol": 263, "instrument": 264, "exact": 264, "solut": 264}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"Operators": [[0, "operators"]], "MBQCircuits": [[0, "mbqcircuits"]], "Templates": [[0, "templates"], [253, "templates"]], "Simulators": [[0, "simulators"]], "Optimizers": [[0, "optimizers"]], "Utils": [[0, "utils"]], "Note": [[1, null], [253, null], [255, null], [257, null], [258, null], [259, null], [260, null], [261, null], [263, null], [264, null]], "See also": [[1, null], [21, null], [27, null], [30, null], [31, null], [32, null], [33, null], [34, null], [71, null], [82, null], [85, null], [86, null], [87, null], [88, null], [89, null], [90, null], [91, null], [92, null], [97, null], [99, null], [100, null], [176, null], [195, null], [231, null], [245, null]], "Constructors": [[1, "constructors"], [11, "constructors"], [21, "constructors"], [37, "constructors"], [100, "constructors"], [125, "constructors"], [137, "constructors"], [150, "constructors"], [163, "constructors"], [176, "constructors"], [183, "constructors"], [195, "constructors"], [209, "constructors"], [231, "constructors"], [238, "constructors"], [245, "constructors"]], "String representation": [[1, "string-representation"], [11, "string-representation"], [21, "string-representation"], [37, "string-representation"], [100, "string-representation"], [125, "string-representation"], [137, "string-representation"], [150, "string-representation"], [163, "string-representation"], [176, "string-representation"], [183, "string-representation"], [195, "string-representation"], [209, "string-representation"]], "Special methods": [[1, "special-methods"], [21, "special-methods"], [37, "special-methods"], [100, "special-methods"], [137, "special-methods"], [150, "special-methods"], [163, "special-methods"], [176, "special-methods"], [183, "special-methods"], [195, "special-methods"]], "Methods": [[1, "methods"], [11, "methods"], [21, "methods"], [37, "methods"], [100, "methods"], [125, "methods"], [150, "methods"], [163, "methods"], [176, "methods"], [183, "methods"], [195, "methods"], [231, "methods"], [238, "methods"], [245, "methods"]], "Properties": [[1, "properties"], [11, "properties"], [21, "properties"], [100, "properties"], [125, "properties"], [137, "properties"], [150, "properties"], [163, "properties"], [183, "properties"], [195, "properties"]], "Classes": [[21, "classes"]], "Graph States": [[252, "graph-states"]], "GraphState": [[252, "graphstate"]], "Stabilizers": [[252, "stabilizers"]], "Creating MBQC Circuits": [[253, "creating-mbqc-circuits"]], "MBQC Circuits": [[253, "mbqc-circuits"]], "Ment Operators": [[253, "ment-operators"]], "References": [[253, "references"], [258, "references"], [262, "references"]], "Single qubit measurements": [[254, "single-qubit-measurements"]], "Simulating MBQC Circuits": [[255, "simulating-mbqc-circuits"]], "Running the circuit": [[255, "running-the-circuit"]], "Different inputs": [[255, "different-inputs"]], "Installation": [[256, "installation"]], "Install using pip": [[256, "install-using-pip"]], "Install from Source": [[256, "install-from-source"]], "Development Installation": [[256, "development-installation"]], "Testing and Development": [[256, "testing-and-development"]], "Welcome to MentPy\u2019s documentation": [[257, "welcome-to-mentpy-s-documentation"]], "Features": [[257, "features"]], "Roadmap": [[257, "roadmap"]], "Contributing": [[257, "contributing"]], "Acknowledgements": [[257, "acknowledgements"]], "Citation": [[257, "citation"]], "Classifying classical data": [[258, "classifying-classical-data"]], "Fisher information classifier": [[259, "fisher-information-classifier"]], "Discrete optimization for HEA": [[260, "discrete-optimization-for-hea"]], "Set up the environment": [[260, null]], "Quantum Circuit and loss function": [[260, "quantum-circuit-and-loss-function"]], "Optimizing with Deep Q-Learning": [[260, "optimizing-with-deep-q-learning"]], "Code for plotting learning curve": [[260, null], [260, null], [260, null], [262, null], [263, null], [264, null]], "Optimizing with Greedy Search": [[260, "optimizing-with-greedy-search"]], "Conclusion": [[260, "conclusion"]], "Introduction to Measurement-based VQE": [[261, "introduction-to-measurement-based-vqe"]], "An introduction to MB-QML": [[262, "an-introduction-to-mb-qml"]], "Parallelizing MB-QML protocols": [[263, "parallelizing-mb-qml-protocols"]], "Learning a quantum instrument": [[264, "learning-a-quantum-instrument"]], "Code for plotting the exact solution": [[264, null]]}, "indexentries": {"mentpy": [[0, "module-mentpy"]], "module": [[0, "module-mentpy"]]}, "docurls": ["api.html", "api/mentpy.BaseSimulator.html", "api/mentpy.BaseSimulator.__call__.html", "api/mentpy.BaseSimulator.__init__.html", "api/mentpy.BaseSimulator.__repr__.html", "api/mentpy.BaseSimulator.input_state.html", "api/mentpy.BaseSimulator.mbqcircuit.html", "api/mentpy.BaseSimulator.measure.html", "api/mentpy.BaseSimulator.outcomes.html", "api/mentpy.BaseSimulator.reset.html", "api/mentpy.BaseSimulator.run.html", "api/mentpy.ControlMent.html", "api/mentpy.ControlMent.__init__.html", "api/mentpy.ControlMent.__repr__.html", "api/mentpy.ControlMent.angle.html", "api/mentpy.ControlMent.condition.html", "api/mentpy.ControlMent.copy.html", "api/mentpy.ControlMent.get_povm.html", "api/mentpy.ControlMent.is_trainable.html", "api/mentpy.ControlMent.matrix.html", "api/mentpy.ControlMent.plane.html", "api/mentpy.GraphState.html", "api/mentpy.GraphState.__contains__.html", "api/mentpy.GraphState.__eq__.html", "api/mentpy.GraphState.__getitem__.html", "api/mentpy.GraphState.__init__.html", "api/mentpy.GraphState.__iter__.html", "api/mentpy.GraphState.__len__.html", "api/mentpy.GraphState.__repr__.html", "api/mentpy.GraphState.__str__.html", "api/mentpy.GraphState.add_edge.html", "api/mentpy.GraphState.add_edges_from.html", "api/mentpy.GraphState.add_node.html", "api/mentpy.GraphState.add_nodes_from.html", "api/mentpy.GraphState.add_weighted_edges_from.html", "api/mentpy.GraphState.adj.html", "api/mentpy.GraphState.adjacency.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__class_getitem__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__contains__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__delitem__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__eq__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__ge__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__getattribute__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__getitem__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__gt__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__ior__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__iter__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__le__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__len__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__lt__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__ne__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__new__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__or__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__repr__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__reversed__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__ror__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.__setitem__.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.clear.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.copy.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.fromkeys.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.get.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.items.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.keys.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.pop.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.popitem.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.setdefault.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.update.html", "api/mentpy.GraphState.adjlist_inner_dict_factory.values.html", "api/mentpy.GraphState.clear.html", "api/mentpy.GraphState.clear_edges.html", "api/mentpy.GraphState.copy.html", "api/mentpy.GraphState.degree.html", "api/mentpy.GraphState.edge_subgraph.html", "api/mentpy.GraphState.edges.html", "api/mentpy.GraphState.get_edge_data.html", "api/mentpy.GraphState.has_edge.html", "api/mentpy.GraphState.has_node.html", "api/mentpy.GraphState.index_mapping.html", "api/mentpy.GraphState.is_directed.html", "api/mentpy.GraphState.is_multigraph.html", "api/mentpy.GraphState.name.html", "api/mentpy.GraphState.nbunch_iter.html", "api/mentpy.GraphState.neighbors.html", "api/mentpy.GraphState.nodes.html", "api/mentpy.GraphState.number_of_edges.html", "api/mentpy.GraphState.number_of_nodes.html", "api/mentpy.GraphState.order.html", "api/mentpy.GraphState.remove_edge.html", "api/mentpy.GraphState.remove_edges_from.html", "api/mentpy.GraphState.remove_node.html", "api/mentpy.GraphState.remove_nodes_from.html", "api/mentpy.GraphState.size.html", "api/mentpy.GraphState.stabilizers.html", "api/mentpy.GraphState.subgraph.html", "api/mentpy.GraphState.to_directed.html", "api/mentpy.GraphState.to_directed_class.html", "api/mentpy.GraphState.to_undirected.html", "api/mentpy.GraphState.to_undirected_class.html", "api/mentpy.GraphState.update.html", "api/mentpy.MBQCircuit.html", "api/mentpy.MBQCircuit.__delitem__.html", "api/mentpy.MBQCircuit.__getitem__.html", "api/mentpy.MBQCircuit.__init__.html", "api/mentpy.MBQCircuit.__len__.html", "api/mentpy.MBQCircuit.__repr__.html", "api/mentpy.MBQCircuit.__setitem__.html", "api/mentpy.MBQCircuit.add_edge.html", "api/mentpy.MBQCircuit.add_edges_from.html", "api/mentpy.MBQCircuit.calculate_order.html", "api/mentpy.MBQCircuit.classical_output_nodes.html", "api/mentpy.MBQCircuit.controlled_nodes.html", "api/mentpy.MBQCircuit.depth.html", "api/mentpy.MBQCircuit.flow.html", "api/mentpy.MBQCircuit.graph.html", "api/mentpy.MBQCircuit.input_nodes.html", "api/mentpy.MBQCircuit.inputc.html", "api/mentpy.MBQCircuit.measurement_order.html", "api/mentpy.MBQCircuit.measurements.html", "api/mentpy.MBQCircuit.ordered_layers.html", "api/mentpy.MBQCircuit.output_nodes.html", "api/mentpy.MBQCircuit.outputc.html", "api/mentpy.MBQCircuit.partial_order.html", "api/mentpy.MBQCircuit.quantum_output_nodes.html", "api/mentpy.MBQCircuit.trainable_nodes.html", "api/mentpy.Measurement.html", "api/mentpy.Measurement.__init__.html", "api/mentpy.Measurement.__repr__.html", "api/mentpy.Measurement.angle.html", "api/mentpy.Measurement.copy.html", "api/mentpy.Measurement.get_povm.html", "api/mentpy.Measurement.is_trainable.html", "api/mentpy.Measurement.matrix.html", "api/mentpy.Measurement.node_id.html", "api/mentpy.Measurement.outcome.html", "api/mentpy.Measurement.plane.html", "api/mentpy.Measurement.set_angle.html", "api/mentpy.MentOutcome.html", "api/mentpy.MentOutcome.__call__.html", "api/mentpy.MentOutcome.__eq__.html", "api/mentpy.MentOutcome.__ge__.html", "api/mentpy.MentOutcome.__gt__.html", "api/mentpy.MentOutcome.__init__.html", "api/mentpy.MentOutcome.__le__.html", "api/mentpy.MentOutcome.__lt__.html", "api/mentpy.MentOutcome.__ne__.html", "api/mentpy.MentOutcome.__or__.html", "api/mentpy.MentOutcome.__repr__.html", "api/mentpy.MentOutcome.cond_nodes.html", "api/mentpy.MentOutcome.node_id.html", "api/mentpy.NumpySimulatorDM.html", "api/mentpy.NumpySimulatorDM.__init__.html", "api/mentpy.NumpySimulatorDM.current_number_simulated_nodes.html", "api/mentpy.NumpySimulatorDM.current_simulated_nodes.html", "api/mentpy.NumpySimulatorDM.find_swaps.html", "api/mentpy.NumpySimulatorDM.future_neighbors_in_wire.html", "api/mentpy.NumpySimulatorDM.measure.html", "api/mentpy.NumpySimulatorDM.measure_ment.html", "api/mentpy.NumpySimulatorDM.neighbors_in_wire.html", "api/mentpy.NumpySimulatorDM.node_in_which_wire.html", "api/mentpy.NumpySimulatorDM.reorder_qubits.html", "api/mentpy.NumpySimulatorDM.reset.html", "api/mentpy.NumpySimulatorDM.run.html", "api/mentpy.NumpySimulatorSV.html", "api/mentpy.NumpySimulatorSV.__init__.html", "api/mentpy.NumpySimulatorSV.current_number_simulated_nodes.html", "api/mentpy.NumpySimulatorSV.current_simulated_nodes.html", "api/mentpy.NumpySimulatorSV.find_swaps.html", "api/mentpy.NumpySimulatorSV.future_neighbors_in_wire.html", "api/mentpy.NumpySimulatorSV.measure.html", "api/mentpy.NumpySimulatorSV.measure_ment.html", "api/mentpy.NumpySimulatorSV.neighbors_in_wire.html", "api/mentpy.NumpySimulatorSV.node_in_which_wire.html", "api/mentpy.NumpySimulatorSV.reorder_qubits.html", "api/mentpy.NumpySimulatorSV.reset.html", "api/mentpy.NumpySimulatorSV.run.html", "api/mentpy.PatternSimulator.html", "api/mentpy.PatternSimulator.__call__.html", "api/mentpy.PatternSimulator.__init__.html", "api/mentpy.PatternSimulator.__repr__.html", "api/mentpy.PatternSimulator.measure.html", "api/mentpy.PatternSimulator.reset.html", "api/mentpy.PatternSimulator.run.html", "api/mentpy.PauliOp.html", "api/mentpy.PauliOp.__eq__.html", "api/mentpy.PauliOp.__getitem__.html", "api/mentpy.PauliOp.__hash__.html", "api/mentpy.PauliOp.__init__.html", "api/mentpy.PauliOp.__mul__.html", "api/mentpy.PauliOp.__repr__.html", "api/mentpy.PauliOp.append.html", "api/mentpy.PauliOp.commutator.html", "api/mentpy.PauliOp.get_subset.html", "api/mentpy.PauliOp.number_of_qubits.html", "api/mentpy.PauliOp.symplectic_prod.html", "api/mentpy.PennylaneSimulator.html", "api/mentpy.PennylaneSimulator.__init__.html", "api/mentpy.PennylaneSimulator.measure.html", "api/mentpy.PennylaneSimulator.reset.html", "api/mentpy.PennylaneSimulator.run.html", "api/mentpy.draw.html", "api/mentpy.draw_with_wires.html", "api/mentpy.hstack.html", "api/mentpy.mbqc.templates.from_pauli.html", "api/mentpy.mbqc.templates.grid_cluster.html", "api/mentpy.mbqc.templates.linear_cluster.html", "api/mentpy.mbqc.templates.many_wires.html", "api/mentpy.mbqc.templates.muta.html", "api/mentpy.merge.html", "api/mentpy.utils.FlowSpace.html", "api/mentpy.utils.FlowSpace.__init__.html", "api/mentpy.utils.FlowSpace.__repr__.html", "api/mentpy.utils.are_lc_equivalent.html", "api/mentpy.utils.calculate_complete_gens_lie_algebra.html", "api/mentpy.utils.calculate_gens_lie_algebra.html", "api/mentpy.utils.calculate_lie_algebra.html", "api/mentpy.utils.calculate_possible_rotations.html", "api/mentpy.utils.digraph_expressivity_of_flow_space.html", "api/mentpy.utils.dim_so.html", "api/mentpy.utils.dim_sp.html", "api/mentpy.utils.dim_su.html", "api/mentpy.utils.draw_digraph_flow_space.html", "api/mentpy.utils.expressivity_with_histogram.html", "api/mentpy.utils.generate_haar_random_states.html", "api/mentpy.utils.generate_random_dataset.html", "api/mentpy.utils.generate_random_dataset_noisy.html", "api/mentpy.utils.lc_cluster_flowspace.html", "api/mentpy.utils.lie_algebra_completion.html", "api/mentpy.utils.sample_probability_density_of_fidelities.html", "api/mentpy.utils.train_test_split.html", "api/mentpy.vstack.html", "api/mentpy/optimizers.AdamOpt.html", "api/mentpy/optimizers.AdamOpt.__init__.html", "api/mentpy/optimizers.AdamOpt.optimize.html", "api/mentpy/optimizers.AdamOpt.optimize_and_gradient_norm.html", "api/mentpy/optimizers.AdamOpt.reset.html", "api/mentpy/optimizers.AdamOpt.step.html", "api/mentpy/optimizers.AdamOpt.update_step_size.html", "api/mentpy/optimizers.RCDOpt.html", "api/mentpy/optimizers.RCDOpt.__init__.html", "api/mentpy/optimizers.RCDOpt.optimize.html", "api/mentpy/optimizers.RCDOpt.optimize_and_gradient_norm.html", "api/mentpy/optimizers.RCDOpt.reset.html", "api/mentpy/optimizers.RCDOpt.step.html", "api/mentpy/optimizers.RCDOpt.update_step_size.html", "api/mentpy/optimizers.SGDOpt.html", "api/mentpy/optimizers.SGDOpt.__init__.html", "api/mentpy/optimizers.SGDOpt.optimize.html", "api/mentpy/optimizers.SGDOpt.optimize_and_gradient_norm.html", "api/mentpy/optimizers.SGDOpt.reset.html", "api/mentpy/optimizers.SGDOpt.step.html", "api/mentpy/optimizers.SGDOpt.update_step_size.html", "basic-usage/intro-to-graphstates.html", "basic-usage/intro-to-mbqc.html", "basic-usage/measurements-in-qm.html", "basic-usage/simulating-mbqc-circuits.html", "getting-started.html", "index.html", "tutorials/classify-classical-data.html", "tutorials/classify-fisher.html", "tutorials/hea-discrete.html", "tutorials/intro-mb-vqe.html", "tutorials/intro-to-mbqml.html", "tutorials/intro-to-mbqml-parallel.html", "tutorials/learn-instrument.html"]})